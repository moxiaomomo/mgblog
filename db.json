{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"themes/yelee/source/apple-touch-icon.png","path":"apple-touch-icon.png","modified":0,"renderable":1},{"_id":"themes/yelee/source/background/bg-1.jpg","path":"background/bg-1.jpg","modified":0,"renderable":1},{"_id":"themes/yelee/source/background/bg-2.jpg","path":"background/bg-2.jpg","modified":0,"renderable":1},{"_id":"themes/yelee/source/background/bg-3.jpg","path":"background/bg-3.jpg","modified":0,"renderable":1},{"_id":"themes/yelee/source/css/style.styl","path":"css/style.styl","modified":0,"renderable":1},{"_id":"themes/yelee/source/background/bg-4.jpg","path":"background/bg-4.jpg","modified":0,"renderable":1},{"_id":"themes/yelee/source/img/AcFun.png","path":"img/AcFun.png","modified":0,"renderable":1},{"_id":"themes/yelee/source/img/Coding.png","path":"img/Coding.png","modified":0,"renderable":1},{"_id":"themes/yelee/source/img/LOFTER.png","path":"img/LOFTER.png","modified":0,"renderable":1},{"_id":"themes/yelee/source/img/CSDN.png","path":"img/CSDN.png","modified":0,"renderable":1},{"_id":"themes/yelee/source/img/Plunker.png","path":"img/Plunker.png","modified":0,"renderable":1},{"_id":"themes/yelee/source/img/Quora.png","path":"img/Quora.png","modified":0,"renderable":1},{"_id":"themes/yelee/source/img/TiddlyWiki.png","path":"img/TiddlyWiki.png","modified":0,"renderable":1},{"_id":"themes/yelee/source/img/SegmentFault.png","path":"img/SegmentFault.png","modified":0,"renderable":1},{"_id":"themes/yelee/source/img/dataframe.png","path":"img/dataframe.png","modified":0,"renderable":1},{"_id":"themes/yelee/source/img/golang_pprof.png","path":"img/golang_pprof.png","modified":0,"renderable":1},{"_id":"themes/yelee/source/img/golang_pprof_cpu.png","path":"img/golang_pprof_cpu.png","modified":0,"renderable":1},{"_id":"themes/yelee/source/img/V2EX.png","path":"img/V2EX.png","modified":0,"renderable":1},{"_id":"themes/yelee/source/img/scrollbar_arrow.png","path":"img/scrollbar_arrow.png","modified":0,"renderable":1},{"_id":"themes/yelee/source/img/udppackage.png","path":"img/udppackage.png","modified":0,"renderable":1},{"_id":"themes/yelee/source/img/avatar.png","path":"img/avatar.png","modified":0,"renderable":1},{"_id":"themes/yelee/source/img/博客园.png","path":"img/博客园.png","modified":0,"renderable":1},{"_id":"themes/yelee/source/img/niconico.png","path":"img/niconico.png","modified":0,"renderable":1},{"_id":"themes/yelee/source/img/bilibili.png","path":"img/bilibili.png","modified":0,"renderable":1},{"_id":"themes/yelee/source/img/新浪微博.png","path":"img/新浪微博.png","modified":0,"renderable":1},{"_id":"themes/yelee/source/img/虾米音乐.png","path":"img/虾米音乐.png","modified":0,"renderable":1},{"_id":"themes/yelee/source/img/网易云音乐.png","path":"img/网易云音乐.png","modified":0,"renderable":1},{"_id":"themes/yelee/source/img/简书.png","path":"img/简书.png","modified":0,"renderable":1},{"_id":"themes/yelee/source/img/知乎.png","path":"img/知乎.png","modified":0,"renderable":1},{"_id":"themes/yelee/source/js/main.js","path":"js/main.js","modified":0,"renderable":1},{"_id":"themes/yelee/source/js/mobile.js","path":"js/mobile.js","modified":0,"renderable":1},{"_id":"themes/yelee/source/js/pc.js","path":"js/pc.js","modified":0,"renderable":1},{"_id":"themes/yelee/source/img/豆瓣.png","path":"img/豆瓣.png","modified":0,"renderable":1},{"_id":"themes/yelee/source/js/toc.js","path":"js/toc.js","modified":0,"renderable":1},{"_id":"themes/yelee/source/background/bg-5.jpg","path":"background/bg-5.jpg","modified":0,"renderable":1},{"_id":"themes/yelee/source/background/bg-6.jpg","path":"background/bg-6.jpg","modified":0,"renderable":1},{"_id":"themes/yelee/source/img/consul_archi.png","path":"img/consul_archi.png","modified":0,"renderable":1},{"_id":"themes/yelee/source/img/golang_pprof_heap.png","path":"img/golang_pprof_heap.png","modified":0,"renderable":1},{"_id":"themes/yelee/source/img/tcppackage.png","path":"img/tcppackage.png","modified":0,"renderable":1},{"_id":"themes/yelee/source/js/instagram.js","path":"js/instagram.js","modified":0,"renderable":1},{"_id":"themes/yelee/source/js/GithubRepoWidget.js","path":"js/GithubRepoWidget.js","modified":0,"renderable":1},{"_id":"themes/yelee/source/js/search.js","path":"js/search.js","modified":0,"renderable":1},{"_id":"themes/yelee/source/background/backup/bg-1.jpg","path":"background/backup/bg-1.jpg","modified":0,"renderable":1},{"_id":"themes/yelee/source/background/backup/bg-2.jpg","path":"background/backup/bg-2.jpg","modified":0,"renderable":1},{"_id":"themes/yelee/source/background/backup/bg-3.jpg","path":"background/backup/bg-3.jpg","modified":0,"renderable":1},{"_id":"themes/yelee/source/background/backup/bg-4.jpg","path":"background/backup/bg-4.jpg","modified":0,"renderable":1},{"_id":"themes/yelee/source/img/avatar3.jpg","path":"img/avatar3.jpg","modified":0,"renderable":1}],"Cache":[{"_id":"themes/yelee/_config.yml","hash":"5d82542dba4a81e26c27c57b66aacde2df952b86","modified":1504513040743},{"_id":"themes/yelee/package.json","hash":"0199dfb3d44cf520b67464817d13c44a7766b8d6","modified":1500703875689},{"_id":"themes/yelee/README.md","hash":"12bc9cdb68f51df81bcc36a5263e0a6c5860f646","modified":1500703875687},{"_id":"source/_posts/shell-compare-files.md","hash":"df1574de3028caeed4339386dd7664b258bbea10","modified":1506597519431},{"_id":"source/404/index.md","hash":"ba4482e55221f6c6466d2435e9d66d9a644b5d83","modified":1501740315350},{"_id":"source/_posts/基于Docker的Consul-官方镜像-集群部署指南.md","hash":"416866ab3ce3b67f9f80ff4b14d8b4c90c41280f","modified":1502072018394},{"_id":"source/_posts/deployment-spark-on-yarn.md","hash":"25e9ca0192fdc03ae93cadbac3e6cc5f93ac8cf6","modified":1502896502367},{"_id":"themes/yelee/languages/en.yml","hash":"2c096d06c0af4ddf9c128fc8f77fb276b59a47fb","modified":1500703875688},{"_id":"themes/yelee/languages/default.yml","hash":"80cc17267333753accc0b1c85a73678fedcbce76","modified":1500703875687},{"_id":"themes/yelee/languages/zh-Hant-HK.yml","hash":"c38a95f5076ad951839aaf7748295d7eea277c61","modified":1500703875688},{"_id":"themes/yelee/languages/zh-Hans.yml","hash":"b5b2d20cde04db3773962284a002d025b09134b0","modified":1500703875688},{"_id":"themes/yelee/languages/zh-Hant-TW.yml","hash":"f372cc0d758a7d8bbb885aa9756d607bec26469a","modified":1500703875688},{"_id":"source/tags/index.md","hash":"595d07dc68e6ecca77fe38b425caefdf2e9d91cb","modified":1501740303672},{"_id":"source/aboutme/index.md","hash":"fd51e388b8cd522792e1539c9bb272777479c478","modified":1503394704570},{"_id":"themes/yelee/layout/archive.ejs","hash":"2703b07cc8ac64ae46d1d263f4653013c7e1666b","modified":1500703875689},{"_id":"themes/yelee/layout/category.ejs","hash":"765426a9c8236828dc34759e604cc2c52292835a","modified":1500703875689},{"_id":"themes/yelee/layout/index.ejs","hash":"aa1b4456907bdb43e629be3931547e2d29ac58c8","modified":1500703875689},{"_id":"themes/yelee/layout/layout.ejs","hash":"3a4350f23a1286345f76c949466c97a7200dae8e","modified":1500703875689},{"_id":"themes/yelee/layout/page.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1500703875689},{"_id":"themes/yelee/layout/tag.ejs","hash":"eaa7b4ccb2ca7befb90142e4e68995fb1ea68b2e","modified":1500703875689},{"_id":"themes/yelee/layout/post.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1500703875689},{"_id":"themes/yelee/source/apple-touch-icon.png","hash":"c0fda117fa166d63b9eb690cc5e4fb2caaf493b3","modified":1500703875689},{"_id":"source/_posts/about/about.md","hash":"51851602a98538693728eea908e2ab877669d7c9","modified":1501658910881},{"_id":"source/_posts/encode/base64.md","hash":"3ba5f81eb101cb9f7e58c01cb6f97e9c149345ff","modified":1500791777117},{"_id":"source/_posts/encode/centos_zh.md","hash":"3eb23c9fea65eb9f05fc901fada4bfde4b3982a2","modified":1503208127995},{"_id":"source/_posts/golang/golang-simple-uploadsrv.md","hash":"5fd30cd3e1cc3504ddbb100bc8e5fc9cf6ba3beb","modified":1504844360025},{"_id":"source/_posts/golang/golang-json-rpc.md","hash":"6a9655542e24db7360e3fc5d5b4d8eb539f6773b","modified":1502359816094},{"_id":"source/_posts/golang/golang-pprof性能分析工具.md","hash":"4e4a9beaca38d51557b88acc12c92f3d2aab5dff","modified":1502449214151},{"_id":"source/_posts/golang/golang-工作池workerpool.md","hash":"fcbc5ec783982e12bbf98a04ed1d87f34d2a8336","modified":1502360436402},{"_id":"source/_posts/golang/golang_array-slice.md","hash":"1f35f3fd506f13bdd713c10d34f6392c01665663","modified":1502084830146},{"_id":"source/_posts/golang/golang_function.md","hash":"9bed7e3694772ccb9e50e36fc328c688782d8356","modified":1502084830146},{"_id":"source/_posts/golang/golang_channel.md","hash":"9ee1ccd321012b2fbd75860fce2c2acdd04290b6","modified":1502084830146},{"_id":"source/_posts/golang/golang_gRPC.md","hash":"496617d1f97094b9821e71de1fc57fe9c2a385fa","modified":1502084830146},{"_id":"source/_posts/golang/golang_goroutine.md","hash":"8c63262c813a64c82f1f9a564a300ac6a72bb334","modified":1502084830146},{"_id":"source/_posts/golang/golang-异常处理.md","hash":"333960ce94f7048e3c36fd2d33b34ab9ac688f54","modified":1502344673396},{"_id":"source/_posts/golang/golang_http-server.md","hash":"96becc852c7d024a8ae5c8104f9f72d3be6579bc","modified":1502084830146},{"_id":"source/_posts/golang/golang_map-set.md","hash":"443180c06997219541b3cc19ac557943dc0a6c88","modified":1502084830147},{"_id":"source/_posts/golang/golang_interface.md","hash":"189fb036b2dbd2fd546f0dc5a10fa00048d8c6e3","modified":1502084830146},{"_id":"source/_posts/mysql/mysql_concurrent_query.md","hash":"d7383843d149e7ee25ddff1d551c05bbef3bc23c","modified":1502084830147},{"_id":"source/_posts/golang/golang_pointer.md","hash":"5a1379684f65006091edaaab9ec68f58d22069db","modified":1502074717447},{"_id":"source/_posts/python/python-map-function.md","hash":"9a99a0c86eb580cc2c7e77772bc0426d945679a8","modified":1502378625225},{"_id":"source/_posts/network/network-transport-layer.md","hash":"f511e99b73e8b064f407322be9fca7c04d217868","modified":1502769529205},{"_id":"themes/yelee/layout/_partial/after-footer.ejs","hash":"748391b89b661fa1ed7da0b15ed6870981ec4dc3","modified":1500703875688},{"_id":"source/_posts/python/python-pika-broken-pipe.md","hash":"eb272a6a7f755be7ae38f3713f60d7391a6e03c4","modified":1503141602241},{"_id":"themes/yelee/layout/_partial/archive-post.ejs","hash":"0ecc2ad07b4abad80f564ac1858c50bcbdff34f8","modified":1500703875688},{"_id":"themes/yelee/layout/_partial/archive.ejs","hash":"a4eacc2bc1278095a0ef99f904b0634c78f980eb","modified":1500703875688},{"_id":"themes/yelee/layout/_partial/article.ejs","hash":"afd85b362d732fa9b439af7dc44b657d0d1aae3d","modified":1500703875688},{"_id":"themes/yelee/layout/_partial/background.ejs","hash":"aeef39abef66ee0bd6c9efe856eaeb1b81416d41","modified":1500703875688},{"_id":"themes/yelee/layout/_partial/footer.ejs","hash":"82653e3bbdc605b51e1b0a36e30f3ac1180c838e","modified":1500703875688},{"_id":"themes/yelee/layout/_partial/google-analytics.ejs","hash":"1ccc627d7697e68fddc367c73ac09920457e5b35","modified":1500703875688},{"_id":"themes/yelee/layout/_partial/head.ejs","hash":"55e90c3d5de6d7ffcfe26c4dc22189a7a27b6651","modified":1500703875688},{"_id":"themes/yelee/layout/_partial/ie-updater.ejs","hash":"3e5f2e41bbb1a5b93a8a7a6cb9ccd191ced54408","modified":1500703875688},{"_id":"themes/yelee/layout/_partial/header.ejs","hash":"b69855e07b65117769adc515cb64b803932068c9","modified":1500703875688},{"_id":"themes/yelee/layout/_partial/left-col.ejs","hash":"90fd7c763faf8d64d58612f592cbacbefdaea161","modified":1500703875688},{"_id":"themes/yelee/layout/_partial/mathjax.ejs","hash":"ce868f8b2b5b377cadc270e3a5bb5826f8bf0dee","modified":1500703875688},{"_id":"source/_posts/python/python3-aiohttp.md","hash":"64efedf809d0242b3cd72c540de512e546536d19","modified":1504606752539},{"_id":"themes/yelee/layout/_partial/open-in-new-tab.ejs","hash":"a6046bc322ce9194faa9559c70e1618a7e1e4cbc","modified":1500703875688},{"_id":"themes/yelee/layout/_partial/mobile-nav.ejs","hash":"306be982577b0ef968f855d0dfeaab6b180b8a50","modified":1500703875688},{"_id":"themes/yelee/layout/_partial/page.ejs","hash":"cfce60062cdb60893baeda7fa0266ae4086c2bc8","modified":1500703875689},{"_id":"themes/yelee/layout/_partial/post-nav-button.ejs","hash":"0a98bffdd14f6677721841c0ac4487a86c77266c","modified":1500703875689},{"_id":"themes/yelee/layout/_partial/scrolling-button.ejs","hash":"c5e1c3a8e1e6b0d927ac25a7fb8720ee7ac83ad8","modified":1500703875689},{"_id":"themes/yelee/layout/_partial/tag-cloud-page.ejs","hash":"432ded02bcc1f0d52cd833e8eeac688ee886169a","modified":1500703875689},{"_id":"themes/yelee/source/background/bg-1.jpg","hash":"9a5241de4c880f13a278f6980bf11d4dfb214d82","modified":1500703875691},{"_id":"themes/yelee/source/background/bg-2.jpg","hash":"d1e0b92e8fa822e44d185b5e1bf94ab47bc98a0a","modified":1500703875691},{"_id":"themes/yelee/source/background/bg-3.jpg","hash":"d476909f06fe8267c676952e3582bf9e9ff73585","modified":1500703875691},{"_id":"themes/yelee/layout/_partial/toc.ejs","hash":"7ee88b1a98eea5cbd44c0f9a11b86b46aa2d6752","modified":1500703875689},{"_id":"themes/yelee/layout/_partial/tab-title-change.ejs","hash":"1bebab6eb7a849319cd48fe051f3c71b9349a723","modified":1500703875689},{"_id":"source/_posts/python/python-upload-download-large-file.md","hash":"7342da91d49924ee4051561aede587efc3fd3435","modified":1503153715737},{"_id":"themes/yelee/source/css/_extend.styl","hash":"8ab1ad313bd6707d248c5ca1ee9a5eab8d815e42","modified":1500703875693},{"_id":"themes/yelee/source/css/_variables.styl","hash":"f429eb9bc9f0a270ec68c4f4c63903250746a01c","modified":1500703875694},{"_id":"themes/yelee/source/css/style.styl","hash":"b285f9a75abd09c7d06fe89e70f9e1819eac27dd","modified":1500703875695},{"_id":"themes/yelee/source/background/bg-4.jpg","hash":"8e80d0b7786c3bf7b9648c0190719e78001e9eeb","modified":1500703875692},{"_id":"themes/yelee/source/img/AcFun.png","hash":"df6b0fa39ced4dc988359fc7b7cd1e5403de08a6","modified":1500703875695},{"_id":"themes/yelee/source/img/Coding.png","hash":"afb4bce19bebf61e3c486fd5199369d6eb191b78","modified":1500703875695},{"_id":"themes/yelee/source/img/LOFTER.png","hash":"88670eaea8612839e9d6a40a3636e4231ab56c0f","modified":1500703875695},{"_id":"themes/yelee/source/img/CSDN.png","hash":"59f7d89eda8a7310a0ee1607e153c0829af7eb6e","modified":1500703875695},{"_id":"themes/yelee/source/img/Plunker.png","hash":"14a0054b9b4a0e459987f34b9ab48ab22dbe5cf9","modified":1500703875695},{"_id":"themes/yelee/source/img/Quora.png","hash":"1a624ade0d07f2482b21bef1e2a5ddd0110ba352","modified":1500703875695},{"_id":"themes/yelee/source/img/TiddlyWiki.png","hash":"b7f68f8f9c45561a9455aee0bfb80e35cae6f8df","modified":1500703875695},{"_id":"themes/yelee/source/img/SegmentFault.png","hash":"1afbc7e575e2e9ed9404be84a3f92f7ca8345a9c","modified":1500703875695},{"_id":"themes/yelee/source/img/dataframe.png","hash":"1a43a9b03ec57ad914dfcb287bc27cb6018621e7","modified":1502767933085},{"_id":"themes/yelee/source/img/golang_pprof.png","hash":"6dd94ffb6a2e1e8995c23e36dd8643a0195ac919","modified":1502448930323},{"_id":"themes/yelee/source/img/golang_pprof_cpu.png","hash":"377d7745d765d6a6f28a343dc556151ce8177aed","modified":1502448930323},{"_id":"themes/yelee/source/img/V2EX.png","hash":"d0768de8555f9be0ee8ce956198cef454d4e4d7c","modified":1500703875695},{"_id":"themes/yelee/source/img/scrollbar_arrow.png","hash":"af987032f2171867bb58b165d2180eb5dcbea637","modified":1500703875695},{"_id":"themes/yelee/source/img/udppackage.png","hash":"551069851fa2307e5b6d800b128ed09636d90832","modified":1502767933094},{"_id":"themes/yelee/source/img/avatar.png","hash":"e4bca3d60087cd6e775d8e2aa2bf0d35e3859592","modified":1500703875695},{"_id":"themes/yelee/source/img/博客园.png","hash":"5ff6f4c9f1fc1695217a57436d58b246d9d2f197","modified":1500703875695},{"_id":"themes/yelee/source/img/niconico.png","hash":"fabc7ca45e9ee5698db33a25de8b1f8a7c7d6723","modified":1500703875695},{"_id":"themes/yelee/source/img/bilibili.png","hash":"be37b7e9a091c8547b8ee8b9d29583af8ded61c0","modified":1500703875695},{"_id":"themes/yelee/source/img/新浪微博.png","hash":"7a145ed1daee0c172cda77098f4254fc21f9eeee","modified":1500703875695},{"_id":"themes/yelee/source/img/虾米音乐.png","hash":"a0039b049779b1f37c0b0b91760943b7bf25c8f1","modified":1500703875695},{"_id":"themes/yelee/source/img/网易云音乐.png","hash":"4fd1275fd988584811cf710207eb077f2306f271","modified":1500703875695},{"_id":"themes/yelee/source/img/简书.png","hash":"5c91ee83cab4abe160240e09de345b6935c8cb37","modified":1500703875695},{"_id":"themes/yelee/source/img/知乎.png","hash":"ed6d3c304789e112d09f40784fa6add1f1a38bd6","modified":1500703875695},{"_id":"themes/yelee/source/js/main.js","hash":"369774a7ff45a2e5117a796330a04aeb50a61fdf","modified":1500703875695},{"_id":"themes/yelee/source/js/mobile.js","hash":"8abc32d18f16db56f51caad607cffb6ca756eca9","modified":1500703875695},{"_id":"themes/yelee/source/js/pc.js","hash":"bc289c5dc610e2a34d308daeb9adea96d01f7788","modified":1500703875695},{"_id":"themes/yelee/source/img/豆瓣.png","hash":"f1fc97f98612bcdf4a681542e5388483b40a5300","modified":1500703875695},{"_id":"themes/yelee/source/js/toc.js","hash":"72ba1228fc1a44df45b8f4b562eba78594f13016","modified":1500703875696},{"_id":"themes/yelee/source/background/bg-5.jpg","hash":"e4a3631b6b0f94ebce30a6f01ecb2b6ed7cfdb0b","modified":1500703875692},{"_id":"themes/yelee/source/background/bg-6.jpg","hash":"51b427f07ffc6f2ad97651f23cc16e8f19ed02f9","modified":1500703875693},{"_id":"themes/yelee/source/img/consul_archi.png","hash":"420ce04ab6439e1f615adc878c259568ac2d4a90","modified":1502379551365},{"_id":"themes/yelee/source/img/golang_pprof_heap.png","hash":"65c69fc1b61d263e0ad4e337dc38ac9861a33961","modified":1502448930323},{"_id":"themes/yelee/source/img/tcppackage.png","hash":"a758f22d612ee27578eb6a700ec3df12be13ace7","modified":1502767933085},{"_id":"themes/yelee/source/js/instagram.js","hash":"81e13cacf4947118ed1920e59b04ccf6beef6b86","modified":1500703875695},{"_id":"themes/yelee/source/js/GithubRepoWidget.js","hash":"624e81a3b0e57495b0c0e0b3e056296c6e8ae5df","modified":1500703875695},{"_id":"themes/yelee/source/js/search.js","hash":"b456aaab98bbc3b0906f8a16d1e6e4f74dfcffda","modified":1500703875696},{"_id":"themes/yelee/layout/_partial/comments/disqus.ejs","hash":"df7ee469b648b12b5ee3104ef513d54cbb7418af","modified":1500703875688},{"_id":"themes/yelee/layout/_partial/comments/duoshuo.ejs","hash":"e7f12f1246a67a5b556c2d5b37dc78733f1cf15a","modified":1500703875688},{"_id":"themes/yelee/layout/_partial/comments/count-comment.ejs","hash":"d3c1b0b31db9d80e857f3054d010ea49c0f88134","modified":1500703875688},{"_id":"themes/yelee/layout/_partial/comments/click2show.ejs","hash":"678f3aec2980d378ea44be60eec3eb504c8ba668","modified":1500703875688},{"_id":"themes/yelee/layout/_partial/comments/youyan.ejs","hash":"bcf2070587645afd20a4eb046b9c8bb9c44d1cf5","modified":1500703875688},{"_id":"themes/yelee/layout/_partial/post/nav.ejs","hash":"6f531dbc9cc7ae42d2486d6707f826cfe7d9d8bc","modified":1500703875689},{"_id":"themes/yelee/layout/_partial/post/date.ejs","hash":"329ed372296a86bce73ff8936af5601723fdd70a","modified":1500703875689},{"_id":"themes/yelee/layout/_partial/post/category.ejs","hash":"08c8d98bc6a73d3f72a3b0b30521ff28e1b657a7","modified":1500703875689},{"_id":"themes/yelee/layout/_partial/post/title.ejs","hash":"d4a460a35e2112d0c7414fd5e19b3a16093f1caf","modified":1500703875689},{"_id":"themes/yelee/layout/_partial/post/tag.ejs","hash":"7d2693a1162bf26e4b1ae9b789e0b2a2637ddbd5","modified":1500703875689},{"_id":"themes/yelee/layout/_partial/post/share.ejs","hash":"58c2db54a9867aaafe68a7f052b04701c7c3df0f","modified":1500703875689},{"_id":"themes/yelee/source/background/backup/bg-1.jpg","hash":"31d7bb15211000c05656899302f8ec9ee3de0e9f","modified":1500703875689},{"_id":"themes/yelee/source/css/_partial/archive.styl","hash":"102c23dbb6cde3cbfca3b151c742e0d77911186e","modified":1500703875693},{"_id":"themes/yelee/source/css/_partial/article.styl","hash":"190828c822096bb3098a7d14c3340eb004057aa0","modified":1500703875693},{"_id":"themes/yelee/source/css/_partial/footer.styl","hash":"a419108f1b820c59fcc56d218bfaaa4ffc4f1d4d","modified":1500703875694},{"_id":"themes/yelee/source/background/backup/bg-2.jpg","hash":"7ae358f3ab8b41558444053400e796c41b3ba0e2","modified":1500703875690},{"_id":"themes/yelee/source/css/_partial/highlight.styl","hash":"18c337238f3d3fd26349909515396310c9e0f45b","modified":1503389358474},{"_id":"themes/yelee/source/css/_partial/instagram.styl","hash":"a093443add2f529396d6b6bdef1675bc3acf3958","modified":1500703875694},{"_id":"themes/yelee/source/css/_partial/main.styl","hash":"405db411896f3c7de9e7dd27e58c920fb90b9834","modified":1500703875694},{"_id":"themes/yelee/source/css/_partial/mobile-slider.styl","hash":"39db458d4e9f6973afc1390b4d3fc0291fff4c40","modified":1500703875694},{"_id":"themes/yelee/source/css/_partial/mobile.styl","hash":"dfb20f2515a26d75e42fe09741e91cc889426b11","modified":1500703875694},{"_id":"themes/yelee/source/css/_partial/page.styl","hash":"ca3f871adf8fdb296e4394070605dded53d93cb2","modified":1500703875694},{"_id":"themes/yelee/source/css/_partial/scroll.styl","hash":"f32deb9192568a2ea789d77a23a08d07f4e57d59","modified":1500703875694},{"_id":"themes/yelee/source/background/backup/bg-3.jpg","hash":"1a06d3a660bfb99b62d760e4e1e09de168a4c74c","modified":1500703875690},{"_id":"themes/yelee/source/css/_partial/share.styl","hash":"88c1277397b71eb1f3473a94d9542314f983cd09","modified":1500703875694},{"_id":"themes/yelee/source/css/_partial/tagcloud.styl","hash":"b38b275728bfe11809defe1077b03cb423c3c92f","modified":1500703875694},{"_id":"themes/yelee/source/css/_partial/toc.styl","hash":"eb19bbd37fc2c1abd238e2ed96b22cb1aae41ab7","modified":1500703875694},{"_id":"themes/yelee/source/background/backup/bg-4.jpg","hash":"6df1383d0f6134016d844df9abb740a6e0c0b2c5","modified":1500703875690},{"_id":"themes/yelee/source/css/_util/grid.styl","hash":"1aa883ab432d9e4139c89dcbd40ae2bd1528d029","modified":1500703875694},{"_id":"themes/yelee/source/css/_util/mixin.styl","hash":"429bad87fc156eacf226c5e35b0eafc277f2504b","modified":1500703875694},{"_id":"themes/yelee/source/css/_partial/header.styl","hash":"67e59feb18eee6026717cb440d86ab9551782628","modified":1500703875694},{"_id":"themes/yelee/source/css/_partial/wheelmenu.styl","hash":"9e57421eab562ea13d0ed2b2e1415eee79fa23d0","modified":1500703875694},{"_id":"themes/yelee/source/css/_partial/search.styl","hash":"fcaa5deaa654aaec69e267e23b49df07f84f633a","modified":1500703875694},{"_id":"themes/yelee/source/img/avatar3.jpg","hash":"07a29a8aada9ef73bf6cc150bf1d88df4bc9a89b","modified":1502085714023},{"_id":"themes/yelee/source/css/_partial/customise/blockquote.styl","hash":"5e6edb9ad49288743ed550a2bd8c9a3c8e208455","modified":1500703875693},{"_id":"themes/yelee/source/css/_partial/customise/code-block.styl","hash":"4db1a992a06fd92b779f0afc9bb8bb3667bdb101","modified":1500703875693},{"_id":"themes/yelee/source/css/_partial/customise/color-scheme.styl","hash":"b58262a9f8903e75df431291745e19ccd8ff243a","modified":1500703875693},{"_id":"themes/yelee/source/css/_partial/customise/heading.styl","hash":"f309241c1daa9b6c04aa04063307537c219fdd59","modified":1500703875693},{"_id":"themes/yelee/source/css/_partial/customise/inline-code.styl","hash":"a15292b2b3541ea022c0fb7441875192dee5ad9d","modified":1500703875693},{"_id":"themes/yelee/source/css/_partial/customise/list.styl","hash":"b1e564ed76d6e892556b61b4278270fc9eeea961","modified":1500703875693},{"_id":"themes/yelee/source/css/_partial/customise/social-icon.styl","hash":"bfa5c863d474266f32a570e34a0effda964f7f40","modified":1500703875694}],"Category":[],"Data":[],"Page":[{"title":"404","date":"2017-08-03T06:05:15.000Z","_content":"","source":"404/index.md","raw":"---\ntitle: 404\ndate: 2017-08-03 14:05:15\n---\n","updated":"2017-08-03T06:05:15.350Z","path":"404/index.html","comments":1,"layout":"page","_id":"cj84nanyn00017v4dpqqg0oyq","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"tags","date":"2017-08-03T06:05:03.000Z","_content":"","source":"tags/index.md","raw":"---\ntitle: tags\ndate: 2017-08-03 14:05:03\n---\n","updated":"2017-08-03T06:05:03.672Z","path":"tags/index.html","comments":1,"layout":"page","_id":"cj84nanz100037v4d44fs3dgy","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"aboutme","date":"2015-07-31T04:04:33.000Z","_content":"\n# 联系方式\n- 手机：134340\\*\\*\\*\\*\n- Email：moxiaomomo@gmail.com\n- QQ：809444138\n\n---\n\n# 个人信息\n\n - 姓名: moguang\n - 性别: 男\n - 出生年月: 1988/08\n - 教育背景：本科/华南理工大学软件工程\n - 工作年限：约5年(2012年本科毕业)\n - 个人博客：<br>\n[http://blog.moguang.me](http://blog.moguang.me)<br>\n[http://blog.csdn.net/moxiaomomo](http://blog.csdn.net/moxiaomomo)\n\n---\n\n# 工作经历\n\n## 115网盘科技\n  任职部门: 平台部<br>\n  任职时间：2016年12月 ~ 至今<br>\n  职位名称: 高级研发工程师\n  \n**主要职责**\n\n- 搭建数据分析平台\n\n    - 基于hadoop搭建资源调度系统, 基于spark搭建分布式计算系统;<br>\n    - 基于awk过滤和格式化日志, 及HDFS存储格式化数据, 日志来源含纯文本, elasticSearch, 数据库等;<br>\n    - 结合spark SQL, 对每天数亿条记录进行各维度分布式统计分析;<br>\n    - 结合spark MLib和机器学习算法, 对用户数据进行聚类/分类学习, 构建用户画像;<br>\n    - 基于python tornado, echarts及mongoDB构建报表系统;\n   \n- 参与微服务开发\n  \n    - 基于GO语言, go-micro框架进行易于部署和可插拔的微服务开发;<br>\n    - 基于Docker, 实现consul服务发现的快速部署方案;<br>\n    - 完成配置中心，访问统计，文件获取等基础服务组件的开发;\n \n- 存储服务维护\n    - 日常维护百PB量级文件存储服务, 包括数据迁移, 流量监控, 读写监控等;<br>\n    - 其他, 如数据修复工作，配合运维处理突发问题;\n \n- CDN节点加速\n    - 根据视频播放记录, 统计分析各地区热门视频数据;<br>\n    - 流量谷值时将热门视频预缓存到自建CDN加速节点中, 以减少回源率, 降低流量峰值。\n\n## T1000科技(创业团队)\n  任职部门: 研发部<br>\n  任职时间：2016年5月 ~ 2016年11月<br>\n  职位名称: 研发主管\n\n- 主要职责<br>\n  - 负责智能坐便器系统架构设计, 任务分配以及进度控制;<br>\n  - 负责业务后台搭建、业务接口开发: 采用Nginx+python_tornado+Mysql+MongoDB逻辑结构进行构建;<br>\n  - 负责消息推送服务的实现: 基于MQTT协议+SSL/TLS安全加密的mosquitto开源框架进行开发，及接入阿里云IoT平台;<br>\n  - 负责嵌入式控制系统设计及研发: 基于类BeagleboneBlack开发板+linux C环境, 实现进程间通信及串口通信。\n\n## 猎豹移动科技\n  任职部门：金山毒霸云后台研发部, 备份大师云后台研发部<br>\n  任职时间：2014年5月 ~ 2016年4月<br>\n  职位名称：服务端开发工程师\n\n**主要职责**\n\n- 备份大师项目, 云后台服务开发\n   - 备份大师业务API: 基于python tornado框架实现业务接口, 通过亚马逊AWS EC2部署服务, 使用AWS RDS/DDB/S3实现数据存取;<br>\n   - 备份大师API升级: 基于Golang搭建API服务, 逐步接替tornado框架, 支持千万级用户量的接口访问;<br>\n   - 已有业务云数据的迁移: 设计迁移方案, 通过在线/离线方式从AWS 结构化数据库往非结构化数据库迁移，以满足快速增长的数据的高效存取;<br>\n   - 备份大师账号系统完善: 优化账号系统模块, 并接入第三方账号Google/Facebook登录功能;<br>\n   - 搭建日志收集与统计平台: 每天过滤与统计亿条日志，通过django生成报表。\n\n- 洋葱Live直播项目, 消息系统开发\n   - 设计并搭建直播消息系统: 基于GO+websocket+redis构建消息服务, 单机支持约30w+长连接，并部署上线使用;\n   - 对消息系统进行升级, 实现分布式架构。\n\n## 正点时空科技\n  任职部门：平台部<br>\n  任职时间：2012年6月 ~ 2014年4月<br>\n  职位名称：数据开发工程师\n\n**主要职责**\n\n- 搭建及维护数据平台\n  - 构建日志统计平台: 基于python+shell+mysql, 对每天约100GB应用日志进行过滤与统计;<br>\n  - 搭建Hadoop离线统计平台: 通过搭建hadoop集群和定制MapReduce流程, 实现离线数据分布式统计;<br>\n  - MySQL数据库维护: 包括数据库相关表设计, 冷热数据分离, 数据冗余备份等。\n\n- 客户端应用开发(WP7/Qt)开发\n  - 参与开发WP7/PC端闹钟及日历应用开发 \n\n---\n\n# 常用技能清单\n\n- 语言：Python / GO / shell(AWK) / C / javascript\n- 编程环境: Linux, Vim / SublimeText / Atom / CodeBlocks\n- 操作系统: 熟悉Linux下文件IO / 网络IO / 进程间通信 / 内存管理等\n- 网络原理: 熟悉TCP/IP协议, HTTP/Websocket/MQTT等网络协议, Raft/Gossip等分布式协议\n- 编程框架：Python-tornado / python-django / gin / paho-mqtt\n- 开源架构: Hadoop-hdfs, Hadoop-spark, micro-service\n- 数据库：熟悉MySQL / redis / dynamoDB / MongoDB\n- 代码管理：Svn / Git\n- 文档管理: Markdown / Gitbook / Google-docs / Graphviz\n- 云开放平台：AWS(亚马逊云) / KS3(金山云) / 阿里云IoT\n- 物联网: ARM-linux(BBB), C/python, MQTT, TCP/IP, 串口通信\n\n---\n","source":"aboutme/index.md","raw":"---\ntitle: aboutme\ndate: 2015-07-31 12:04:33\n---\n\n# 联系方式\n- 手机：134340\\*\\*\\*\\*\n- Email：moxiaomomo@gmail.com\n- QQ：809444138\n\n---\n\n# 个人信息\n\n - 姓名: moguang\n - 性别: 男\n - 出生年月: 1988/08\n - 教育背景：本科/华南理工大学软件工程\n - 工作年限：约5年(2012年本科毕业)\n - 个人博客：<br>\n[http://blog.moguang.me](http://blog.moguang.me)<br>\n[http://blog.csdn.net/moxiaomomo](http://blog.csdn.net/moxiaomomo)\n\n---\n\n# 工作经历\n\n## 115网盘科技\n  任职部门: 平台部<br>\n  任职时间：2016年12月 ~ 至今<br>\n  职位名称: 高级研发工程师\n  \n**主要职责**\n\n- 搭建数据分析平台\n\n    - 基于hadoop搭建资源调度系统, 基于spark搭建分布式计算系统;<br>\n    - 基于awk过滤和格式化日志, 及HDFS存储格式化数据, 日志来源含纯文本, elasticSearch, 数据库等;<br>\n    - 结合spark SQL, 对每天数亿条记录进行各维度分布式统计分析;<br>\n    - 结合spark MLib和机器学习算法, 对用户数据进行聚类/分类学习, 构建用户画像;<br>\n    - 基于python tornado, echarts及mongoDB构建报表系统;\n   \n- 参与微服务开发\n  \n    - 基于GO语言, go-micro框架进行易于部署和可插拔的微服务开发;<br>\n    - 基于Docker, 实现consul服务发现的快速部署方案;<br>\n    - 完成配置中心，访问统计，文件获取等基础服务组件的开发;\n \n- 存储服务维护\n    - 日常维护百PB量级文件存储服务, 包括数据迁移, 流量监控, 读写监控等;<br>\n    - 其他, 如数据修复工作，配合运维处理突发问题;\n \n- CDN节点加速\n    - 根据视频播放记录, 统计分析各地区热门视频数据;<br>\n    - 流量谷值时将热门视频预缓存到自建CDN加速节点中, 以减少回源率, 降低流量峰值。\n\n## T1000科技(创业团队)\n  任职部门: 研发部<br>\n  任职时间：2016年5月 ~ 2016年11月<br>\n  职位名称: 研发主管\n\n- 主要职责<br>\n  - 负责智能坐便器系统架构设计, 任务分配以及进度控制;<br>\n  - 负责业务后台搭建、业务接口开发: 采用Nginx+python_tornado+Mysql+MongoDB逻辑结构进行构建;<br>\n  - 负责消息推送服务的实现: 基于MQTT协议+SSL/TLS安全加密的mosquitto开源框架进行开发，及接入阿里云IoT平台;<br>\n  - 负责嵌入式控制系统设计及研发: 基于类BeagleboneBlack开发板+linux C环境, 实现进程间通信及串口通信。\n\n## 猎豹移动科技\n  任职部门：金山毒霸云后台研发部, 备份大师云后台研发部<br>\n  任职时间：2014年5月 ~ 2016年4月<br>\n  职位名称：服务端开发工程师\n\n**主要职责**\n\n- 备份大师项目, 云后台服务开发\n   - 备份大师业务API: 基于python tornado框架实现业务接口, 通过亚马逊AWS EC2部署服务, 使用AWS RDS/DDB/S3实现数据存取;<br>\n   - 备份大师API升级: 基于Golang搭建API服务, 逐步接替tornado框架, 支持千万级用户量的接口访问;<br>\n   - 已有业务云数据的迁移: 设计迁移方案, 通过在线/离线方式从AWS 结构化数据库往非结构化数据库迁移，以满足快速增长的数据的高效存取;<br>\n   - 备份大师账号系统完善: 优化账号系统模块, 并接入第三方账号Google/Facebook登录功能;<br>\n   - 搭建日志收集与统计平台: 每天过滤与统计亿条日志，通过django生成报表。\n\n- 洋葱Live直播项目, 消息系统开发\n   - 设计并搭建直播消息系统: 基于GO+websocket+redis构建消息服务, 单机支持约30w+长连接，并部署上线使用;\n   - 对消息系统进行升级, 实现分布式架构。\n\n## 正点时空科技\n  任职部门：平台部<br>\n  任职时间：2012年6月 ~ 2014年4月<br>\n  职位名称：数据开发工程师\n\n**主要职责**\n\n- 搭建及维护数据平台\n  - 构建日志统计平台: 基于python+shell+mysql, 对每天约100GB应用日志进行过滤与统计;<br>\n  - 搭建Hadoop离线统计平台: 通过搭建hadoop集群和定制MapReduce流程, 实现离线数据分布式统计;<br>\n  - MySQL数据库维护: 包括数据库相关表设计, 冷热数据分离, 数据冗余备份等。\n\n- 客户端应用开发(WP7/Qt)开发\n  - 参与开发WP7/PC端闹钟及日历应用开发 \n\n---\n\n# 常用技能清单\n\n- 语言：Python / GO / shell(AWK) / C / javascript\n- 编程环境: Linux, Vim / SublimeText / Atom / CodeBlocks\n- 操作系统: 熟悉Linux下文件IO / 网络IO / 进程间通信 / 内存管理等\n- 网络原理: 熟悉TCP/IP协议, HTTP/Websocket/MQTT等网络协议, Raft/Gossip等分布式协议\n- 编程框架：Python-tornado / python-django / gin / paho-mqtt\n- 开源架构: Hadoop-hdfs, Hadoop-spark, micro-service\n- 数据库：熟悉MySQL / redis / dynamoDB / MongoDB\n- 代码管理：Svn / Git\n- 文档管理: Markdown / Gitbook / Google-docs / Graphviz\n- 云开放平台：AWS(亚马逊云) / KS3(金山云) / 阿里云IoT\n- 物联网: ARM-linux(BBB), C/python, MQTT, TCP/IP, 串口通信\n\n---\n","updated":"2017-08-22T09:38:24.570Z","path":"aboutme/index.html","comments":1,"layout":"page","_id":"cj84nao0100067v4d6vukukll","content":"<h1 id=\"联系方式\"><a href=\"#联系方式\" class=\"headerlink\" title=\"联系方式\"></a>联系方式</h1><ul>\n<li>手机：134340****</li>\n<li>Email：moxiaomomo@gmail.com</li>\n<li>QQ：809444138</li>\n</ul>\n<hr>\n<h1 id=\"个人信息\"><a href=\"#个人信息\" class=\"headerlink\" title=\"个人信息\"></a>个人信息</h1><ul>\n<li>姓名: moguang</li>\n<li>性别: 男</li>\n<li>出生年月: 1988/08</li>\n<li>教育背景：本科/华南理工大学软件工程</li>\n<li>工作年限：约5年(2012年本科毕业)</li>\n<li>个人博客：<br><br><a href=\"http://blog.moguang.me\" target=\"_blank\" rel=\"external\">http://blog.moguang.me</a><br><br><a href=\"http://blog.csdn.net/moxiaomomo\" target=\"_blank\" rel=\"external\">http://blog.csdn.net/moxiaomomo</a></li>\n</ul>\n<hr>\n<h1 id=\"工作经历\"><a href=\"#工作经历\" class=\"headerlink\" title=\"工作经历\"></a>工作经历</h1><h2 id=\"115网盘科技\"><a href=\"#115网盘科技\" class=\"headerlink\" title=\"115网盘科技\"></a>115网盘科技</h2><p>  任职部门: 平台部<br><br>  任职时间：2016年12月 ~ 至今<br><br>  职位名称: 高级研发工程师</p>\n<p><strong>主要职责</strong></p>\n<ul>\n<li><p>搭建数据分析平台</p>\n<ul>\n<li>基于hadoop搭建资源调度系统, 基于spark搭建分布式计算系统;<br></li>\n<li>基于awk过滤和格式化日志, 及HDFS存储格式化数据, 日志来源含纯文本, elasticSearch, 数据库等;<br></li>\n<li>结合spark SQL, 对每天数亿条记录进行各维度分布式统计分析;<br></li>\n<li>结合spark MLib和机器学习算法, 对用户数据进行聚类/分类学习, 构建用户画像;<br></li>\n<li>基于python tornado, echarts及mongoDB构建报表系统;</li>\n</ul>\n</li>\n<li><p>参与微服务开发</p>\n<ul>\n<li>基于GO语言, go-micro框架进行易于部署和可插拔的微服务开发;<br></li>\n<li>基于Docker, 实现consul服务发现的快速部署方案;<br></li>\n<li>完成配置中心，访问统计，文件获取等基础服务组件的开发;</li>\n</ul>\n</li>\n<li><p>存储服务维护</p>\n<ul>\n<li>日常维护百PB量级文件存储服务, 包括数据迁移, 流量监控, 读写监控等;<br></li>\n<li>其他, 如数据修复工作，配合运维处理突发问题;</li>\n</ul>\n</li>\n<li><p>CDN节点加速</p>\n<ul>\n<li>根据视频播放记录, 统计分析各地区热门视频数据;<br></li>\n<li>流量谷值时将热门视频预缓存到自建CDN加速节点中, 以减少回源率, 降低流量峰值。</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"T1000科技-创业团队\"><a href=\"#T1000科技-创业团队\" class=\"headerlink\" title=\"T1000科技(创业团队)\"></a>T1000科技(创业团队)</h2><p>  任职部门: 研发部<br><br>  任职时间：2016年5月 ~ 2016年11月<br><br>  职位名称: 研发主管</p>\n<ul>\n<li>主要职责<br><ul>\n<li>负责智能坐便器系统架构设计, 任务分配以及进度控制;<br></li>\n<li>负责业务后台搭建、业务接口开发: 采用Nginx+python_tornado+Mysql+MongoDB逻辑结构进行构建;<br></li>\n<li>负责消息推送服务的实现: 基于MQTT协议+SSL/TLS安全加密的mosquitto开源框架进行开发，及接入阿里云IoT平台;<br></li>\n<li>负责嵌入式控制系统设计及研发: 基于类BeagleboneBlack开发板+linux C环境, 实现进程间通信及串口通信。</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"猎豹移动科技\"><a href=\"#猎豹移动科技\" class=\"headerlink\" title=\"猎豹移动科技\"></a>猎豹移动科技</h2><p>  任职部门：金山毒霸云后台研发部, 备份大师云后台研发部<br><br>  任职时间：2014年5月 ~ 2016年4月<br><br>  职位名称：服务端开发工程师</p>\n<p><strong>主要职责</strong></p>\n<ul>\n<li><p>备份大师项目, 云后台服务开发</p>\n<ul>\n<li>备份大师业务API: 基于python tornado框架实现业务接口, 通过亚马逊AWS EC2部署服务, 使用AWS RDS/DDB/S3实现数据存取;<br></li>\n<li>备份大师API升级: 基于Golang搭建API服务, 逐步接替tornado框架, 支持千万级用户量的接口访问;<br></li>\n<li>已有业务云数据的迁移: 设计迁移方案, 通过在线/离线方式从AWS 结构化数据库往非结构化数据库迁移，以满足快速增长的数据的高效存取;<br></li>\n<li>备份大师账号系统完善: 优化账号系统模块, 并接入第三方账号Google/Facebook登录功能;<br></li>\n<li>搭建日志收集与统计平台: 每天过滤与统计亿条日志，通过django生成报表。</li>\n</ul>\n</li>\n<li><p>洋葱Live直播项目, 消息系统开发</p>\n<ul>\n<li>设计并搭建直播消息系统: 基于GO+websocket+redis构建消息服务, 单机支持约30w+长连接，并部署上线使用;</li>\n<li>对消息系统进行升级, 实现分布式架构。</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"正点时空科技\"><a href=\"#正点时空科技\" class=\"headerlink\" title=\"正点时空科技\"></a>正点时空科技</h2><p>  任职部门：平台部<br><br>  任职时间：2012年6月 ~ 2014年4月<br><br>  职位名称：数据开发工程师</p>\n<p><strong>主要职责</strong></p>\n<ul>\n<li><p>搭建及维护数据平台</p>\n<ul>\n<li>构建日志统计平台: 基于python+shell+mysql, 对每天约100GB应用日志进行过滤与统计;<br></li>\n<li>搭建Hadoop离线统计平台: 通过搭建hadoop集群和定制MapReduce流程, 实现离线数据分布式统计;<br></li>\n<li>MySQL数据库维护: 包括数据库相关表设计, 冷热数据分离, 数据冗余备份等。</li>\n</ul>\n</li>\n<li><p>客户端应用开发(WP7/Qt)开发</p>\n<ul>\n<li>参与开发WP7/PC端闹钟及日历应用开发 </li>\n</ul>\n</li>\n</ul>\n<hr>\n<h1 id=\"常用技能清单\"><a href=\"#常用技能清单\" class=\"headerlink\" title=\"常用技能清单\"></a>常用技能清单</h1><ul>\n<li>语言：Python / GO / shell(AWK) / C / javascript</li>\n<li>编程环境: Linux, Vim / SublimeText / Atom / CodeBlocks</li>\n<li>操作系统: 熟悉Linux下文件IO / 网络IO / 进程间通信 / 内存管理等</li>\n<li>网络原理: 熟悉TCP/IP协议, HTTP/Websocket/MQTT等网络协议, Raft/Gossip等分布式协议</li>\n<li>编程框架：Python-tornado / python-django / gin / paho-mqtt</li>\n<li>开源架构: Hadoop-hdfs, Hadoop-spark, micro-service</li>\n<li>数据库：熟悉MySQL / redis / dynamoDB / MongoDB</li>\n<li>代码管理：Svn / Git</li>\n<li>文档管理: Markdown / Gitbook / Google-docs / Graphviz</li>\n<li>云开放平台：AWS(亚马逊云) / KS3(金山云) / 阿里云IoT</li>\n<li>物联网: ARM-linux(BBB), C/python, MQTT, TCP/IP, 串口通信</li>\n</ul>\n<hr>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"联系方式\"><a href=\"#联系方式\" class=\"headerlink\" title=\"联系方式\"></a>联系方式</h1><ul>\n<li>手机：134340****</li>\n<li>Email：moxiaomomo@gmail.com</li>\n<li>QQ：809444138</li>\n</ul>\n<hr>\n<h1 id=\"个人信息\"><a href=\"#个人信息\" class=\"headerlink\" title=\"个人信息\"></a>个人信息</h1><ul>\n<li>姓名: moguang</li>\n<li>性别: 男</li>\n<li>出生年月: 1988/08</li>\n<li>教育背景：本科/华南理工大学软件工程</li>\n<li>工作年限：约5年(2012年本科毕业)</li>\n<li>个人博客：<br><br><a href=\"http://blog.moguang.me\" target=\"_blank\" rel=\"external\">http://blog.moguang.me</a><br><br><a href=\"http://blog.csdn.net/moxiaomomo\" target=\"_blank\" rel=\"external\">http://blog.csdn.net/moxiaomomo</a></li>\n</ul>\n<hr>\n<h1 id=\"工作经历\"><a href=\"#工作经历\" class=\"headerlink\" title=\"工作经历\"></a>工作经历</h1><h2 id=\"115网盘科技\"><a href=\"#115网盘科技\" class=\"headerlink\" title=\"115网盘科技\"></a>115网盘科技</h2><p>  任职部门: 平台部<br><br>  任职时间：2016年12月 ~ 至今<br><br>  职位名称: 高级研发工程师</p>\n<p><strong>主要职责</strong></p>\n<ul>\n<li><p>搭建数据分析平台</p>\n<ul>\n<li>基于hadoop搭建资源调度系统, 基于spark搭建分布式计算系统;<br></li>\n<li>基于awk过滤和格式化日志, 及HDFS存储格式化数据, 日志来源含纯文本, elasticSearch, 数据库等;<br></li>\n<li>结合spark SQL, 对每天数亿条记录进行各维度分布式统计分析;<br></li>\n<li>结合spark MLib和机器学习算法, 对用户数据进行聚类/分类学习, 构建用户画像;<br></li>\n<li>基于python tornado, echarts及mongoDB构建报表系统;</li>\n</ul>\n</li>\n<li><p>参与微服务开发</p>\n<ul>\n<li>基于GO语言, go-micro框架进行易于部署和可插拔的微服务开发;<br></li>\n<li>基于Docker, 实现consul服务发现的快速部署方案;<br></li>\n<li>完成配置中心，访问统计，文件获取等基础服务组件的开发;</li>\n</ul>\n</li>\n<li><p>存储服务维护</p>\n<ul>\n<li>日常维护百PB量级文件存储服务, 包括数据迁移, 流量监控, 读写监控等;<br></li>\n<li>其他, 如数据修复工作，配合运维处理突发问题;</li>\n</ul>\n</li>\n<li><p>CDN节点加速</p>\n<ul>\n<li>根据视频播放记录, 统计分析各地区热门视频数据;<br></li>\n<li>流量谷值时将热门视频预缓存到自建CDN加速节点中, 以减少回源率, 降低流量峰值。</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"T1000科技-创业团队\"><a href=\"#T1000科技-创业团队\" class=\"headerlink\" title=\"T1000科技(创业团队)\"></a>T1000科技(创业团队)</h2><p>  任职部门: 研发部<br><br>  任职时间：2016年5月 ~ 2016年11月<br><br>  职位名称: 研发主管</p>\n<ul>\n<li>主要职责<br><ul>\n<li>负责智能坐便器系统架构设计, 任务分配以及进度控制;<br></li>\n<li>负责业务后台搭建、业务接口开发: 采用Nginx+python_tornado+Mysql+MongoDB逻辑结构进行构建;<br></li>\n<li>负责消息推送服务的实现: 基于MQTT协议+SSL/TLS安全加密的mosquitto开源框架进行开发，及接入阿里云IoT平台;<br></li>\n<li>负责嵌入式控制系统设计及研发: 基于类BeagleboneBlack开发板+linux C环境, 实现进程间通信及串口通信。</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"猎豹移动科技\"><a href=\"#猎豹移动科技\" class=\"headerlink\" title=\"猎豹移动科技\"></a>猎豹移动科技</h2><p>  任职部门：金山毒霸云后台研发部, 备份大师云后台研发部<br><br>  任职时间：2014年5月 ~ 2016年4月<br><br>  职位名称：服务端开发工程师</p>\n<p><strong>主要职责</strong></p>\n<ul>\n<li><p>备份大师项目, 云后台服务开发</p>\n<ul>\n<li>备份大师业务API: 基于python tornado框架实现业务接口, 通过亚马逊AWS EC2部署服务, 使用AWS RDS/DDB/S3实现数据存取;<br></li>\n<li>备份大师API升级: 基于Golang搭建API服务, 逐步接替tornado框架, 支持千万级用户量的接口访问;<br></li>\n<li>已有业务云数据的迁移: 设计迁移方案, 通过在线/离线方式从AWS 结构化数据库往非结构化数据库迁移，以满足快速增长的数据的高效存取;<br></li>\n<li>备份大师账号系统完善: 优化账号系统模块, 并接入第三方账号Google/Facebook登录功能;<br></li>\n<li>搭建日志收集与统计平台: 每天过滤与统计亿条日志，通过django生成报表。</li>\n</ul>\n</li>\n<li><p>洋葱Live直播项目, 消息系统开发</p>\n<ul>\n<li>设计并搭建直播消息系统: 基于GO+websocket+redis构建消息服务, 单机支持约30w+长连接，并部署上线使用;</li>\n<li>对消息系统进行升级, 实现分布式架构。</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"正点时空科技\"><a href=\"#正点时空科技\" class=\"headerlink\" title=\"正点时空科技\"></a>正点时空科技</h2><p>  任职部门：平台部<br><br>  任职时间：2012年6月 ~ 2014年4月<br><br>  职位名称：数据开发工程师</p>\n<p><strong>主要职责</strong></p>\n<ul>\n<li><p>搭建及维护数据平台</p>\n<ul>\n<li>构建日志统计平台: 基于python+shell+mysql, 对每天约100GB应用日志进行过滤与统计;<br></li>\n<li>搭建Hadoop离线统计平台: 通过搭建hadoop集群和定制MapReduce流程, 实现离线数据分布式统计;<br></li>\n<li>MySQL数据库维护: 包括数据库相关表设计, 冷热数据分离, 数据冗余备份等。</li>\n</ul>\n</li>\n<li><p>客户端应用开发(WP7/Qt)开发</p>\n<ul>\n<li>参与开发WP7/PC端闹钟及日历应用开发 </li>\n</ul>\n</li>\n</ul>\n<hr>\n<h1 id=\"常用技能清单\"><a href=\"#常用技能清单\" class=\"headerlink\" title=\"常用技能清单\"></a>常用技能清单</h1><ul>\n<li>语言：Python / GO / shell(AWK) / C / javascript</li>\n<li>编程环境: Linux, Vim / SublimeText / Atom / CodeBlocks</li>\n<li>操作系统: 熟悉Linux下文件IO / 网络IO / 进程间通信 / 内存管理等</li>\n<li>网络原理: 熟悉TCP/IP协议, HTTP/Websocket/MQTT等网络协议, Raft/Gossip等分布式协议</li>\n<li>编程框架：Python-tornado / python-django / gin / paho-mqtt</li>\n<li>开源架构: Hadoop-hdfs, Hadoop-spark, micro-service</li>\n<li>数据库：熟悉MySQL / redis / dynamoDB / MongoDB</li>\n<li>代码管理：Svn / Git</li>\n<li>文档管理: Markdown / Gitbook / Google-docs / Graphviz</li>\n<li>云开放平台：AWS(亚马逊云) / KS3(金山云) / 阿里云IoT</li>\n<li>物联网: ARM-linux(BBB), C/python, MQTT, TCP/IP, 串口通信</li>\n</ul>\n<hr>\n"}],"Post":[{"title":"[shell]批量对比两个host上的文件","date":"2017-09-28T11:09:37.000Z","_content":"\n假设有一个数据集群, 每个集群的目录/data/下面有很多子目录, 子目录内包含很多文件; <br>\n每两个节点的/data/目录下所有文件理论上要保持一致(比如fastdfs的两副本模式)。<br>\n\n现在需要快速的对每两台机器上的/data目录下的文件检测是否全部一致, 那么可以怎么做呢?<br>\n一个思路是利用shell实现, 每次将两台机器上的文件全部扫描并排序到一个文件内, 然后拉取到本地上进行对比。<br>\n\n具体示例代码(同时解决了sudo密码验证的问题)如下:\n\n```bash\n#!/bin/bash\n\n# 每行两个要用于对比文件的ip\nipPairs=(\n192.168.1.59 192.168.1.60\n192.168.1.81 192.168.1.86\n192.168.1.82 192.168.1.87\n)\n# ssh用户/ssh端口/sudo密码\nusername=\"yourname\"\nport=\"yourport\"\nsudoPasswd=\"yourpassword\"\n\n# 检查列表长度是否为偶数\nif [[ ${#ipPairs[@]}%2 -eq 1 ]];\nthen\n    echo \"invalid pair in ipPairs.\"\n    exit\nfi\n\nfor((i=0;i<${#ipPairs[@]};i+=2))\ndo\n    ipOne=${ipPairs[$i]}\n    ipTwo=${ipPairs[$i+1]}\n    echo \"ip1:\" $ipOne \"ip2:\" $ipTwo\n\n/usr/bin/expect <<-EOF\n    set timeout 300\n    spawn ssh -t -p $port -l ${username} $ipOne {sudo find /data/ -type f | sort > /tmp/${ipOne}.log}\n    expect {\n        \"(yes/no)? \" { send \"yes\\n\" }\n        \"password for ${username}: \" { send \"${sudoPasswd}\\n\" }\n    }\n\n    spawn ssh -t -p $port -l ${username} $ipTwo {sudo find /data/ -type f | sort > /tmp/${ipTwo}.log}\n    expect {\n        \"(yes/no)? \" { send \"yes\\n\" }\n        \"password for ${username}: \" { send \"${sudoPasswd}\\n\" }\n    }\ninteract\nexpect eof\nEOF\n\n    scp -P $port ${username}@$ipOne:/tmp/${ipOne}.log ${ipOne}.log\n    if [ `ls -l ${ipOne}.log | awk '{ print $5 }'` -lt  1 ]\n    then\n        echo \"${ipOne}.log is empty.\"\n    fi\n    \n    scp -P $port ${username}@$ipTwo:/tmp/${ipTwo}.log ${ipTwo}.log\n    if [ `ls -l ${ipTwo}.log | awk '{ print $5 }'` -lt  1 ]\n    then\n        echo \"${ipTwo}.log is empty.\"\n    fi\n\n    # 对比sha1\n    sha1sum ${ipOne}.log ${ipTwo}.log\n\n    # 查找差集\n    comm -1 -3 ${ipOne}.log ${ipTwo}.log > ${ipTwo}_${ipOne}.log\ndone\n```\n","source":"_posts/shell-compare-files.md","raw":"---\ntitle: '[shell]批量对比两个host上的文件'\ndate: 2017-09-28 19:09:37\ntags: shell\n---\n\n假设有一个数据集群, 每个集群的目录/data/下面有很多子目录, 子目录内包含很多文件; <br>\n每两个节点的/data/目录下所有文件理论上要保持一致(比如fastdfs的两副本模式)。<br>\n\n现在需要快速的对每两台机器上的/data目录下的文件检测是否全部一致, 那么可以怎么做呢?<br>\n一个思路是利用shell实现, 每次将两台机器上的文件全部扫描并排序到一个文件内, 然后拉取到本地上进行对比。<br>\n\n具体示例代码(同时解决了sudo密码验证的问题)如下:\n\n```bash\n#!/bin/bash\n\n# 每行两个要用于对比文件的ip\nipPairs=(\n192.168.1.59 192.168.1.60\n192.168.1.81 192.168.1.86\n192.168.1.82 192.168.1.87\n)\n# ssh用户/ssh端口/sudo密码\nusername=\"yourname\"\nport=\"yourport\"\nsudoPasswd=\"yourpassword\"\n\n# 检查列表长度是否为偶数\nif [[ ${#ipPairs[@]}%2 -eq 1 ]];\nthen\n    echo \"invalid pair in ipPairs.\"\n    exit\nfi\n\nfor((i=0;i<${#ipPairs[@]};i+=2))\ndo\n    ipOne=${ipPairs[$i]}\n    ipTwo=${ipPairs[$i+1]}\n    echo \"ip1:\" $ipOne \"ip2:\" $ipTwo\n\n/usr/bin/expect <<-EOF\n    set timeout 300\n    spawn ssh -t -p $port -l ${username} $ipOne {sudo find /data/ -type f | sort > /tmp/${ipOne}.log}\n    expect {\n        \"(yes/no)? \" { send \"yes\\n\" }\n        \"password for ${username}: \" { send \"${sudoPasswd}\\n\" }\n    }\n\n    spawn ssh -t -p $port -l ${username} $ipTwo {sudo find /data/ -type f | sort > /tmp/${ipTwo}.log}\n    expect {\n        \"(yes/no)? \" { send \"yes\\n\" }\n        \"password for ${username}: \" { send \"${sudoPasswd}\\n\" }\n    }\ninteract\nexpect eof\nEOF\n\n    scp -P $port ${username}@$ipOne:/tmp/${ipOne}.log ${ipOne}.log\n    if [ `ls -l ${ipOne}.log | awk '{ print $5 }'` -lt  1 ]\n    then\n        echo \"${ipOne}.log is empty.\"\n    fi\n    \n    scp -P $port ${username}@$ipTwo:/tmp/${ipTwo}.log ${ipTwo}.log\n    if [ `ls -l ${ipTwo}.log | awk '{ print $5 }'` -lt  1 ]\n    then\n        echo \"${ipTwo}.log is empty.\"\n    fi\n\n    # 对比sha1\n    sha1sum ${ipOne}.log ${ipTwo}.log\n\n    # 查找差集\n    comm -1 -3 ${ipOne}.log ${ipTwo}.log > ${ipTwo}_${ipOne}.log\ndone\n```\n","slug":"shell-compare-files","published":1,"updated":"2017-09-28T11:18:39.431Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj84nany000007v4d02eicogq","content":"<p>假设有一个数据集群, 每个集群的目录/data/下面有很多子目录, 子目录内包含很多文件; <br><br>每两个节点的/data/目录下所有文件理论上要保持一致(比如fastdfs的两副本模式)。<br></p>\n<p>现在需要快速的对每两台机器上的/data目录下的文件检测是否全部一致, 那么可以怎么做呢?<br><br>一个思路是利用shell实现, 每次将两台机器上的文件全部扫描并排序到一个文件内, 然后拉取到本地上进行对比。<br></p>\n<p>具体示例代码(同时解决了sudo密码验证的问题)如下:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#!/bin/bash</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># 每行两个要用于对比文件的ip</span></div><div class=\"line\">ipPairs=(</div><div class=\"line\">192.168.1.59 192.168.1.60</div><div class=\"line\">192.168.1.81 192.168.1.86</div><div class=\"line\">192.168.1.82 192.168.1.87</div><div class=\"line\">)</div><div class=\"line\"><span class=\"comment\"># ssh用户/ssh端口/sudo密码</span></div><div class=\"line\">username=<span class=\"string\">\"yourname\"</span></div><div class=\"line\">port=<span class=\"string\">\"yourport\"</span></div><div class=\"line\">sudoPasswd=<span class=\"string\">\"yourpassword\"</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># 检查列表长度是否为偶数</span></div><div class=\"line\"><span class=\"keyword\">if</span> [[ <span class=\"variable\">$&#123;#ipPairs[@]&#125;</span>%2 -eq 1 ]];</div><div class=\"line\"><span class=\"keyword\">then</span></div><div class=\"line\">    <span class=\"built_in\">echo</span> <span class=\"string\">\"invalid pair in ipPairs.\"</span></div><div class=\"line\">    <span class=\"built_in\">exit</span></div><div class=\"line\"><span class=\"keyword\">fi</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">for</span>((i=0;i&lt;<span class=\"variable\">$&#123;#ipPairs[@]&#125;</span>;i+=2))</div><div class=\"line\"><span class=\"keyword\">do</span></div><div class=\"line\">    ipOne=<span class=\"variable\">$&#123;ipPairs[$i]&#125;</span></div><div class=\"line\">    ipTwo=<span class=\"variable\">$&#123;ipPairs[$i+1]&#125;</span></div><div class=\"line\">    <span class=\"built_in\">echo</span> <span class=\"string\">\"ip1:\"</span> <span class=\"variable\">$ipOne</span> <span class=\"string\">\"ip2:\"</span> <span class=\"variable\">$ipTwo</span></div><div class=\"line\"></div><div class=\"line\">/usr/bin/expect &lt;&lt;-EOF</div><div class=\"line\">    <span class=\"built_in\">set</span> timeout 300</div><div class=\"line\">    spawn ssh -t -p <span class=\"variable\">$port</span> -l <span class=\"variable\">$&#123;username&#125;</span> <span class=\"variable\">$ipOne</span> &#123;sudo find /data/ -<span class=\"built_in\">type</span> f | sort &gt; /tmp/<span class=\"variable\">$&#123;ipOne&#125;</span>.<span class=\"built_in\">log</span>&#125;</div><div class=\"line\">    expect &#123;</div><div class=\"line\">        <span class=\"string\">\"(yes/no)? \"</span> &#123; send <span class=\"string\">\"yes\\n\"</span> &#125;</div><div class=\"line\">        <span class=\"string\">\"password for <span class=\"variable\">$&#123;username&#125;</span>: \"</span> &#123; send <span class=\"string\">\"<span class=\"variable\">$&#123;sudoPasswd&#125;</span>\\n\"</span> &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    spawn ssh -t -p <span class=\"variable\">$port</span> -l <span class=\"variable\">$&#123;username&#125;</span> <span class=\"variable\">$ipTwo</span> &#123;sudo find /data/ -<span class=\"built_in\">type</span> f | sort &gt; /tmp/<span class=\"variable\">$&#123;ipTwo&#125;</span>.<span class=\"built_in\">log</span>&#125;</div><div class=\"line\">    expect &#123;</div><div class=\"line\">        <span class=\"string\">\"(yes/no)? \"</span> &#123; send <span class=\"string\">\"yes\\n\"</span> &#125;</div><div class=\"line\">        <span class=\"string\">\"password for <span class=\"variable\">$&#123;username&#125;</span>: \"</span> &#123; send <span class=\"string\">\"<span class=\"variable\">$&#123;sudoPasswd&#125;</span>\\n\"</span> &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">interact</div><div class=\"line\">expect eof</div><div class=\"line\">EOF</div><div class=\"line\"></div><div class=\"line\">    scp -P <span class=\"variable\">$port</span> <span class=\"variable\">$&#123;username&#125;</span>@<span class=\"variable\">$ipOne</span>:/tmp/<span class=\"variable\">$&#123;ipOne&#125;</span>.<span class=\"built_in\">log</span> <span class=\"variable\">$&#123;ipOne&#125;</span>.<span class=\"built_in\">log</span></div><div class=\"line\">    <span class=\"keyword\">if</span> [ `ls -l <span class=\"variable\">$&#123;ipOne&#125;</span>.<span class=\"built_in\">log</span> | awk <span class=\"string\">'&#123; print $5 &#125;'</span>` -lt  1 ]</div><div class=\"line\">    <span class=\"keyword\">then</span></div><div class=\"line\">        <span class=\"built_in\">echo</span> <span class=\"string\">\"<span class=\"variable\">$&#123;ipOne&#125;</span>.log is empty.\"</span></div><div class=\"line\">    <span class=\"keyword\">fi</span></div><div class=\"line\">    </div><div class=\"line\">    scp -P <span class=\"variable\">$port</span> <span class=\"variable\">$&#123;username&#125;</span>@<span class=\"variable\">$ipTwo</span>:/tmp/<span class=\"variable\">$&#123;ipTwo&#125;</span>.<span class=\"built_in\">log</span> <span class=\"variable\">$&#123;ipTwo&#125;</span>.<span class=\"built_in\">log</span></div><div class=\"line\">    <span class=\"keyword\">if</span> [ `ls -l <span class=\"variable\">$&#123;ipTwo&#125;</span>.<span class=\"built_in\">log</span> | awk <span class=\"string\">'&#123; print $5 &#125;'</span>` -lt  1 ]</div><div class=\"line\">    <span class=\"keyword\">then</span></div><div class=\"line\">        <span class=\"built_in\">echo</span> <span class=\"string\">\"<span class=\"variable\">$&#123;ipTwo&#125;</span>.log is empty.\"</span></div><div class=\"line\">    <span class=\"keyword\">fi</span></div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\"># 对比sha1</span></div><div class=\"line\">    sha1sum <span class=\"variable\">$&#123;ipOne&#125;</span>.<span class=\"built_in\">log</span> <span class=\"variable\">$&#123;ipTwo&#125;</span>.<span class=\"built_in\">log</span></div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\"># 查找差集</span></div><div class=\"line\">    comm -1 -3 <span class=\"variable\">$&#123;ipOne&#125;</span>.<span class=\"built_in\">log</span> <span class=\"variable\">$&#123;ipTwo&#125;</span>.<span class=\"built_in\">log</span> &gt; <span class=\"variable\">$&#123;ipTwo&#125;</span>_<span class=\"variable\">$&#123;ipOne&#125;</span>.<span class=\"built_in\">log</span></div><div class=\"line\"><span class=\"keyword\">done</span></div></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<p>假设有一个数据集群, 每个集群的目录/data/下面有很多子目录, 子目录内包含很多文件; <br><br>每两个节点的/data/目录下所有文件理论上要保持一致(比如fastdfs的两副本模式)。<br></p>\n<p>现在需要快速的对每两台机器上的/data目录下的文件检测是否全部一致, 那么可以怎么做呢?<br><br>一个思路是利用shell实现, 每次将两台机器上的文件全部扫描并排序到一个文件内, 然后拉取到本地上进行对比。<br></p>\n<p>具体示例代码(同时解决了sudo密码验证的问题)如下:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#!/bin/bash</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># 每行两个要用于对比文件的ip</span></div><div class=\"line\">ipPairs=(</div><div class=\"line\">192.168.1.59 192.168.1.60</div><div class=\"line\">192.168.1.81 192.168.1.86</div><div class=\"line\">192.168.1.82 192.168.1.87</div><div class=\"line\">)</div><div class=\"line\"><span class=\"comment\"># ssh用户/ssh端口/sudo密码</span></div><div class=\"line\">username=<span class=\"string\">\"yourname\"</span></div><div class=\"line\">port=<span class=\"string\">\"yourport\"</span></div><div class=\"line\">sudoPasswd=<span class=\"string\">\"yourpassword\"</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># 检查列表长度是否为偶数</span></div><div class=\"line\"><span class=\"keyword\">if</span> [[ <span class=\"variable\">$&#123;#ipPairs[@]&#125;</span>%2 -eq 1 ]];</div><div class=\"line\"><span class=\"keyword\">then</span></div><div class=\"line\">    <span class=\"built_in\">echo</span> <span class=\"string\">\"invalid pair in ipPairs.\"</span></div><div class=\"line\">    <span class=\"built_in\">exit</span></div><div class=\"line\"><span class=\"keyword\">fi</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">for</span>((i=0;i&lt;<span class=\"variable\">$&#123;#ipPairs[@]&#125;</span>;i+=2))</div><div class=\"line\"><span class=\"keyword\">do</span></div><div class=\"line\">    ipOne=<span class=\"variable\">$&#123;ipPairs[$i]&#125;</span></div><div class=\"line\">    ipTwo=<span class=\"variable\">$&#123;ipPairs[$i+1]&#125;</span></div><div class=\"line\">    <span class=\"built_in\">echo</span> <span class=\"string\">\"ip1:\"</span> <span class=\"variable\">$ipOne</span> <span class=\"string\">\"ip2:\"</span> <span class=\"variable\">$ipTwo</span></div><div class=\"line\"></div><div class=\"line\">/usr/bin/expect &lt;&lt;-EOF</div><div class=\"line\">    <span class=\"built_in\">set</span> timeout 300</div><div class=\"line\">    spawn ssh -t -p <span class=\"variable\">$port</span> -l <span class=\"variable\">$&#123;username&#125;</span> <span class=\"variable\">$ipOne</span> &#123;sudo find /data/ -<span class=\"built_in\">type</span> f | sort &gt; /tmp/<span class=\"variable\">$&#123;ipOne&#125;</span>.<span class=\"built_in\">log</span>&#125;</div><div class=\"line\">    expect &#123;</div><div class=\"line\">        <span class=\"string\">\"(yes/no)? \"</span> &#123; send <span class=\"string\">\"yes\\n\"</span> &#125;</div><div class=\"line\">        <span class=\"string\">\"password for <span class=\"variable\">$&#123;username&#125;</span>: \"</span> &#123; send <span class=\"string\">\"<span class=\"variable\">$&#123;sudoPasswd&#125;</span>\\n\"</span> &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    spawn ssh -t -p <span class=\"variable\">$port</span> -l <span class=\"variable\">$&#123;username&#125;</span> <span class=\"variable\">$ipTwo</span> &#123;sudo find /data/ -<span class=\"built_in\">type</span> f | sort &gt; /tmp/<span class=\"variable\">$&#123;ipTwo&#125;</span>.<span class=\"built_in\">log</span>&#125;</div><div class=\"line\">    expect &#123;</div><div class=\"line\">        <span class=\"string\">\"(yes/no)? \"</span> &#123; send <span class=\"string\">\"yes\\n\"</span> &#125;</div><div class=\"line\">        <span class=\"string\">\"password for <span class=\"variable\">$&#123;username&#125;</span>: \"</span> &#123; send <span class=\"string\">\"<span class=\"variable\">$&#123;sudoPasswd&#125;</span>\\n\"</span> &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">interact</div><div class=\"line\">expect eof</div><div class=\"line\">EOF</div><div class=\"line\"></div><div class=\"line\">    scp -P <span class=\"variable\">$port</span> <span class=\"variable\">$&#123;username&#125;</span>@<span class=\"variable\">$ipOne</span>:/tmp/<span class=\"variable\">$&#123;ipOne&#125;</span>.<span class=\"built_in\">log</span> <span class=\"variable\">$&#123;ipOne&#125;</span>.<span class=\"built_in\">log</span></div><div class=\"line\">    <span class=\"keyword\">if</span> [ `ls -l <span class=\"variable\">$&#123;ipOne&#125;</span>.<span class=\"built_in\">log</span> | awk <span class=\"string\">'&#123; print $5 &#125;'</span>` -lt  1 ]</div><div class=\"line\">    <span class=\"keyword\">then</span></div><div class=\"line\">        <span class=\"built_in\">echo</span> <span class=\"string\">\"<span class=\"variable\">$&#123;ipOne&#125;</span>.log is empty.\"</span></div><div class=\"line\">    <span class=\"keyword\">fi</span></div><div class=\"line\">    </div><div class=\"line\">    scp -P <span class=\"variable\">$port</span> <span class=\"variable\">$&#123;username&#125;</span>@<span class=\"variable\">$ipTwo</span>:/tmp/<span class=\"variable\">$&#123;ipTwo&#125;</span>.<span class=\"built_in\">log</span> <span class=\"variable\">$&#123;ipTwo&#125;</span>.<span class=\"built_in\">log</span></div><div class=\"line\">    <span class=\"keyword\">if</span> [ `ls -l <span class=\"variable\">$&#123;ipTwo&#125;</span>.<span class=\"built_in\">log</span> | awk <span class=\"string\">'&#123; print $5 &#125;'</span>` -lt  1 ]</div><div class=\"line\">    <span class=\"keyword\">then</span></div><div class=\"line\">        <span class=\"built_in\">echo</span> <span class=\"string\">\"<span class=\"variable\">$&#123;ipTwo&#125;</span>.log is empty.\"</span></div><div class=\"line\">    <span class=\"keyword\">fi</span></div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\"># 对比sha1</span></div><div class=\"line\">    sha1sum <span class=\"variable\">$&#123;ipOne&#125;</span>.<span class=\"built_in\">log</span> <span class=\"variable\">$&#123;ipTwo&#125;</span>.<span class=\"built_in\">log</span></div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\"># 查找差集</span></div><div class=\"line\">    comm -1 -3 <span class=\"variable\">$&#123;ipOne&#125;</span>.<span class=\"built_in\">log</span> <span class=\"variable\">$&#123;ipTwo&#125;</span>.<span class=\"built_in\">log</span> &gt; <span class=\"variable\">$&#123;ipTwo&#125;</span>_<span class=\"variable\">$&#123;ipOne&#125;</span>.<span class=\"built_in\">log</span></div><div class=\"line\"><span class=\"keyword\">done</span></div></pre></td></tr></table></figure>\n"},{"layout":"consul","title":"基于Docker的Consul(官方镜像)集群部署指南","date":"2017-07-31T03:47:23.000Z","_content":"\n\n### 关于Consul\n\nConsul 是一个支持多数据中心分布式高可用的服务发现和配置共享的服务软件.<br>\nConsul 由 HashiCorp公司用Go语言开发, 基于Mozilla Public License 2.0的协议进行开源. <br>\nConsul 支持健康检查,并允许 HTTP 和 DNS 协议调用 API 存储键值对.<br>\n命令行超级好用的虚拟机管理软件 vgrant 也是 HashiCorp 公司开发的产品.<br>\n一致性协议采用 Raft 算法,用来保证服务的高可用. 使用 GOSSIP 协议管理成员和广播消息, 并且支持 ACL 访问控制.<br>\n\n<!--more-->\n\n### 关于官方consul镜像\n\n关于官方consul镜像，三点说明:\n+ 想对于其他版本镜像，其stars和pull数量是最多的, pull达到10M+;\n+ 官方文档可读性相对不够好, 有些绕;\n+ 目前官方镜像更新进度基本与consul最新版本保持一致。\n\n### 多机部署consul:0.8.5版本操作参考\n\n##### 部分参数说明\n  - ***--net=host*** docker参数, 使得docker容器越过了net namespace的隔离，免去手动指定端口映射的步骤\n  - ***-server*** consul支持以server或client的模式运行, server是服务发现模块的核心, client主要用于转发请求\n  - ***-advertise*** 将本机私有IP传递到consul\n  - ***-bootstrap-expect*** 指定consul将等待几个节点连通，成为一个完整的集群\n  - ***-retry-join*** 指定要加入的consul节点地址，失败会重试, 可多次指定不同的地址\n  - ***-client*** consul绑定在哪个client地址上，这个地址提供HTTP、DNS、RPC等服务，默认是127.0.0.1\n  - ***-bind*** 该地址用来在集群内部的通讯，集群内的所有节点到地址都必须是可达的，默认是0.0.0.0\n  - ***allow_stale*** 设置为true, 表明可以从consul集群的任一server节点获取dns信息, false则表明每次请求都会经过consul server leader\n\n\n##### 集群的多机部署参考\n\n  * 多中心部署结构图\n  \n  <img src=\"/img/consul_archi.png\" width=\"700\" height=\"700\" alt=\"consul部署模式\" align=center/><br>\n  生产环境下, 一般一个宿主host一个consul节点；<br>\n  server节点建议一个数据中心部署3-5个, client节点可部署任意节点。\n\n  * 启动consul server节点, 在对应的机器上root权限下执行以下脚本(需修改节点列表: nodes=(...) ):\n\n```bash\n#!/bin/bash\n\nconf_dir=/opt/consul/conf\nmkdir -p ${conf_dir}\n\nnodes=(\n10.220.16.133\n10.220.16.134\n10.220.16.163\n)\nconsul_ver=0.8.5\nretry_interval=15s\ncontain_svr_name=consul_server\n\nprivIP=$(/sbin/ifconfig eth0 | sed -n 's/.*inet \\(addr:\\)\\?\\([0-9.]\\{7,15\\}\\) .*/\\2/p')\nif [[ !(\"${nodes[@]}\" =~ $privIP) ]];\nthen\n    echo -e \"Current node:${privIP} not in configured server nodes.\\n\"\n    exit\nfi\n\nsvr_runing=$(docker ps -a | grep \"${contain_svr_name}\" | egrep \"Up [About]|[0-9]{1,}\")\nif [[ ${svr_runing} != \"\" ]];\nthen\n    echo -e \"Current container of consul server has been running.\\n\"\n    exit\nelse\n    svr_exists=$(docker ps -a | grep \"${contain_svr_name}\")\n    if [[ ${svr_exists} != \"\" ]];\n    then\n        echo -e \"Now try to start the container as it stopped...\\n\"\n        docker start ${svr_exists}\n        sleep 2\n        docker ps -a grep \"${contain_svr_name}\"\n        exit\n    fi\nfi\n\necho -e \"To start a new container for consul...\\n\"\necho -e \"To initialize configuration...\\n\"\n\nnodels=\"\"\nfor host in ${nodes[*]}\ndo\n    if [[ $nodels != \"\" ]];\n    then\n        nodels=$nodels,\n    fi\n    nodels=$nodels\"\\\"$host\\\"\"\ndone\n\nconfig=\"{\\n\n\\\"datacenter\\\": \\\"dc_dl\\\",\\n\n\\\"retry_join\\\": [${nodels}],\\n\n\\\"retry_interval\\\": \\\"${retry_interval}\\\",\\n\n\\\"rejoin_after_leave\\\": true,\\n\n\\\"start_join\\\": [${nodels}],\\n\n\\\"bootstrap_expect\\\": 1,\\n\n\\\"server\\\": true,\\n\n\\\"ui\\\": true,\\n\n\\\"dns_config\\\": {\\\"allow_stale\\\": true, \\\"max_stale\\\": \\\"5s\\\"},\\n\n\\\"node_name\\\": \\\"$HOSTNAME\\\"\\n\n}\\n\"\n\necho $config\necho -e ${config} > ${conf_dir}/server.json\necho -e ${config}\n\ndocker run -d -v ${conf_dir}:${conf_dir} \\\n    --name ${contain_svr_name} \\\n    --net=host consul:${consul_ver} agent \\\n    -config-dir=${conf_dir} \\\n    -client=0.0.0.0 \\\n    -bind=${privIP} \\\n    -advertise=${privIP}\n\nsleep 2\n\nsvr_runing=$(docker ps -a | grep \"${contain_svr_name}\" | egrep \"Up [About]|[0-9]{1,}\")\nif [[ ${svr_runing} == \"\" ]];\nthen\n    echo -e \"\\nError: docker-consul failed to start...\\n\"\n    exit\nfi\necho -e \"\\nOK: docker-consul has started as background server.\\n\"\n```\n\n  * 启动consul client节点(任意数量或不部署), 在需要部署的机器上执行(需修改svrnodes列表):\n\n```bash\n#!/bin/bash\n\nconf_dir=/opt/consul/conf\nmkdir -p ${conf_dir}\n\nsvrnodes=(\n10.220.16.133\n10.220.16.134\n10.220.16.163\n)\nprivIP=$(/sbin/ifconfig eth0 | sed -n 's/.*inet \\(addr:\\)\\?\\([0-9.]\\{7,15\\}\\) .*/\\2/p')\nconsul_ver=0.8.5\nretry_interval=15s\ncontain_cli_name=consul_client\n\nif [[ \"${svrnodes[@]}\" =~ $privIP ]];\nthen\n    echo -e \"Current node:${privIP} is configured for server consul, not to run client mode.\\n\"\n    exit\nfi\n\nsvr_runing=$(docker ps -a | grep \"${contain_cli_name}\" | egrep \"Up [About]|[0-9]{1,}\")\nif [[ ${svr_runing} != \"\" ]];\nthen\n    echo -e \"Current container of consul client has been running.\\n\"\n    exit\nelse\n    svr_exists=$(docker ps -a | grep \"${contain_cli_name}\")\n    if [[ ${svr_exists} != \"\" ]];\n    then\n        echo -e \"Now try to start the container as it stopped...\\n\"\n        docker start ${svr_exists}\n        sleep 2\n        docker ps -a grep \"${contain_cli_name}\"\n        exit\n    fi\nfi\n\necho -e \"To start a new container for consul...\\n\"\necho -e \"To initialize configuration...\\n\"\n\nnodels=\"\"\nfor host in ${svrnodes[*]}\ndo\n    if [[ $nodels != \"\" ]];\n    then\n        nodels=$nodels,\n    fi\n    nodels=$nodels\"\\\"$host\\\"\"\ndone\n\nconfig=\"{\\n\n\\\"retry_join\\\": [${nodels}],\\n\n\\\"retry_interval\\\": \\\"${retry_interval}\\\",\\n\n\\\"rejoin_after_leave\\\": true,\\n\n\\\"start_join\\\": [${nodels}],\\n\n\\\"server\\\": false,\\n\n\\\"ui\\\": true,\\n\n\\\"node_name\\\": \\\"$HOSTNAME\\\"\\n\n}\\n\"\n\necho $config\necho -e ${config} > ${conf_dir}/client.json\necho -e ${config}\n\ndocker run -d -v ${conf_dir}:${conf_dir} \\\n    --name ${contain_cli_name} \\\n    --net=host consul:${consul_ver} agent \\\n    -config-dir=${conf_dir} \\\n    -client=0.0.0.0 \\\n    -advertise=${privIP}\n\nsleep 2\n\nsvr_runing=$(docker ps -a | grep \"${contain_cli_name}\" | egrep \"Up [About]|[0-9]{1,}\")\nif [[ ${svr_runing} == \"\" ]];\nthen\n    echo -e \"\\nError: docker-consul client node failed to start...\\n\"\n    exit\nfi\necho -e \"\\nOK: docker-consul has started as a client node.\\n\"\n```\n\n  * 检查集群的状态\n\n    通过webUI地址: ***http://<其中一个节点ip>:8500/ui/***可查看集群状态，正常情况下会显示***3 passing***。<br>\n    通过docker命令行:<br>\n\n```bash\nroot@hadoop:~# docker exec -it consul_server consul members\nNode                          Address             Status  Type    Build  Protocol  DC\nhadoop.slave01.fs.115cdn.net  10.220.16.133:8301  alive   server  0.8.5  2         dc1\nhadoop.slave02.fs.115cdn.net  10.220.16.134:8301  alive   server  0.8.5  2         dc1\nhadoop.slave03.fs.115cdn.net  10.220.16.163:8301  alive   server  0.8.5  2         dc1\nhadoop.slave04.fs.115cdn.net  10.220.16.125:8301  alive   client  0.8.5  2         dc1\n```\n","source":"_posts/基于Docker的Consul-官方镜像-集群部署指南.md","raw":"---\nlayout: consul\ntitle: 基于Docker的Consul(官方镜像)集群部署指南\ndate: 2017-07-31 11:47:23\ntags: consul\n---\n\n\n### 关于Consul\n\nConsul 是一个支持多数据中心分布式高可用的服务发现和配置共享的服务软件.<br>\nConsul 由 HashiCorp公司用Go语言开发, 基于Mozilla Public License 2.0的协议进行开源. <br>\nConsul 支持健康检查,并允许 HTTP 和 DNS 协议调用 API 存储键值对.<br>\n命令行超级好用的虚拟机管理软件 vgrant 也是 HashiCorp 公司开发的产品.<br>\n一致性协议采用 Raft 算法,用来保证服务的高可用. 使用 GOSSIP 协议管理成员和广播消息, 并且支持 ACL 访问控制.<br>\n\n<!--more-->\n\n### 关于官方consul镜像\n\n关于官方consul镜像，三点说明:\n+ 想对于其他版本镜像，其stars和pull数量是最多的, pull达到10M+;\n+ 官方文档可读性相对不够好, 有些绕;\n+ 目前官方镜像更新进度基本与consul最新版本保持一致。\n\n### 多机部署consul:0.8.5版本操作参考\n\n##### 部分参数说明\n  - ***--net=host*** docker参数, 使得docker容器越过了net namespace的隔离，免去手动指定端口映射的步骤\n  - ***-server*** consul支持以server或client的模式运行, server是服务发现模块的核心, client主要用于转发请求\n  - ***-advertise*** 将本机私有IP传递到consul\n  - ***-bootstrap-expect*** 指定consul将等待几个节点连通，成为一个完整的集群\n  - ***-retry-join*** 指定要加入的consul节点地址，失败会重试, 可多次指定不同的地址\n  - ***-client*** consul绑定在哪个client地址上，这个地址提供HTTP、DNS、RPC等服务，默认是127.0.0.1\n  - ***-bind*** 该地址用来在集群内部的通讯，集群内的所有节点到地址都必须是可达的，默认是0.0.0.0\n  - ***allow_stale*** 设置为true, 表明可以从consul集群的任一server节点获取dns信息, false则表明每次请求都会经过consul server leader\n\n\n##### 集群的多机部署参考\n\n  * 多中心部署结构图\n  \n  <img src=\"/img/consul_archi.png\" width=\"700\" height=\"700\" alt=\"consul部署模式\" align=center/><br>\n  生产环境下, 一般一个宿主host一个consul节点；<br>\n  server节点建议一个数据中心部署3-5个, client节点可部署任意节点。\n\n  * 启动consul server节点, 在对应的机器上root权限下执行以下脚本(需修改节点列表: nodes=(...) ):\n\n```bash\n#!/bin/bash\n\nconf_dir=/opt/consul/conf\nmkdir -p ${conf_dir}\n\nnodes=(\n10.220.16.133\n10.220.16.134\n10.220.16.163\n)\nconsul_ver=0.8.5\nretry_interval=15s\ncontain_svr_name=consul_server\n\nprivIP=$(/sbin/ifconfig eth0 | sed -n 's/.*inet \\(addr:\\)\\?\\([0-9.]\\{7,15\\}\\) .*/\\2/p')\nif [[ !(\"${nodes[@]}\" =~ $privIP) ]];\nthen\n    echo -e \"Current node:${privIP} not in configured server nodes.\\n\"\n    exit\nfi\n\nsvr_runing=$(docker ps -a | grep \"${contain_svr_name}\" | egrep \"Up [About]|[0-9]{1,}\")\nif [[ ${svr_runing} != \"\" ]];\nthen\n    echo -e \"Current container of consul server has been running.\\n\"\n    exit\nelse\n    svr_exists=$(docker ps -a | grep \"${contain_svr_name}\")\n    if [[ ${svr_exists} != \"\" ]];\n    then\n        echo -e \"Now try to start the container as it stopped...\\n\"\n        docker start ${svr_exists}\n        sleep 2\n        docker ps -a grep \"${contain_svr_name}\"\n        exit\n    fi\nfi\n\necho -e \"To start a new container for consul...\\n\"\necho -e \"To initialize configuration...\\n\"\n\nnodels=\"\"\nfor host in ${nodes[*]}\ndo\n    if [[ $nodels != \"\" ]];\n    then\n        nodels=$nodels,\n    fi\n    nodels=$nodels\"\\\"$host\\\"\"\ndone\n\nconfig=\"{\\n\n\\\"datacenter\\\": \\\"dc_dl\\\",\\n\n\\\"retry_join\\\": [${nodels}],\\n\n\\\"retry_interval\\\": \\\"${retry_interval}\\\",\\n\n\\\"rejoin_after_leave\\\": true,\\n\n\\\"start_join\\\": [${nodels}],\\n\n\\\"bootstrap_expect\\\": 1,\\n\n\\\"server\\\": true,\\n\n\\\"ui\\\": true,\\n\n\\\"dns_config\\\": {\\\"allow_stale\\\": true, \\\"max_stale\\\": \\\"5s\\\"},\\n\n\\\"node_name\\\": \\\"$HOSTNAME\\\"\\n\n}\\n\"\n\necho $config\necho -e ${config} > ${conf_dir}/server.json\necho -e ${config}\n\ndocker run -d -v ${conf_dir}:${conf_dir} \\\n    --name ${contain_svr_name} \\\n    --net=host consul:${consul_ver} agent \\\n    -config-dir=${conf_dir} \\\n    -client=0.0.0.0 \\\n    -bind=${privIP} \\\n    -advertise=${privIP}\n\nsleep 2\n\nsvr_runing=$(docker ps -a | grep \"${contain_svr_name}\" | egrep \"Up [About]|[0-9]{1,}\")\nif [[ ${svr_runing} == \"\" ]];\nthen\n    echo -e \"\\nError: docker-consul failed to start...\\n\"\n    exit\nfi\necho -e \"\\nOK: docker-consul has started as background server.\\n\"\n```\n\n  * 启动consul client节点(任意数量或不部署), 在需要部署的机器上执行(需修改svrnodes列表):\n\n```bash\n#!/bin/bash\n\nconf_dir=/opt/consul/conf\nmkdir -p ${conf_dir}\n\nsvrnodes=(\n10.220.16.133\n10.220.16.134\n10.220.16.163\n)\nprivIP=$(/sbin/ifconfig eth0 | sed -n 's/.*inet \\(addr:\\)\\?\\([0-9.]\\{7,15\\}\\) .*/\\2/p')\nconsul_ver=0.8.5\nretry_interval=15s\ncontain_cli_name=consul_client\n\nif [[ \"${svrnodes[@]}\" =~ $privIP ]];\nthen\n    echo -e \"Current node:${privIP} is configured for server consul, not to run client mode.\\n\"\n    exit\nfi\n\nsvr_runing=$(docker ps -a | grep \"${contain_cli_name}\" | egrep \"Up [About]|[0-9]{1,}\")\nif [[ ${svr_runing} != \"\" ]];\nthen\n    echo -e \"Current container of consul client has been running.\\n\"\n    exit\nelse\n    svr_exists=$(docker ps -a | grep \"${contain_cli_name}\")\n    if [[ ${svr_exists} != \"\" ]];\n    then\n        echo -e \"Now try to start the container as it stopped...\\n\"\n        docker start ${svr_exists}\n        sleep 2\n        docker ps -a grep \"${contain_cli_name}\"\n        exit\n    fi\nfi\n\necho -e \"To start a new container for consul...\\n\"\necho -e \"To initialize configuration...\\n\"\n\nnodels=\"\"\nfor host in ${svrnodes[*]}\ndo\n    if [[ $nodels != \"\" ]];\n    then\n        nodels=$nodels,\n    fi\n    nodels=$nodels\"\\\"$host\\\"\"\ndone\n\nconfig=\"{\\n\n\\\"retry_join\\\": [${nodels}],\\n\n\\\"retry_interval\\\": \\\"${retry_interval}\\\",\\n\n\\\"rejoin_after_leave\\\": true,\\n\n\\\"start_join\\\": [${nodels}],\\n\n\\\"server\\\": false,\\n\n\\\"ui\\\": true,\\n\n\\\"node_name\\\": \\\"$HOSTNAME\\\"\\n\n}\\n\"\n\necho $config\necho -e ${config} > ${conf_dir}/client.json\necho -e ${config}\n\ndocker run -d -v ${conf_dir}:${conf_dir} \\\n    --name ${contain_cli_name} \\\n    --net=host consul:${consul_ver} agent \\\n    -config-dir=${conf_dir} \\\n    -client=0.0.0.0 \\\n    -advertise=${privIP}\n\nsleep 2\n\nsvr_runing=$(docker ps -a | grep \"${contain_cli_name}\" | egrep \"Up [About]|[0-9]{1,}\")\nif [[ ${svr_runing} == \"\" ]];\nthen\n    echo -e \"\\nError: docker-consul client node failed to start...\\n\"\n    exit\nfi\necho -e \"\\nOK: docker-consul has started as a client node.\\n\"\n```\n\n  * 检查集群的状态\n\n    通过webUI地址: ***http://<其中一个节点ip>:8500/ui/***可查看集群状态，正常情况下会显示***3 passing***。<br>\n    通过docker命令行:<br>\n\n```bash\nroot@hadoop:~# docker exec -it consul_server consul members\nNode                          Address             Status  Type    Build  Protocol  DC\nhadoop.slave01.fs.115cdn.net  10.220.16.133:8301  alive   server  0.8.5  2         dc1\nhadoop.slave02.fs.115cdn.net  10.220.16.134:8301  alive   server  0.8.5  2         dc1\nhadoop.slave03.fs.115cdn.net  10.220.16.163:8301  alive   server  0.8.5  2         dc1\nhadoop.slave04.fs.115cdn.net  10.220.16.125:8301  alive   client  0.8.5  2         dc1\n```\n","slug":"基于Docker的Consul-官方镜像-集群部署指南","published":1,"updated":"2017-08-07T02:13:38.394Z","comments":1,"photos":[],"link":"","_id":"cj84nanyq00027v4dyawta7rq","content":"<h3 id=\"关于Consul\"><a href=\"#关于Consul\" class=\"headerlink\" title=\"关于Consul\"></a>关于Consul</h3><p>Consul 是一个支持多数据中心分布式高可用的服务发现和配置共享的服务软件.<br><br>Consul 由 HashiCorp公司用Go语言开发, 基于Mozilla Public License 2.0的协议进行开源. <br><br>Consul 支持健康检查,并允许 HTTP 和 DNS 协议调用 API 存储键值对.<br><br>命令行超级好用的虚拟机管理软件 vgrant 也是 HashiCorp 公司开发的产品.<br><br>一致性协议采用 Raft 算法,用来保证服务的高可用. 使用 GOSSIP 协议管理成员和广播消息, 并且支持 ACL 访问控制.<br></p>\n<a id=\"more\"></a>\n<h3 id=\"关于官方consul镜像\"><a href=\"#关于官方consul镜像\" class=\"headerlink\" title=\"关于官方consul镜像\"></a>关于官方consul镜像</h3><p>关于官方consul镜像，三点说明:</p>\n<ul>\n<li>想对于其他版本镜像，其stars和pull数量是最多的, pull达到10M+;</li>\n<li>官方文档可读性相对不够好, 有些绕;</li>\n<li>目前官方镜像更新进度基本与consul最新版本保持一致。</li>\n</ul>\n<h3 id=\"多机部署consul-0-8-5版本操作参考\"><a href=\"#多机部署consul-0-8-5版本操作参考\" class=\"headerlink\" title=\"多机部署consul:0.8.5版本操作参考\"></a>多机部署consul:0.8.5版本操作参考</h3><h5 id=\"部分参数说明\"><a href=\"#部分参数说明\" class=\"headerlink\" title=\"部分参数说明\"></a>部分参数说明</h5><ul>\n<li><strong><em>–net=host</em></strong> docker参数, 使得docker容器越过了net namespace的隔离，免去手动指定端口映射的步骤</li>\n<li><strong><em>-server</em></strong> consul支持以server或client的模式运行, server是服务发现模块的核心, client主要用于转发请求</li>\n<li><strong><em>-advertise</em></strong> 将本机私有IP传递到consul</li>\n<li><strong><em>-bootstrap-expect</em></strong> 指定consul将等待几个节点连通，成为一个完整的集群</li>\n<li><strong><em>-retry-join</em></strong> 指定要加入的consul节点地址，失败会重试, 可多次指定不同的地址</li>\n<li><strong><em>-client</em></strong> consul绑定在哪个client地址上，这个地址提供HTTP、DNS、RPC等服务，默认是127.0.0.1</li>\n<li><strong><em>-bind</em></strong> 该地址用来在集群内部的通讯，集群内的所有节点到地址都必须是可达的，默认是0.0.0.0</li>\n<li><strong><em>allow_stale</em></strong> 设置为true, 表明可以从consul集群的任一server节点获取dns信息, false则表明每次请求都会经过consul server leader</li>\n</ul>\n<h5 id=\"集群的多机部署参考\"><a href=\"#集群的多机部署参考\" class=\"headerlink\" title=\"集群的多机部署参考\"></a>集群的多机部署参考</h5><ul>\n<li><p>多中心部署结构图</p>\n<p><img src=\"/img/consul_archi.png\" width=\"700\" height=\"700\" alt=\"consul部署模式\" align=\"center/\"><br><br>生产环境下, 一般一个宿主host一个consul节点；<br><br>server节点建议一个数据中心部署3-5个, client节点可部署任意节点。</p>\n</li>\n<li><p>启动consul server节点, 在对应的机器上root权限下执行以下脚本(需修改节点列表: nodes=(…) ):</p>\n</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#!/bin/bash</span></div><div class=\"line\"></div><div class=\"line\">conf_dir=/opt/consul/conf</div><div class=\"line\">mkdir -p <span class=\"variable\">$&#123;conf_dir&#125;</span></div><div class=\"line\"></div><div class=\"line\">nodes=(</div><div class=\"line\">10.220.16.133</div><div class=\"line\">10.220.16.134</div><div class=\"line\">10.220.16.163</div><div class=\"line\">)</div><div class=\"line\">consul_ver=0.8.5</div><div class=\"line\">retry_interval=15s</div><div class=\"line\">contain_svr_name=consul_server</div><div class=\"line\"></div><div class=\"line\">privIP=$(/sbin/ifconfig eth0 | sed -n <span class=\"string\">'s/.*inet \\(addr:\\)\\?\\([0-9.]\\&#123;7,15\\&#125;\\) .*/\\2/p'</span>)</div><div class=\"line\"><span class=\"keyword\">if</span> [[ !(<span class=\"string\">\"<span class=\"variable\">$&#123;nodes[@]&#125;</span>\"</span> =~ <span class=\"variable\">$privIP</span>) ]];</div><div class=\"line\"><span class=\"keyword\">then</span></div><div class=\"line\">    <span class=\"built_in\">echo</span> -e <span class=\"string\">\"Current node:<span class=\"variable\">$&#123;privIP&#125;</span> not in configured server nodes.\\n\"</span></div><div class=\"line\">    <span class=\"built_in\">exit</span></div><div class=\"line\"><span class=\"keyword\">fi</span></div><div class=\"line\"></div><div class=\"line\">svr_runing=$(docker ps -a | grep <span class=\"string\">\"<span class=\"variable\">$&#123;contain_svr_name&#125;</span>\"</span> | egrep <span class=\"string\">\"Up [About]|[0-9]&#123;1,&#125;\"</span>)</div><div class=\"line\"><span class=\"keyword\">if</span> [[ <span class=\"variable\">$&#123;svr_runing&#125;</span> != <span class=\"string\">\"\"</span> ]];</div><div class=\"line\"><span class=\"keyword\">then</span></div><div class=\"line\">    <span class=\"built_in\">echo</span> -e <span class=\"string\">\"Current container of consul server has been running.\\n\"</span></div><div class=\"line\">    <span class=\"built_in\">exit</span></div><div class=\"line\"><span class=\"keyword\">else</span></div><div class=\"line\">    svr_exists=$(docker ps -a | grep <span class=\"string\">\"<span class=\"variable\">$&#123;contain_svr_name&#125;</span>\"</span>)</div><div class=\"line\">    <span class=\"keyword\">if</span> [[ <span class=\"variable\">$&#123;svr_exists&#125;</span> != <span class=\"string\">\"\"</span> ]];</div><div class=\"line\">    <span class=\"keyword\">then</span></div><div class=\"line\">        <span class=\"built_in\">echo</span> -e <span class=\"string\">\"Now try to start the container as it stopped...\\n\"</span></div><div class=\"line\">        docker start <span class=\"variable\">$&#123;svr_exists&#125;</span></div><div class=\"line\">        sleep 2</div><div class=\"line\">        docker ps -a grep <span class=\"string\">\"<span class=\"variable\">$&#123;contain_svr_name&#125;</span>\"</span></div><div class=\"line\">        <span class=\"built_in\">exit</span></div><div class=\"line\">    <span class=\"keyword\">fi</span></div><div class=\"line\"><span class=\"keyword\">fi</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">echo</span> -e <span class=\"string\">\"To start a new container for consul...\\n\"</span></div><div class=\"line\"><span class=\"built_in\">echo</span> -e <span class=\"string\">\"To initialize configuration...\\n\"</span></div><div class=\"line\"></div><div class=\"line\">nodels=<span class=\"string\">\"\"</span></div><div class=\"line\"><span class=\"keyword\">for</span> host <span class=\"keyword\">in</span> <span class=\"variable\">$&#123;nodes[*]&#125;</span></div><div class=\"line\"><span class=\"keyword\">do</span></div><div class=\"line\">    <span class=\"keyword\">if</span> [[ <span class=\"variable\">$nodels</span> != <span class=\"string\">\"\"</span> ]];</div><div class=\"line\">    <span class=\"keyword\">then</span></div><div class=\"line\">        nodels=<span class=\"variable\">$nodels</span>,</div><div class=\"line\">    <span class=\"keyword\">fi</span></div><div class=\"line\">    nodels=<span class=\"variable\">$nodels</span><span class=\"string\">\"\\\"<span class=\"variable\">$host</span>\\\"\"</span></div><div class=\"line\"><span class=\"keyword\">done</span></div><div class=\"line\"></div><div class=\"line\">config=<span class=\"string\">\"&#123;\\n</span></div><div class=\"line\">\\\"datacenter\\\": \\\"dc_dl\\\",\\n</div><div class=\"line\">\\\"retry_join\\\": [<span class=\"variable\">$&#123;nodels&#125;</span>],\\n</div><div class=\"line\">\\\"retry_interval\\\": \\\"<span class=\"variable\">$&#123;retry_interval&#125;</span>\\\",\\n</div><div class=\"line\">\\\"rejoin_after_leave\\\": true,\\n</div><div class=\"line\">\\\"start_join\\\": [<span class=\"variable\">$&#123;nodels&#125;</span>],\\n</div><div class=\"line\">\\\"bootstrap_expect\\\": 1,\\n</div><div class=\"line\">\\\"server\\\": true,\\n</div><div class=\"line\">\\\"ui\\\": true,\\n</div><div class=\"line\">\\\"dns_config\\\": &#123;\\\"allow_stale\\\": true, \\\"max_stale\\\": \\\"5s\\\"&#125;,\\n</div><div class=\"line\">\\\"node_name\\\": \\\"<span class=\"variable\">$HOSTNAME</span>\\\"\\n</div><div class=\"line\">&#125;\\n\"</div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">echo</span> <span class=\"variable\">$config</span></div><div class=\"line\"><span class=\"built_in\">echo</span> -e <span class=\"variable\">$&#123;config&#125;</span> &gt; <span class=\"variable\">$&#123;conf_dir&#125;</span>/server.json</div><div class=\"line\"><span class=\"built_in\">echo</span> -e <span class=\"variable\">$&#123;config&#125;</span></div><div class=\"line\"></div><div class=\"line\">docker run -d -v <span class=\"variable\">$&#123;conf_dir&#125;</span>:<span class=\"variable\">$&#123;conf_dir&#125;</span> \\</div><div class=\"line\">    --name <span class=\"variable\">$&#123;contain_svr_name&#125;</span> \\</div><div class=\"line\">    --net=host consul:<span class=\"variable\">$&#123;consul_ver&#125;</span> agent \\</div><div class=\"line\">    -config-dir=<span class=\"variable\">$&#123;conf_dir&#125;</span> \\</div><div class=\"line\">    -client=0.0.0.0 \\</div><div class=\"line\">    -<span class=\"built_in\">bind</span>=<span class=\"variable\">$&#123;privIP&#125;</span> \\</div><div class=\"line\">    -advertise=<span class=\"variable\">$&#123;privIP&#125;</span></div><div class=\"line\"></div><div class=\"line\">sleep 2</div><div class=\"line\"></div><div class=\"line\">svr_runing=$(docker ps -a | grep <span class=\"string\">\"<span class=\"variable\">$&#123;contain_svr_name&#125;</span>\"</span> | egrep <span class=\"string\">\"Up [About]|[0-9]&#123;1,&#125;\"</span>)</div><div class=\"line\"><span class=\"keyword\">if</span> [[ <span class=\"variable\">$&#123;svr_runing&#125;</span> == <span class=\"string\">\"\"</span> ]];</div><div class=\"line\"><span class=\"keyword\">then</span></div><div class=\"line\">    <span class=\"built_in\">echo</span> -e <span class=\"string\">\"\\nError: docker-consul failed to start...\\n\"</span></div><div class=\"line\">    <span class=\"built_in\">exit</span></div><div class=\"line\"><span class=\"keyword\">fi</span></div><div class=\"line\"><span class=\"built_in\">echo</span> -e <span class=\"string\">\"\\nOK: docker-consul has started as background server.\\n\"</span></div></pre></td></tr></table></figure>\n<ul>\n<li>启动consul client节点(任意数量或不部署), 在需要部署的机器上执行(需修改svrnodes列表):</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#!/bin/bash</span></div><div class=\"line\"></div><div class=\"line\">conf_dir=/opt/consul/conf</div><div class=\"line\">mkdir -p <span class=\"variable\">$&#123;conf_dir&#125;</span></div><div class=\"line\"></div><div class=\"line\">svrnodes=(</div><div class=\"line\">10.220.16.133</div><div class=\"line\">10.220.16.134</div><div class=\"line\">10.220.16.163</div><div class=\"line\">)</div><div class=\"line\">privIP=$(/sbin/ifconfig eth0 | sed -n <span class=\"string\">'s/.*inet \\(addr:\\)\\?\\([0-9.]\\&#123;7,15\\&#125;\\) .*/\\2/p'</span>)</div><div class=\"line\">consul_ver=0.8.5</div><div class=\"line\">retry_interval=15s</div><div class=\"line\">contain_cli_name=consul_client</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">if</span> [[ <span class=\"string\">\"<span class=\"variable\">$&#123;svrnodes[@]&#125;</span>\"</span> =~ <span class=\"variable\">$privIP</span> ]];</div><div class=\"line\"><span class=\"keyword\">then</span></div><div class=\"line\">    <span class=\"built_in\">echo</span> -e <span class=\"string\">\"Current node:<span class=\"variable\">$&#123;privIP&#125;</span> is configured for server consul, not to run client mode.\\n\"</span></div><div class=\"line\">    <span class=\"built_in\">exit</span></div><div class=\"line\"><span class=\"keyword\">fi</span></div><div class=\"line\"></div><div class=\"line\">svr_runing=$(docker ps -a | grep <span class=\"string\">\"<span class=\"variable\">$&#123;contain_cli_name&#125;</span>\"</span> | egrep <span class=\"string\">\"Up [About]|[0-9]&#123;1,&#125;\"</span>)</div><div class=\"line\"><span class=\"keyword\">if</span> [[ <span class=\"variable\">$&#123;svr_runing&#125;</span> != <span class=\"string\">\"\"</span> ]];</div><div class=\"line\"><span class=\"keyword\">then</span></div><div class=\"line\">    <span class=\"built_in\">echo</span> -e <span class=\"string\">\"Current container of consul client has been running.\\n\"</span></div><div class=\"line\">    <span class=\"built_in\">exit</span></div><div class=\"line\"><span class=\"keyword\">else</span></div><div class=\"line\">    svr_exists=$(docker ps -a | grep <span class=\"string\">\"<span class=\"variable\">$&#123;contain_cli_name&#125;</span>\"</span>)</div><div class=\"line\">    <span class=\"keyword\">if</span> [[ <span class=\"variable\">$&#123;svr_exists&#125;</span> != <span class=\"string\">\"\"</span> ]];</div><div class=\"line\">    <span class=\"keyword\">then</span></div><div class=\"line\">        <span class=\"built_in\">echo</span> -e <span class=\"string\">\"Now try to start the container as it stopped...\\n\"</span></div><div class=\"line\">        docker start <span class=\"variable\">$&#123;svr_exists&#125;</span></div><div class=\"line\">        sleep 2</div><div class=\"line\">        docker ps -a grep <span class=\"string\">\"<span class=\"variable\">$&#123;contain_cli_name&#125;</span>\"</span></div><div class=\"line\">        <span class=\"built_in\">exit</span></div><div class=\"line\">    <span class=\"keyword\">fi</span></div><div class=\"line\"><span class=\"keyword\">fi</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">echo</span> -e <span class=\"string\">\"To start a new container for consul...\\n\"</span></div><div class=\"line\"><span class=\"built_in\">echo</span> -e <span class=\"string\">\"To initialize configuration...\\n\"</span></div><div class=\"line\"></div><div class=\"line\">nodels=<span class=\"string\">\"\"</span></div><div class=\"line\"><span class=\"keyword\">for</span> host <span class=\"keyword\">in</span> <span class=\"variable\">$&#123;svrnodes[*]&#125;</span></div><div class=\"line\"><span class=\"keyword\">do</span></div><div class=\"line\">    <span class=\"keyword\">if</span> [[ <span class=\"variable\">$nodels</span> != <span class=\"string\">\"\"</span> ]];</div><div class=\"line\">    <span class=\"keyword\">then</span></div><div class=\"line\">        nodels=<span class=\"variable\">$nodels</span>,</div><div class=\"line\">    <span class=\"keyword\">fi</span></div><div class=\"line\">    nodels=<span class=\"variable\">$nodels</span><span class=\"string\">\"\\\"<span class=\"variable\">$host</span>\\\"\"</span></div><div class=\"line\"><span class=\"keyword\">done</span></div><div class=\"line\"></div><div class=\"line\">config=<span class=\"string\">\"&#123;\\n</span></div><div class=\"line\">\\\"retry_join\\\": [<span class=\"variable\">$&#123;nodels&#125;</span>],\\n</div><div class=\"line\">\\\"retry_interval\\\": \\\"<span class=\"variable\">$&#123;retry_interval&#125;</span>\\\",\\n</div><div class=\"line\">\\\"rejoin_after_leave\\\": true,\\n</div><div class=\"line\">\\\"start_join\\\": [<span class=\"variable\">$&#123;nodels&#125;</span>],\\n</div><div class=\"line\">\\\"server\\\": false,\\n</div><div class=\"line\">\\\"ui\\\": true,\\n</div><div class=\"line\">\\\"node_name\\\": \\\"<span class=\"variable\">$HOSTNAME</span>\\\"\\n</div><div class=\"line\">&#125;\\n\"</div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">echo</span> <span class=\"variable\">$config</span></div><div class=\"line\"><span class=\"built_in\">echo</span> -e <span class=\"variable\">$&#123;config&#125;</span> &gt; <span class=\"variable\">$&#123;conf_dir&#125;</span>/client.json</div><div class=\"line\"><span class=\"built_in\">echo</span> -e <span class=\"variable\">$&#123;config&#125;</span></div><div class=\"line\"></div><div class=\"line\">docker run -d -v <span class=\"variable\">$&#123;conf_dir&#125;</span>:<span class=\"variable\">$&#123;conf_dir&#125;</span> \\</div><div class=\"line\">    --name <span class=\"variable\">$&#123;contain_cli_name&#125;</span> \\</div><div class=\"line\">    --net=host consul:<span class=\"variable\">$&#123;consul_ver&#125;</span> agent \\</div><div class=\"line\">    -config-dir=<span class=\"variable\">$&#123;conf_dir&#125;</span> \\</div><div class=\"line\">    -client=0.0.0.0 \\</div><div class=\"line\">    -advertise=<span class=\"variable\">$&#123;privIP&#125;</span></div><div class=\"line\"></div><div class=\"line\">sleep 2</div><div class=\"line\"></div><div class=\"line\">svr_runing=$(docker ps -a | grep <span class=\"string\">\"<span class=\"variable\">$&#123;contain_cli_name&#125;</span>\"</span> | egrep <span class=\"string\">\"Up [About]|[0-9]&#123;1,&#125;\"</span>)</div><div class=\"line\"><span class=\"keyword\">if</span> [[ <span class=\"variable\">$&#123;svr_runing&#125;</span> == <span class=\"string\">\"\"</span> ]];</div><div class=\"line\"><span class=\"keyword\">then</span></div><div class=\"line\">    <span class=\"built_in\">echo</span> -e <span class=\"string\">\"\\nError: docker-consul client node failed to start...\\n\"</span></div><div class=\"line\">    <span class=\"built_in\">exit</span></div><div class=\"line\"><span class=\"keyword\">fi</span></div><div class=\"line\"><span class=\"built_in\">echo</span> -e <span class=\"string\">\"\\nOK: docker-consul has started as a client node.\\n\"</span></div></pre></td></tr></table></figure>\n<ul>\n<li><p>检查集群的状态</p>\n<p>通过webUI地址: <strong><em>http://&lt;其中一个节点ip&gt;:8500/ui/</em></strong>可查看集群状态，正常情况下会显示<strong><em>3 passing</em></strong>。<br><br>通过docker命令行:<br></p>\n</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">root@hadoop:~<span class=\"comment\"># docker exec -it consul_server consul members</span></div><div class=\"line\">Node                          Address             Status  Type    Build  Protocol  DC</div><div class=\"line\">hadoop.slave01.fs.115cdn.net  10.220.16.133:8301  alive   server  0.8.5  2         dc1</div><div class=\"line\">hadoop.slave02.fs.115cdn.net  10.220.16.134:8301  alive   server  0.8.5  2         dc1</div><div class=\"line\">hadoop.slave03.fs.115cdn.net  10.220.16.163:8301  alive   server  0.8.5  2         dc1</div><div class=\"line\">hadoop.slave04.fs.115cdn.net  10.220.16.125:8301  alive   client  0.8.5  2         dc1</div></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"<h3 id=\"关于Consul\"><a href=\"#关于Consul\" class=\"headerlink\" title=\"关于Consul\"></a>关于Consul</h3><p>Consul 是一个支持多数据中心分布式高可用的服务发现和配置共享的服务软件.<br><br>Consul 由 HashiCorp公司用Go语言开发, 基于Mozilla Public License 2.0的协议进行开源. <br><br>Consul 支持健康检查,并允许 HTTP 和 DNS 协议调用 API 存储键值对.<br><br>命令行超级好用的虚拟机管理软件 vgrant 也是 HashiCorp 公司开发的产品.<br><br>一致性协议采用 Raft 算法,用来保证服务的高可用. 使用 GOSSIP 协议管理成员和广播消息, 并且支持 ACL 访问控制.<br></p>","more":"<h3 id=\"关于官方consul镜像\"><a href=\"#关于官方consul镜像\" class=\"headerlink\" title=\"关于官方consul镜像\"></a>关于官方consul镜像</h3><p>关于官方consul镜像，三点说明:</p>\n<ul>\n<li>想对于其他版本镜像，其stars和pull数量是最多的, pull达到10M+;</li>\n<li>官方文档可读性相对不够好, 有些绕;</li>\n<li>目前官方镜像更新进度基本与consul最新版本保持一致。</li>\n</ul>\n<h3 id=\"多机部署consul-0-8-5版本操作参考\"><a href=\"#多机部署consul-0-8-5版本操作参考\" class=\"headerlink\" title=\"多机部署consul:0.8.5版本操作参考\"></a>多机部署consul:0.8.5版本操作参考</h3><h5 id=\"部分参数说明\"><a href=\"#部分参数说明\" class=\"headerlink\" title=\"部分参数说明\"></a>部分参数说明</h5><ul>\n<li><strong><em>–net=host</em></strong> docker参数, 使得docker容器越过了net namespace的隔离，免去手动指定端口映射的步骤</li>\n<li><strong><em>-server</em></strong> consul支持以server或client的模式运行, server是服务发现模块的核心, client主要用于转发请求</li>\n<li><strong><em>-advertise</em></strong> 将本机私有IP传递到consul</li>\n<li><strong><em>-bootstrap-expect</em></strong> 指定consul将等待几个节点连通，成为一个完整的集群</li>\n<li><strong><em>-retry-join</em></strong> 指定要加入的consul节点地址，失败会重试, 可多次指定不同的地址</li>\n<li><strong><em>-client</em></strong> consul绑定在哪个client地址上，这个地址提供HTTP、DNS、RPC等服务，默认是127.0.0.1</li>\n<li><strong><em>-bind</em></strong> 该地址用来在集群内部的通讯，集群内的所有节点到地址都必须是可达的，默认是0.0.0.0</li>\n<li><strong><em>allow_stale</em></strong> 设置为true, 表明可以从consul集群的任一server节点获取dns信息, false则表明每次请求都会经过consul server leader</li>\n</ul>\n<h5 id=\"集群的多机部署参考\"><a href=\"#集群的多机部署参考\" class=\"headerlink\" title=\"集群的多机部署参考\"></a>集群的多机部署参考</h5><ul>\n<li><p>多中心部署结构图</p>\n<p><img src=\"/img/consul_archi.png\" width=\"700\" height=\"700\" alt=\"consul部署模式\" align=\"center/\"><br><br>生产环境下, 一般一个宿主host一个consul节点；<br><br>server节点建议一个数据中心部署3-5个, client节点可部署任意节点。</p>\n</li>\n<li><p>启动consul server节点, 在对应的机器上root权限下执行以下脚本(需修改节点列表: nodes=(…) ):</p>\n</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#!/bin/bash</span></div><div class=\"line\"></div><div class=\"line\">conf_dir=/opt/consul/conf</div><div class=\"line\">mkdir -p <span class=\"variable\">$&#123;conf_dir&#125;</span></div><div class=\"line\"></div><div class=\"line\">nodes=(</div><div class=\"line\">10.220.16.133</div><div class=\"line\">10.220.16.134</div><div class=\"line\">10.220.16.163</div><div class=\"line\">)</div><div class=\"line\">consul_ver=0.8.5</div><div class=\"line\">retry_interval=15s</div><div class=\"line\">contain_svr_name=consul_server</div><div class=\"line\"></div><div class=\"line\">privIP=$(/sbin/ifconfig eth0 | sed -n <span class=\"string\">'s/.*inet \\(addr:\\)\\?\\([0-9.]\\&#123;7,15\\&#125;\\) .*/\\2/p'</span>)</div><div class=\"line\"><span class=\"keyword\">if</span> [[ !(<span class=\"string\">\"<span class=\"variable\">$&#123;nodes[@]&#125;</span>\"</span> =~ <span class=\"variable\">$privIP</span>) ]];</div><div class=\"line\"><span class=\"keyword\">then</span></div><div class=\"line\">    <span class=\"built_in\">echo</span> -e <span class=\"string\">\"Current node:<span class=\"variable\">$&#123;privIP&#125;</span> not in configured server nodes.\\n\"</span></div><div class=\"line\">    <span class=\"built_in\">exit</span></div><div class=\"line\"><span class=\"keyword\">fi</span></div><div class=\"line\"></div><div class=\"line\">svr_runing=$(docker ps -a | grep <span class=\"string\">\"<span class=\"variable\">$&#123;contain_svr_name&#125;</span>\"</span> | egrep <span class=\"string\">\"Up [About]|[0-9]&#123;1,&#125;\"</span>)</div><div class=\"line\"><span class=\"keyword\">if</span> [[ <span class=\"variable\">$&#123;svr_runing&#125;</span> != <span class=\"string\">\"\"</span> ]];</div><div class=\"line\"><span class=\"keyword\">then</span></div><div class=\"line\">    <span class=\"built_in\">echo</span> -e <span class=\"string\">\"Current container of consul server has been running.\\n\"</span></div><div class=\"line\">    <span class=\"built_in\">exit</span></div><div class=\"line\"><span class=\"keyword\">else</span></div><div class=\"line\">    svr_exists=$(docker ps -a | grep <span class=\"string\">\"<span class=\"variable\">$&#123;contain_svr_name&#125;</span>\"</span>)</div><div class=\"line\">    <span class=\"keyword\">if</span> [[ <span class=\"variable\">$&#123;svr_exists&#125;</span> != <span class=\"string\">\"\"</span> ]];</div><div class=\"line\">    <span class=\"keyword\">then</span></div><div class=\"line\">        <span class=\"built_in\">echo</span> -e <span class=\"string\">\"Now try to start the container as it stopped...\\n\"</span></div><div class=\"line\">        docker start <span class=\"variable\">$&#123;svr_exists&#125;</span></div><div class=\"line\">        sleep 2</div><div class=\"line\">        docker ps -a grep <span class=\"string\">\"<span class=\"variable\">$&#123;contain_svr_name&#125;</span>\"</span></div><div class=\"line\">        <span class=\"built_in\">exit</span></div><div class=\"line\">    <span class=\"keyword\">fi</span></div><div class=\"line\"><span class=\"keyword\">fi</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">echo</span> -e <span class=\"string\">\"To start a new container for consul...\\n\"</span></div><div class=\"line\"><span class=\"built_in\">echo</span> -e <span class=\"string\">\"To initialize configuration...\\n\"</span></div><div class=\"line\"></div><div class=\"line\">nodels=<span class=\"string\">\"\"</span></div><div class=\"line\"><span class=\"keyword\">for</span> host <span class=\"keyword\">in</span> <span class=\"variable\">$&#123;nodes[*]&#125;</span></div><div class=\"line\"><span class=\"keyword\">do</span></div><div class=\"line\">    <span class=\"keyword\">if</span> [[ <span class=\"variable\">$nodels</span> != <span class=\"string\">\"\"</span> ]];</div><div class=\"line\">    <span class=\"keyword\">then</span></div><div class=\"line\">        nodels=<span class=\"variable\">$nodels</span>,</div><div class=\"line\">    <span class=\"keyword\">fi</span></div><div class=\"line\">    nodels=<span class=\"variable\">$nodels</span><span class=\"string\">\"\\\"<span class=\"variable\">$host</span>\\\"\"</span></div><div class=\"line\"><span class=\"keyword\">done</span></div><div class=\"line\"></div><div class=\"line\">config=<span class=\"string\">\"&#123;\\n</span></div><div class=\"line\">\\\"datacenter\\\": \\\"dc_dl\\\",\\n</div><div class=\"line\">\\\"retry_join\\\": [<span class=\"variable\">$&#123;nodels&#125;</span>],\\n</div><div class=\"line\">\\\"retry_interval\\\": \\\"<span class=\"variable\">$&#123;retry_interval&#125;</span>\\\",\\n</div><div class=\"line\">\\\"rejoin_after_leave\\\": true,\\n</div><div class=\"line\">\\\"start_join\\\": [<span class=\"variable\">$&#123;nodels&#125;</span>],\\n</div><div class=\"line\">\\\"bootstrap_expect\\\": 1,\\n</div><div class=\"line\">\\\"server\\\": true,\\n</div><div class=\"line\">\\\"ui\\\": true,\\n</div><div class=\"line\">\\\"dns_config\\\": &#123;\\\"allow_stale\\\": true, \\\"max_stale\\\": \\\"5s\\\"&#125;,\\n</div><div class=\"line\">\\\"node_name\\\": \\\"<span class=\"variable\">$HOSTNAME</span>\\\"\\n</div><div class=\"line\">&#125;\\n\"</div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">echo</span> <span class=\"variable\">$config</span></div><div class=\"line\"><span class=\"built_in\">echo</span> -e <span class=\"variable\">$&#123;config&#125;</span> &gt; <span class=\"variable\">$&#123;conf_dir&#125;</span>/server.json</div><div class=\"line\"><span class=\"built_in\">echo</span> -e <span class=\"variable\">$&#123;config&#125;</span></div><div class=\"line\"></div><div class=\"line\">docker run -d -v <span class=\"variable\">$&#123;conf_dir&#125;</span>:<span class=\"variable\">$&#123;conf_dir&#125;</span> \\</div><div class=\"line\">    --name <span class=\"variable\">$&#123;contain_svr_name&#125;</span> \\</div><div class=\"line\">    --net=host consul:<span class=\"variable\">$&#123;consul_ver&#125;</span> agent \\</div><div class=\"line\">    -config-dir=<span class=\"variable\">$&#123;conf_dir&#125;</span> \\</div><div class=\"line\">    -client=0.0.0.0 \\</div><div class=\"line\">    -<span class=\"built_in\">bind</span>=<span class=\"variable\">$&#123;privIP&#125;</span> \\</div><div class=\"line\">    -advertise=<span class=\"variable\">$&#123;privIP&#125;</span></div><div class=\"line\"></div><div class=\"line\">sleep 2</div><div class=\"line\"></div><div class=\"line\">svr_runing=$(docker ps -a | grep <span class=\"string\">\"<span class=\"variable\">$&#123;contain_svr_name&#125;</span>\"</span> | egrep <span class=\"string\">\"Up [About]|[0-9]&#123;1,&#125;\"</span>)</div><div class=\"line\"><span class=\"keyword\">if</span> [[ <span class=\"variable\">$&#123;svr_runing&#125;</span> == <span class=\"string\">\"\"</span> ]];</div><div class=\"line\"><span class=\"keyword\">then</span></div><div class=\"line\">    <span class=\"built_in\">echo</span> -e <span class=\"string\">\"\\nError: docker-consul failed to start...\\n\"</span></div><div class=\"line\">    <span class=\"built_in\">exit</span></div><div class=\"line\"><span class=\"keyword\">fi</span></div><div class=\"line\"><span class=\"built_in\">echo</span> -e <span class=\"string\">\"\\nOK: docker-consul has started as background server.\\n\"</span></div></pre></td></tr></table></figure>\n<ul>\n<li>启动consul client节点(任意数量或不部署), 在需要部署的机器上执行(需修改svrnodes列表):</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#!/bin/bash</span></div><div class=\"line\"></div><div class=\"line\">conf_dir=/opt/consul/conf</div><div class=\"line\">mkdir -p <span class=\"variable\">$&#123;conf_dir&#125;</span></div><div class=\"line\"></div><div class=\"line\">svrnodes=(</div><div class=\"line\">10.220.16.133</div><div class=\"line\">10.220.16.134</div><div class=\"line\">10.220.16.163</div><div class=\"line\">)</div><div class=\"line\">privIP=$(/sbin/ifconfig eth0 | sed -n <span class=\"string\">'s/.*inet \\(addr:\\)\\?\\([0-9.]\\&#123;7,15\\&#125;\\) .*/\\2/p'</span>)</div><div class=\"line\">consul_ver=0.8.5</div><div class=\"line\">retry_interval=15s</div><div class=\"line\">contain_cli_name=consul_client</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">if</span> [[ <span class=\"string\">\"<span class=\"variable\">$&#123;svrnodes[@]&#125;</span>\"</span> =~ <span class=\"variable\">$privIP</span> ]];</div><div class=\"line\"><span class=\"keyword\">then</span></div><div class=\"line\">    <span class=\"built_in\">echo</span> -e <span class=\"string\">\"Current node:<span class=\"variable\">$&#123;privIP&#125;</span> is configured for server consul, not to run client mode.\\n\"</span></div><div class=\"line\">    <span class=\"built_in\">exit</span></div><div class=\"line\"><span class=\"keyword\">fi</span></div><div class=\"line\"></div><div class=\"line\">svr_runing=$(docker ps -a | grep <span class=\"string\">\"<span class=\"variable\">$&#123;contain_cli_name&#125;</span>\"</span> | egrep <span class=\"string\">\"Up [About]|[0-9]&#123;1,&#125;\"</span>)</div><div class=\"line\"><span class=\"keyword\">if</span> [[ <span class=\"variable\">$&#123;svr_runing&#125;</span> != <span class=\"string\">\"\"</span> ]];</div><div class=\"line\"><span class=\"keyword\">then</span></div><div class=\"line\">    <span class=\"built_in\">echo</span> -e <span class=\"string\">\"Current container of consul client has been running.\\n\"</span></div><div class=\"line\">    <span class=\"built_in\">exit</span></div><div class=\"line\"><span class=\"keyword\">else</span></div><div class=\"line\">    svr_exists=$(docker ps -a | grep <span class=\"string\">\"<span class=\"variable\">$&#123;contain_cli_name&#125;</span>\"</span>)</div><div class=\"line\">    <span class=\"keyword\">if</span> [[ <span class=\"variable\">$&#123;svr_exists&#125;</span> != <span class=\"string\">\"\"</span> ]];</div><div class=\"line\">    <span class=\"keyword\">then</span></div><div class=\"line\">        <span class=\"built_in\">echo</span> -e <span class=\"string\">\"Now try to start the container as it stopped...\\n\"</span></div><div class=\"line\">        docker start <span class=\"variable\">$&#123;svr_exists&#125;</span></div><div class=\"line\">        sleep 2</div><div class=\"line\">        docker ps -a grep <span class=\"string\">\"<span class=\"variable\">$&#123;contain_cli_name&#125;</span>\"</span></div><div class=\"line\">        <span class=\"built_in\">exit</span></div><div class=\"line\">    <span class=\"keyword\">fi</span></div><div class=\"line\"><span class=\"keyword\">fi</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">echo</span> -e <span class=\"string\">\"To start a new container for consul...\\n\"</span></div><div class=\"line\"><span class=\"built_in\">echo</span> -e <span class=\"string\">\"To initialize configuration...\\n\"</span></div><div class=\"line\"></div><div class=\"line\">nodels=<span class=\"string\">\"\"</span></div><div class=\"line\"><span class=\"keyword\">for</span> host <span class=\"keyword\">in</span> <span class=\"variable\">$&#123;svrnodes[*]&#125;</span></div><div class=\"line\"><span class=\"keyword\">do</span></div><div class=\"line\">    <span class=\"keyword\">if</span> [[ <span class=\"variable\">$nodels</span> != <span class=\"string\">\"\"</span> ]];</div><div class=\"line\">    <span class=\"keyword\">then</span></div><div class=\"line\">        nodels=<span class=\"variable\">$nodels</span>,</div><div class=\"line\">    <span class=\"keyword\">fi</span></div><div class=\"line\">    nodels=<span class=\"variable\">$nodels</span><span class=\"string\">\"\\\"<span class=\"variable\">$host</span>\\\"\"</span></div><div class=\"line\"><span class=\"keyword\">done</span></div><div class=\"line\"></div><div class=\"line\">config=<span class=\"string\">\"&#123;\\n</span></div><div class=\"line\">\\\"retry_join\\\": [<span class=\"variable\">$&#123;nodels&#125;</span>],\\n</div><div class=\"line\">\\\"retry_interval\\\": \\\"<span class=\"variable\">$&#123;retry_interval&#125;</span>\\\",\\n</div><div class=\"line\">\\\"rejoin_after_leave\\\": true,\\n</div><div class=\"line\">\\\"start_join\\\": [<span class=\"variable\">$&#123;nodels&#125;</span>],\\n</div><div class=\"line\">\\\"server\\\": false,\\n</div><div class=\"line\">\\\"ui\\\": true,\\n</div><div class=\"line\">\\\"node_name\\\": \\\"<span class=\"variable\">$HOSTNAME</span>\\\"\\n</div><div class=\"line\">&#125;\\n\"</div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">echo</span> <span class=\"variable\">$config</span></div><div class=\"line\"><span class=\"built_in\">echo</span> -e <span class=\"variable\">$&#123;config&#125;</span> &gt; <span class=\"variable\">$&#123;conf_dir&#125;</span>/client.json</div><div class=\"line\"><span class=\"built_in\">echo</span> -e <span class=\"variable\">$&#123;config&#125;</span></div><div class=\"line\"></div><div class=\"line\">docker run -d -v <span class=\"variable\">$&#123;conf_dir&#125;</span>:<span class=\"variable\">$&#123;conf_dir&#125;</span> \\</div><div class=\"line\">    --name <span class=\"variable\">$&#123;contain_cli_name&#125;</span> \\</div><div class=\"line\">    --net=host consul:<span class=\"variable\">$&#123;consul_ver&#125;</span> agent \\</div><div class=\"line\">    -config-dir=<span class=\"variable\">$&#123;conf_dir&#125;</span> \\</div><div class=\"line\">    -client=0.0.0.0 \\</div><div class=\"line\">    -advertise=<span class=\"variable\">$&#123;privIP&#125;</span></div><div class=\"line\"></div><div class=\"line\">sleep 2</div><div class=\"line\"></div><div class=\"line\">svr_runing=$(docker ps -a | grep <span class=\"string\">\"<span class=\"variable\">$&#123;contain_cli_name&#125;</span>\"</span> | egrep <span class=\"string\">\"Up [About]|[0-9]&#123;1,&#125;\"</span>)</div><div class=\"line\"><span class=\"keyword\">if</span> [[ <span class=\"variable\">$&#123;svr_runing&#125;</span> == <span class=\"string\">\"\"</span> ]];</div><div class=\"line\"><span class=\"keyword\">then</span></div><div class=\"line\">    <span class=\"built_in\">echo</span> -e <span class=\"string\">\"\\nError: docker-consul client node failed to start...\\n\"</span></div><div class=\"line\">    <span class=\"built_in\">exit</span></div><div class=\"line\"><span class=\"keyword\">fi</span></div><div class=\"line\"><span class=\"built_in\">echo</span> -e <span class=\"string\">\"\\nOK: docker-consul has started as a client node.\\n\"</span></div></pre></td></tr></table></figure>\n<ul>\n<li><p>检查集群的状态</p>\n<p>通过webUI地址: <strong><em>http://&lt;其中一个节点ip&gt;:8500/ui/</em></strong>可查看集群状态，正常情况下会显示<strong><em>3 passing</em></strong>。<br><br>通过docker命令行:<br></p>\n</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">root@hadoop:~<span class=\"comment\"># docker exec -it consul_server consul members</span></div><div class=\"line\">Node                          Address             Status  Type    Build  Protocol  DC</div><div class=\"line\">hadoop.slave01.fs.115cdn.net  10.220.16.133:8301  alive   server  0.8.5  2         dc1</div><div class=\"line\">hadoop.slave02.fs.115cdn.net  10.220.16.134:8301  alive   server  0.8.5  2         dc1</div><div class=\"line\">hadoop.slave03.fs.115cdn.net  10.220.16.163:8301  alive   server  0.8.5  2         dc1</div><div class=\"line\">hadoop.slave04.fs.115cdn.net  10.220.16.125:8301  alive   client  0.8.5  2         dc1</div></pre></td></tr></table></figure>"},{"title":"[deployment]spark on yarn","date":"2016-12-16T15:10:04.000Z","_content":"\n### 安装包准备\n- Oracle JDK<br>\n    安装了elasticSearch的系统应该已经配置好了JDK环境; 推荐JDK7\n\n- scala开发环境<br>\n    spark依赖于scala运行, scala是开发spark统计程序的官方语言; 推荐安装scala-2.11版本\n\n- hadoop集群<br>\n    hadoop-yarn为spark运算提供资源管理及hdfs存储; 推荐apache hadoop-2.7.3版本\n\n- spark集群<br>\n    用于分布式运算; 推荐apache spark 2.0.2版本\n\n- ES-Hadoop插件<br>\n    es-hadoop作为hadoop/spark集成elasticSearch的插件使用; 推荐es-hadoop_5.1.1版本\n<!--more-->\n\n### 安装步骤\n\n** 尚未找到docker对hadoop多机器多节点集群的快速部署方案, 暂时先手动部署\n\n##### 1. 安装JDK1.7\n```bash\nmkdir /usr/local/java && cd /usr/local/java\nwget \"http://download.oracle.com/otn/java/jdk/7u76-b13/jdk-7u76-linux-x64.tar.gz\"\ntar -zxf jdk-7u76-linux-x64.tar.gz && rm -f jdk-7u76-linux-x64.tar.gz```\n\n在/etc/profile中加入如下变量:\n\n```bash\nexport JAVA_HOME=/usr/local/java/jdk1.7.0_76\nexport JRE_HOME=/usr/local/java/jdk1.7.0_76/jre\nexport PATH=$PATH:/usr/local/java/jdk1.7.0_76/bin\nexport CLASSPATH=./:/usr/local/java/jdk1.7.0_76/lib:/usr/local/java/jdk1.7.0_76/jre/lib\n```\n\n*source /etc/profile*\n\n##### 2. 安装scala-2.11<br>\n```bash\n  mkdir /usr/local/scala && cd /usr/local/scala/\n  wget \"http://downloads.lightbend.com/scala/2.11.8/scala-2.11.8.tgz\"\n  tar -zxf scala-2.11.8.tgz && rm -f scala-2.11.8.tgz\n  echo \"export SCALA_HOME=/usr/local/scala/scala-2.11.8\" >> /etc/profile\n  echo \"export PATH=$SCALA_HOME/bin:$PATH\" >> /etc/profile\n  source /etc/profile\n```\n\n##### 3. 部署Hadoop<br>\n  + 为hadoop创建专有用户\n```bash\n    groupadd hadoop           # 添加hadoop用户组\n    useradd hadoop -g hadoop  # 添加hadoop用户并加入hadoop组\n```\n    vim /etc/sudoers          # 编辑sudoers文件，给hadoop用户sudo权限<br>\n    > hadoop ALL=(ALL) ALL    # 在sudoers末尾加上这一行<br>\n\n  + 修改各机器主机名, 用ä¥方便区分节点<br>\n    假设有三台机器, 一个用作master节点, 两个用于slave节点，如下:\n    > 192.168.1.181 master<br>\n    > 192.168.1.191 slave01<br>\n    > 192.168.1.102 slave02<br>\n    \n    那么在将各个hostname分别改为master, slave01, slave02后, 各自配置/etc/hosts:<br>\n```bash\n    echo \"192.168.1.181 master\" >> /etc/hosts\n    echo \"192.168.1.191 slave01\" >> /etc/hosts\n    echo \"192.168.1.102 slave02\" >> /etc/hosts\n```\n\n  + 配置免密码登录<br>\n    hadoop集群中需要配置namenode(master节点)通过用户hadoop免密码登录到本地以及其他datanode(slave节点);<br>\n    具体做法是将master节点上的rsa这类证书分发到各个slave节点对应ssh配置目录， 这里略过具体过程。\n\n  + 下载hadoop2.7.3<br>\n```bash\n    mkdir /usr/local/hadoop && cd /usr/local/hadoop\n    wget \"https://archive.apache.org/dist/hadoop/core/hadoop-2.7.3/hadoop-2.7.3.tar.gz\"\n    tar -zxf hadoop-2.7.3.tar.gz && rm -f hadoop-2.7.3.tar.gz && chown -R hadoop:hadoop /usr/local/hadoop\n    cd hadoop-2.7.3\n```\n\n  + 配置环境变量(所有节点同样配置)<br>\n```bash\n    echo \"export HADOOP_HOME=/usr/local/hadoop/hadoop-2.7.3\" >> /etc/profile\n    echo \"export PATH=$PATH:$HADOOP_HOME/bin:$HADOOP_HOME/sbin\" >> /etc/profile\n    source /etc/profile\n```\n\n  + 修改配置文件, 在${HADOOP_HOME}/etc/hadoop/下(***可先在主节点中配置好, 然后拷贝到其他工作节点***)<br>\n    - vim etc/hadoop/hadoop-env.sh<br>\n```bash\nexport JAVA_HOME=/usr/local/java/jdk1.7.0_76\n```\n    - vim etc/hadoop/yarn-env.sh<br>\n```bash\n export JAVA_HOME=/usr/local/java/jdk1.7.0_76\n```\n\n    - vim etc/hadoop/slaves  // 把datanode的hostname写入slaves文件, 根据实际情况修改\n      > slave01<br>\n      > slave02\n\n    - vim etc/hadoop/core-site.xml<br>\n```xml\n      <configuration>\n          <property>\n              <name>fs.defaultFS</name>\n              <value>hdfs://master:9000</value>\n              <description>HDFS的URI，文件系统://namenode标识:端口号</description>\n          </property>\n          \n          <property>\n              <name>hadoop.tmp.dir</name>\n              <value>/usr/local/hadoop/tmp</value>\n              <description>namenode上本地的hadoop临时文件夹</description>\n          </property>\n      </configuration>\n```\n    - vim etc/hadoop/hdfs-site.xml<br>\n```xml\n      <configuration>\n          <property>\n              <name>dfs.name.dir</name>\n              <value>/usr/local/hadoop/hdfs/name</value>\n              <description>namenode上存储hdfs名字空间元数据 </description> \n          </property>\n          \n          <property>\n              <name>dfs.data.dir</name>\n              <value>/usr/local/hadoop/hdfs/data</value>\n              <description>datanode上数据块的物理存储位置</description>\n          </property>\n          \n          <property>\n              <name>dfs.replication</name>\n              <value>2</value>\n              <description>副本个数，配置默认是3,应小于datanode机器数量</description>\n          </property>\n      </configuration>\n```\n    - vim etc/hadoop/yarn-site.xml<br>\n```xml\n      <configuration>\n          <property>\n              <name>yarn.nodemanager.aux-services</name>\n              <value>mapreduce_shuffle</value>\n          </property>\n          <property>\n              <name>yarn.resourcemanager.hostname</name>\n              <value>master</value>\n          </property>\n      </configuration>\n```\n    - vim etc/hadoop/mapred-site.xml\n```xml\n      <configuration>\n          <property>\n              <name>mapreduce.framework.name</name>\n              <value>yarn</value>\n          </property>\n      </configuration>\n```\n\n  ***所有配置文件修改后, 将/usr/local/hadoop/文件夹拷贝到datanode中相应的位置***\n\n  + hadoop集群初始化及启动, 在主节点中执行\n```bash\ncd /usr/local/hadoop/hadoop-2.7.3 && su hadoop\nbin/hdfs namenode -format\nsbin/start-dfs.sh\nsbin/start-yarn.sh\n```\n    ***hadoop启动后, 通过http://master:50070/和http://master:8088/可以分别查看hdfs和task等状态信息***\n\n\n##### 4. 部署spark\n  + 下载spark-2.0.2-bin-hadoop2.7.tgz\n```bash\nmkdir /usr/local/spark/ && cd /usr/local/spark\nchown -R hadoop:hadoop /usr/local/spark\nwget \"http://d3kbcqa49mib13.cloudfront.net/spark-2.0.2-bin-hadoop2.7.tgz\"\ntar -zxf spark-2.0.2-bin-hadoop2.7.tgz && rm -f spark-2.0.2-bin-hadoop2.7.tgz\ncd spark-2.0.2-bin-hadoop2.7\n```\n\n  + 配置环境变量 \n```bash\necho \"export SPARK_HOME=/usr/local/spark/spark-2.0.2-bin-hadoop2.7\" >> /etc/profile\necho \"export PATH=$PATH:$SPARK_HOME/bin:$SPARK_HOME/sbin\" >> /etc/profile\nsource /etc/profile\n```\n\n  + 修改配置文件\n    - vim conf/spark-env.sh\n```bash\nexport JAVA_HOME=/usr/local/java/jdk1.7.0_76\nexport SCALA_HOME=/usr/local/scala/scala-2.11.8\nexport SPARK_HOME=/usr/local/spark/spark-2.0.2-bin-hadoop2.7\nexport HADOOP_HOME=/usr/local/hadoop/hadoop-2.7.3\nexport SPARK_MASTER_HOST=master\nexport HADOOP_CONF_DIR=/usr/local/hadoop/hadoop-2.7.3/etc/hadoop/\nexport SPARK_HISTORY_OPTS=\"-Dspark.history.retainedApplications=3 -Dspark.history.fs.logDirectory=hdfs://master:9000/sparklogs\"\nexport LD_LIBRARY_PATH=${HADOOP_HOME}/lib/native/:$LD_LIBRARY_PATH\n```\n    - vim spark-default.conf\n```\nspark.eventLog.enabled true\nspark.yarn.jars hdfs:///sparkjars/*              # 指定spark on yarn模式下所以来的spark jar包\nspark.eventLog.dir hdfs://master:9000/sparklogs\nspark.es.nodes　 192.168.1.181      # 指定实际elasticSearch集群的节点, 可以不用全部列出\nspark.es.port　　9200               # es节点端口\nspark.es.nodes.discovery true       # 多播扫描, 自动加入同一集群\n```\n\n    - vim slaves\n```\nslave01\nslave02\n```\n\n  + 在hdfs为Spark建立必要的目录\n```bash\n# SPARK_HOME\n# sprk集群的日志目录：配置文件中对history-server中定义的log目录\n$ hdfs dfs -mkdir /sparklogs\n# 将spark的jar包拷贝到hadoop服务器上，这样避免每次计算的时候都要做去一次拷贝操作\n$ hdfs dfs -mkdir /sparkjars\n$ cd /usr/local/spark/spark-2.0.2-bin-hadoop2.7/ && hdfs dfs -put jars/* /sparkjars/\n```\n\n  ***配置文件修改完成后， 将/usr/local/spark文件夹拷贝到其他节点对应的位置, 并配置好环境变量***\n\n  + spark集群启动, 在主节点中执行:\n```bash\ncd /usr/local/spark/spark-2.0.2-bin-hadoop2.7/ && ./sbin/start-all.sh\n```\n  用自带example验证测试\n```bash\nroot@master:/usr/local/spark/spark-2.0.2-bin-hadoop2.7# bin/spark-submit --class org.apache.spark.\\\nexamples.JavaSparkPi --master spark://master:7077 examples/jars/spark-examples_2.11-2.0.2.jar\n```\n```\n16/12/26 15:41:13 WARN SparkContext: Use an existing SparkContext, some configuration may not take effect.\n[Stage 0:>                                                          (0 + 0) / 2]16/12/26 15:41:20 WARN \\\nTaskSetManager: Stage 0 contains a task of very large size (981 KB). The maximum recommended task size is 100 KB.\nPi is roughly 3.13608 \n```\n  ***spark启动后， 通过http://master:8080/可以查看spark当前的运行状态***\n\n##### 5. 结合es-hadoop\n  + 下载ES-Hadoop\n\n```bash\nmkdir /usr/local/es-hadoop && cd /usr/local/es-hadoop\nwget \"http://download.elastic.co/hadoop/elasticsearch-hadoop-5.1.1.zip\"\nunzip elasticsearch-hadoop-5.1.1.zip && rm -f elasticsearch-hadoop-5.1.1.zip\ncp elasticsearch-hadoop-5.1.1/dist/elasticsearch-hadoop-5.1.1.jar /usr/local/spark/spark-2.0.2-bin-hadoop2.7/jars/\n```\n\n + 通过spark访问/操作elasticSearch\n```\nroot@master:/usr/local/spark/spark-2.0.2-bin-hadoop2.7# ./bin/spark-submit your_spark_es_script.py\n```\n","source":"_posts/deployment-spark-on-yarn.md","raw":"---\ntitle: '[deployment]spark on yarn'\ndate: 2016-12-16 23:10:04\ntags: spark, hadoop\n---\n\n### 安装包准备\n- Oracle JDK<br>\n    安装了elasticSearch的系统应该已经配置好了JDK环境; 推荐JDK7\n\n- scala开发环境<br>\n    spark依赖于scala运行, scala是开发spark统计程序的官方语言; 推荐安装scala-2.11版本\n\n- hadoop集群<br>\n    hadoop-yarn为spark运算提供资源管理及hdfs存储; 推荐apache hadoop-2.7.3版本\n\n- spark集群<br>\n    用于分布式运算; 推荐apache spark 2.0.2版本\n\n- ES-Hadoop插件<br>\n    es-hadoop作为hadoop/spark集成elasticSearch的插件使用; 推荐es-hadoop_5.1.1版本\n<!--more-->\n\n### 安装步骤\n\n** 尚未找到docker对hadoop多机器多节点集群的快速部署方案, 暂时先手动部署\n\n##### 1. 安装JDK1.7\n```bash\nmkdir /usr/local/java && cd /usr/local/java\nwget \"http://download.oracle.com/otn/java/jdk/7u76-b13/jdk-7u76-linux-x64.tar.gz\"\ntar -zxf jdk-7u76-linux-x64.tar.gz && rm -f jdk-7u76-linux-x64.tar.gz```\n\n在/etc/profile中加入如下变量:\n\n```bash\nexport JAVA_HOME=/usr/local/java/jdk1.7.0_76\nexport JRE_HOME=/usr/local/java/jdk1.7.0_76/jre\nexport PATH=$PATH:/usr/local/java/jdk1.7.0_76/bin\nexport CLASSPATH=./:/usr/local/java/jdk1.7.0_76/lib:/usr/local/java/jdk1.7.0_76/jre/lib\n```\n\n*source /etc/profile*\n\n##### 2. 安装scala-2.11<br>\n```bash\n  mkdir /usr/local/scala && cd /usr/local/scala/\n  wget \"http://downloads.lightbend.com/scala/2.11.8/scala-2.11.8.tgz\"\n  tar -zxf scala-2.11.8.tgz && rm -f scala-2.11.8.tgz\n  echo \"export SCALA_HOME=/usr/local/scala/scala-2.11.8\" >> /etc/profile\n  echo \"export PATH=$SCALA_HOME/bin:$PATH\" >> /etc/profile\n  source /etc/profile\n```\n\n##### 3. 部署Hadoop<br>\n  + 为hadoop创建专有用户\n```bash\n    groupadd hadoop           # 添加hadoop用户组\n    useradd hadoop -g hadoop  # 添加hadoop用户并加入hadoop组\n```\n    vim /etc/sudoers          # 编辑sudoers文件，给hadoop用户sudo权限<br>\n    > hadoop ALL=(ALL) ALL    # 在sudoers末尾加上这一行<br>\n\n  + 修改各机器主机名, 用ä¥方便区分节点<br>\n    假设有三台机器, 一个用作master节点, 两个用于slave节点，如下:\n    > 192.168.1.181 master<br>\n    > 192.168.1.191 slave01<br>\n    > 192.168.1.102 slave02<br>\n    \n    那么在将各个hostname分别改为master, slave01, slave02后, 各自配置/etc/hosts:<br>\n```bash\n    echo \"192.168.1.181 master\" >> /etc/hosts\n    echo \"192.168.1.191 slave01\" >> /etc/hosts\n    echo \"192.168.1.102 slave02\" >> /etc/hosts\n```\n\n  + 配置免密码登录<br>\n    hadoop集群中需要配置namenode(master节点)通过用户hadoop免密码登录到本地以及其他datanode(slave节点);<br>\n    具体做法是将master节点上的rsa这类证书分发到各个slave节点对应ssh配置目录， 这里略过具体过程。\n\n  + 下载hadoop2.7.3<br>\n```bash\n    mkdir /usr/local/hadoop && cd /usr/local/hadoop\n    wget \"https://archive.apache.org/dist/hadoop/core/hadoop-2.7.3/hadoop-2.7.3.tar.gz\"\n    tar -zxf hadoop-2.7.3.tar.gz && rm -f hadoop-2.7.3.tar.gz && chown -R hadoop:hadoop /usr/local/hadoop\n    cd hadoop-2.7.3\n```\n\n  + 配置环境变量(所有节点同样配置)<br>\n```bash\n    echo \"export HADOOP_HOME=/usr/local/hadoop/hadoop-2.7.3\" >> /etc/profile\n    echo \"export PATH=$PATH:$HADOOP_HOME/bin:$HADOOP_HOME/sbin\" >> /etc/profile\n    source /etc/profile\n```\n\n  + 修改配置文件, 在${HADOOP_HOME}/etc/hadoop/下(***可先在主节点中配置好, 然后拷贝到其他工作节点***)<br>\n    - vim etc/hadoop/hadoop-env.sh<br>\n```bash\nexport JAVA_HOME=/usr/local/java/jdk1.7.0_76\n```\n    - vim etc/hadoop/yarn-env.sh<br>\n```bash\n export JAVA_HOME=/usr/local/java/jdk1.7.0_76\n```\n\n    - vim etc/hadoop/slaves  // 把datanode的hostname写入slaves文件, 根据实际情况修改\n      > slave01<br>\n      > slave02\n\n    - vim etc/hadoop/core-site.xml<br>\n```xml\n      <configuration>\n          <property>\n              <name>fs.defaultFS</name>\n              <value>hdfs://master:9000</value>\n              <description>HDFS的URI，文件系统://namenode标识:端口号</description>\n          </property>\n          \n          <property>\n              <name>hadoop.tmp.dir</name>\n              <value>/usr/local/hadoop/tmp</value>\n              <description>namenode上本地的hadoop临时文件夹</description>\n          </property>\n      </configuration>\n```\n    - vim etc/hadoop/hdfs-site.xml<br>\n```xml\n      <configuration>\n          <property>\n              <name>dfs.name.dir</name>\n              <value>/usr/local/hadoop/hdfs/name</value>\n              <description>namenode上存储hdfs名字空间元数据 </description> \n          </property>\n          \n          <property>\n              <name>dfs.data.dir</name>\n              <value>/usr/local/hadoop/hdfs/data</value>\n              <description>datanode上数据块的物理存储位置</description>\n          </property>\n          \n          <property>\n              <name>dfs.replication</name>\n              <value>2</value>\n              <description>副本个数，配置默认是3,应小于datanode机器数量</description>\n          </property>\n      </configuration>\n```\n    - vim etc/hadoop/yarn-site.xml<br>\n```xml\n      <configuration>\n          <property>\n              <name>yarn.nodemanager.aux-services</name>\n              <value>mapreduce_shuffle</value>\n          </property>\n          <property>\n              <name>yarn.resourcemanager.hostname</name>\n              <value>master</value>\n          </property>\n      </configuration>\n```\n    - vim etc/hadoop/mapred-site.xml\n```xml\n      <configuration>\n          <property>\n              <name>mapreduce.framework.name</name>\n              <value>yarn</value>\n          </property>\n      </configuration>\n```\n\n  ***所有配置文件修改后, 将/usr/local/hadoop/文件夹拷贝到datanode中相应的位置***\n\n  + hadoop集群初始化及启动, 在主节点中执行\n```bash\ncd /usr/local/hadoop/hadoop-2.7.3 && su hadoop\nbin/hdfs namenode -format\nsbin/start-dfs.sh\nsbin/start-yarn.sh\n```\n    ***hadoop启动后, 通过http://master:50070/和http://master:8088/可以分别查看hdfs和task等状态信息***\n\n\n##### 4. 部署spark\n  + 下载spark-2.0.2-bin-hadoop2.7.tgz\n```bash\nmkdir /usr/local/spark/ && cd /usr/local/spark\nchown -R hadoop:hadoop /usr/local/spark\nwget \"http://d3kbcqa49mib13.cloudfront.net/spark-2.0.2-bin-hadoop2.7.tgz\"\ntar -zxf spark-2.0.2-bin-hadoop2.7.tgz && rm -f spark-2.0.2-bin-hadoop2.7.tgz\ncd spark-2.0.2-bin-hadoop2.7\n```\n\n  + 配置环境变量 \n```bash\necho \"export SPARK_HOME=/usr/local/spark/spark-2.0.2-bin-hadoop2.7\" >> /etc/profile\necho \"export PATH=$PATH:$SPARK_HOME/bin:$SPARK_HOME/sbin\" >> /etc/profile\nsource /etc/profile\n```\n\n  + 修改配置文件\n    - vim conf/spark-env.sh\n```bash\nexport JAVA_HOME=/usr/local/java/jdk1.7.0_76\nexport SCALA_HOME=/usr/local/scala/scala-2.11.8\nexport SPARK_HOME=/usr/local/spark/spark-2.0.2-bin-hadoop2.7\nexport HADOOP_HOME=/usr/local/hadoop/hadoop-2.7.3\nexport SPARK_MASTER_HOST=master\nexport HADOOP_CONF_DIR=/usr/local/hadoop/hadoop-2.7.3/etc/hadoop/\nexport SPARK_HISTORY_OPTS=\"-Dspark.history.retainedApplications=3 -Dspark.history.fs.logDirectory=hdfs://master:9000/sparklogs\"\nexport LD_LIBRARY_PATH=${HADOOP_HOME}/lib/native/:$LD_LIBRARY_PATH\n```\n    - vim spark-default.conf\n```\nspark.eventLog.enabled true\nspark.yarn.jars hdfs:///sparkjars/*              # 指定spark on yarn模式下所以来的spark jar包\nspark.eventLog.dir hdfs://master:9000/sparklogs\nspark.es.nodes　 192.168.1.181      # 指定实际elasticSearch集群的节点, 可以不用全部列出\nspark.es.port　　9200               # es节点端口\nspark.es.nodes.discovery true       # 多播扫描, 自动加入同一集群\n```\n\n    - vim slaves\n```\nslave01\nslave02\n```\n\n  + 在hdfs为Spark建立必要的目录\n```bash\n# SPARK_HOME\n# sprk集群的日志目录：配置文件中对history-server中定义的log目录\n$ hdfs dfs -mkdir /sparklogs\n# 将spark的jar包拷贝到hadoop服务器上，这样避免每次计算的时候都要做去一次拷贝操作\n$ hdfs dfs -mkdir /sparkjars\n$ cd /usr/local/spark/spark-2.0.2-bin-hadoop2.7/ && hdfs dfs -put jars/* /sparkjars/\n```\n\n  ***配置文件修改完成后， 将/usr/local/spark文件夹拷贝到其他节点对应的位置, 并配置好环境变量***\n\n  + spark集群启动, 在主节点中执行:\n```bash\ncd /usr/local/spark/spark-2.0.2-bin-hadoop2.7/ && ./sbin/start-all.sh\n```\n  用自带example验证测试\n```bash\nroot@master:/usr/local/spark/spark-2.0.2-bin-hadoop2.7# bin/spark-submit --class org.apache.spark.\\\nexamples.JavaSparkPi --master spark://master:7077 examples/jars/spark-examples_2.11-2.0.2.jar\n```\n```\n16/12/26 15:41:13 WARN SparkContext: Use an existing SparkContext, some configuration may not take effect.\n[Stage 0:>                                                          (0 + 0) / 2]16/12/26 15:41:20 WARN \\\nTaskSetManager: Stage 0 contains a task of very large size (981 KB). The maximum recommended task size is 100 KB.\nPi is roughly 3.13608 \n```\n  ***spark启动后， 通过http://master:8080/可以查看spark当前的运行状态***\n\n##### 5. 结合es-hadoop\n  + 下载ES-Hadoop\n\n```bash\nmkdir /usr/local/es-hadoop && cd /usr/local/es-hadoop\nwget \"http://download.elastic.co/hadoop/elasticsearch-hadoop-5.1.1.zip\"\nunzip elasticsearch-hadoop-5.1.1.zip && rm -f elasticsearch-hadoop-5.1.1.zip\ncp elasticsearch-hadoop-5.1.1/dist/elasticsearch-hadoop-5.1.1.jar /usr/local/spark/spark-2.0.2-bin-hadoop2.7/jars/\n```\n\n + 通过spark访问/操作elasticSearch\n```\nroot@master:/usr/local/spark/spark-2.0.2-bin-hadoop2.7# ./bin/spark-submit your_spark_es_script.py\n```\n","slug":"deployment-spark-on-yarn","published":1,"updated":"2017-08-16T15:15:02.367Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj84nanzw00057v4d0yjsibbb","content":"<h3 id=\"安装包准备\"><a href=\"#安装包准备\" class=\"headerlink\" title=\"安装包准备\"></a>安装包准备</h3><ul>\n<li><p>Oracle JDK<br><br>  安装了elasticSearch的系统应该已经配置好了JDK环境; 推荐JDK7</p>\n</li>\n<li><p>scala开发环境<br><br>  spark依赖于scala运行, scala是开发spark统计程序的官方语言; 推荐安装scala-2.11版本</p>\n</li>\n<li><p>hadoop集群<br><br>  hadoop-yarn为spark运算提供资源管理及hdfs存储; 推荐apache hadoop-2.7.3版本</p>\n</li>\n<li><p>spark集群<br><br>  用于分布式运算; 推荐apache spark 2.0.2版本</p>\n</li>\n<li><p>ES-Hadoop插件<br><br>  es-hadoop作为hadoop/spark集成elasticSearch的插件使用; 推荐es-hadoop_5.1.1版本</p>\n<a id=\"more\"></a>\n</li>\n</ul>\n<h3 id=\"安装步骤\"><a href=\"#安装步骤\" class=\"headerlink\" title=\"安装步骤\"></a>安装步骤</h3><p>** 尚未找到docker对hadoop多机器多节点集群的快速部署方案, 暂时先手动部署</p>\n<h5 id=\"1-安装JDK1-7\"><a href=\"#1-安装JDK1-7\" class=\"headerlink\" title=\"1. 安装JDK1.7\"></a>1. 安装JDK1.7</h5><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">mkdir /usr/<span class=\"built_in\">local</span>/java &amp;&amp; <span class=\"built_in\">cd</span> /usr/<span class=\"built_in\">local</span>/java</div><div class=\"line\">wget <span class=\"string\">\"http://download.oracle.com/otn/java/jdk/7u76-b13/jdk-7u76-linux-x64.tar.gz\"</span></div><div class=\"line\">tar -zxf jdk-7u76-linux-x64.tar.gz &amp;&amp; rm -f jdk-7u76-linux-x64.tar.gz</div></pre></td></tr></table></figure>\n<p>在/etc/profile中加入如下变量:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">export</span> JAVA_HOME=/usr/<span class=\"built_in\">local</span>/java/jdk1.7.0_76</div><div class=\"line\"><span class=\"built_in\">export</span> JRE_HOME=/usr/<span class=\"built_in\">local</span>/java/jdk1.7.0_76/jre</div><div class=\"line\"><span class=\"built_in\">export</span> PATH=<span class=\"variable\">$PATH</span>:/usr/<span class=\"built_in\">local</span>/java/jdk1.7.0_76/bin</div><div class=\"line\"><span class=\"built_in\">export</span> CLASSPATH=./:/usr/<span class=\"built_in\">local</span>/java/jdk1.7.0_76/lib:/usr/<span class=\"built_in\">local</span>/java/jdk1.7.0_76/jre/lib</div></pre></td></tr></table></figure>\n<p><em>source /etc/profile</em></p>\n<h5 id=\"2-安装scala-2-11\"><a href=\"#2-安装scala-2-11\" class=\"headerlink\" title=\"2. 安装scala-2.11\"></a>2. 安装scala-2.11<br></h5><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">mkdir /usr/<span class=\"built_in\">local</span>/scala &amp;&amp; <span class=\"built_in\">cd</span> /usr/<span class=\"built_in\">local</span>/scala/</div><div class=\"line\">wget <span class=\"string\">\"http://downloads.lightbend.com/scala/2.11.8/scala-2.11.8.tgz\"</span></div><div class=\"line\">tar -zxf scala-2.11.8.tgz &amp;&amp; rm -f scala-2.11.8.tgz</div><div class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">\"export SCALA_HOME=/usr/local/scala/scala-2.11.8\"</span> &gt;&gt; /etc/profile</div><div class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">\"export PATH=<span class=\"variable\">$SCALA_HOME</span>/bin:<span class=\"variable\">$PATH</span>\"</span> &gt;&gt; /etc/profile</div><div class=\"line\"><span class=\"built_in\">source</span> /etc/profile</div></pre></td></tr></table></figure>\n<h5 id=\"3-部署Hadoop\"><a href=\"#3-部署Hadoop\" class=\"headerlink\" title=\"3. 部署Hadoop\"></a>3. 部署Hadoop<br></h5><ul>\n<li><p>为hadoop创建专有用户</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">groupadd hadoop           <span class=\"comment\"># 添加hadoop用户组</span></div><div class=\"line\">useradd hadoop -g hadoop  <span class=\"comment\"># 添加hadoop用户并加入hadoop组</span></div></pre></td></tr></table></figure>\n<p>vim /etc/sudoers          # 编辑sudoers文件，给hadoop用户sudo权限<br></p>\n<blockquote>\n<p>hadoop ALL=(ALL) ALL    # 在sudoers末尾加上这一行<br></p>\n</blockquote>\n</li>\n<li><p>修改各机器主机名, 用ä¥方便区分节点<br><br>假设有三台机器, 一个用作master节点, 两个用于slave节点，如下:</p>\n<blockquote>\n<p>192.168.1.181 master<br><br>192.168.1.191 slave01<br><br>192.168.1.102 slave02<br></p>\n</blockquote>\n<p>那么在将各个hostname分别改为master, slave01, slave02后, 各自配置/etc/hosts:<br></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">\"192.168.1.181 master\"</span> &gt;&gt; /etc/hosts</div><div class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">\"192.168.1.191 slave01\"</span> &gt;&gt; /etc/hosts</div><div class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">\"192.168.1.102 slave02\"</span> &gt;&gt; /etc/hosts</div></pre></td></tr></table></figure>\n</li>\n<li><p>配置免密码登录<br><br>hadoop集群中需要配置namenode(master节点)通过用户hadoop免密码登录到本地以及其他datanode(slave节点);<br><br>具体做法是将master节点上的rsa这类证书分发到各个slave节点对应ssh配置目录， 这里略过具体过程。</p>\n</li>\n<li><p>下载hadoop2.7.3<br></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">mkdir /usr/<span class=\"built_in\">local</span>/hadoop &amp;&amp; <span class=\"built_in\">cd</span> /usr/<span class=\"built_in\">local</span>/hadoop</div><div class=\"line\">wget <span class=\"string\">\"https://archive.apache.org/dist/hadoop/core/hadoop-2.7.3/hadoop-2.7.3.tar.gz\"</span></div><div class=\"line\">tar -zxf hadoop-2.7.3.tar.gz &amp;&amp; rm -f hadoop-2.7.3.tar.gz &amp;&amp; chown -R hadoop:hadoop /usr/<span class=\"built_in\">local</span>/hadoop</div><div class=\"line\"><span class=\"built_in\">cd</span> hadoop-2.7.3</div></pre></td></tr></table></figure>\n</li>\n<li><p>配置环境变量(所有节点同样配置)<br></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">\"export HADOOP_HOME=/usr/local/hadoop/hadoop-2.7.3\"</span> &gt;&gt; /etc/profile</div><div class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">\"export PATH=<span class=\"variable\">$PATH</span>:<span class=\"variable\">$HADOOP_HOME</span>/bin:<span class=\"variable\">$HADOOP_HOME</span>/sbin\"</span> &gt;&gt; /etc/profile</div><div class=\"line\"><span class=\"built_in\">source</span> /etc/profile</div></pre></td></tr></table></figure>\n</li>\n<li><p>修改配置文件, 在${HADOOP_HOME}/etc/hadoop/下(<strong><em>可先在主节点中配置好, 然后拷贝到其他工作节点</em></strong>)<br></p>\n<ul>\n<li><p>vim etc/hadoop/hadoop-env.sh<br></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">export</span> JAVA_HOME=/usr/<span class=\"built_in\">local</span>/java/jdk1.7.0_76</div></pre></td></tr></table></figure>\n</li>\n<li><p>vim etc/hadoop/yarn-env.sh<br></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">export</span> JAVA_HOME=/usr/<span class=\"built_in\">local</span>/java/jdk1.7.0_76</div></pre></td></tr></table></figure>\n</li>\n<li><p>vim etc/hadoop/slaves  // 把datanode的hostname写入slaves文件, 根据实际情况修改</p>\n<blockquote>\n<p>slave01<br><br>slave02</p>\n</blockquote>\n</li>\n<li><p>vim etc/hadoop/core-site.xml<br></p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">configuration</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">property</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">name</span>&gt;</span>fs.defaultFS<span class=\"tag\">&lt;/<span class=\"name\">name</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">value</span>&gt;</span>hdfs://master:9000<span class=\"tag\">&lt;/<span class=\"name\">value</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">description</span>&gt;</span>HDFS的URI，文件系统://namenode标识:端口号<span class=\"tag\">&lt;/<span class=\"name\">description</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">property</span>&gt;</span></div><div class=\"line\">    </div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">property</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">name</span>&gt;</span>hadoop.tmp.dir<span class=\"tag\">&lt;/<span class=\"name\">name</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">value</span>&gt;</span>/usr/local/hadoop/tmp<span class=\"tag\">&lt;/<span class=\"name\">value</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">description</span>&gt;</span>namenode上本地的hadoop临时文件夹<span class=\"tag\">&lt;/<span class=\"name\">description</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">property</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">configuration</span>&gt;</span></div></pre></td></tr></table></figure>\n</li>\n<li><p>vim etc/hadoop/hdfs-site.xml<br></p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">configuration</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">property</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">name</span>&gt;</span>dfs.name.dir<span class=\"tag\">&lt;/<span class=\"name\">name</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">value</span>&gt;</span>/usr/local/hadoop/hdfs/name<span class=\"tag\">&lt;/<span class=\"name\">value</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">description</span>&gt;</span>namenode上存储hdfs名字空间元数据 <span class=\"tag\">&lt;/<span class=\"name\">description</span>&gt;</span> </div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">property</span>&gt;</span></div><div class=\"line\">    </div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">property</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">name</span>&gt;</span>dfs.data.dir<span class=\"tag\">&lt;/<span class=\"name\">name</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">value</span>&gt;</span>/usr/local/hadoop/hdfs/data<span class=\"tag\">&lt;/<span class=\"name\">value</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">description</span>&gt;</span>datanode上数据块的物理存储位置<span class=\"tag\">&lt;/<span class=\"name\">description</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">property</span>&gt;</span></div><div class=\"line\">    </div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">property</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">name</span>&gt;</span>dfs.replication<span class=\"tag\">&lt;/<span class=\"name\">name</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">value</span>&gt;</span>2<span class=\"tag\">&lt;/<span class=\"name\">value</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">description</span>&gt;</span>副本个数，配置默认是3,应小于datanode机器数量<span class=\"tag\">&lt;/<span class=\"name\">description</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">property</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">configuration</span>&gt;</span></div></pre></td></tr></table></figure>\n</li>\n<li><p>vim etc/hadoop/yarn-site.xml<br></p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">configuration</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">property</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">name</span>&gt;</span>yarn.nodemanager.aux-services<span class=\"tag\">&lt;/<span class=\"name\">name</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">value</span>&gt;</span>mapreduce_shuffle<span class=\"tag\">&lt;/<span class=\"name\">value</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">property</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">property</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">name</span>&gt;</span>yarn.resourcemanager.hostname<span class=\"tag\">&lt;/<span class=\"name\">name</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">value</span>&gt;</span>master<span class=\"tag\">&lt;/<span class=\"name\">value</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">property</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">configuration</span>&gt;</span></div></pre></td></tr></table></figure>\n</li>\n<li><p>vim etc/hadoop/mapred-site.xml</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">configuration</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">property</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">name</span>&gt;</span>mapreduce.framework.name<span class=\"tag\">&lt;/<span class=\"name\">name</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">value</span>&gt;</span>yarn<span class=\"tag\">&lt;/<span class=\"name\">value</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">property</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">configuration</span>&gt;</span></div></pre></td></tr></table></figure>\n</li>\n</ul>\n<p><strong><em>所有配置文件修改后, 将/usr/local/hadoop/文件夹拷贝到datanode中相应的位置</em></strong></p>\n</li>\n<li><p>hadoop集群初始化及启动, 在主节点中执行</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">cd</span> /usr/<span class=\"built_in\">local</span>/hadoop/hadoop-2.7.3 &amp;&amp; su hadoop</div><div class=\"line\">bin/hdfs namenode -format</div><div class=\"line\">sbin/start-dfs.sh</div><div class=\"line\">sbin/start-yarn.sh</div></pre></td></tr></table></figure>\n<p><strong><em>hadoop启动后, 通过<a href=\"http://master:50070/和http://master:8088/可以分别查看hdfs和task等状态信息\" target=\"_blank\" rel=\"external\">http://master:50070/和http://master:8088/可以分别查看hdfs和task等状态信息</a></em></strong></p>\n</li>\n</ul>\n<h5 id=\"4-部署spark\"><a href=\"#4-部署spark\" class=\"headerlink\" title=\"4. 部署spark\"></a>4. 部署spark</h5><ul>\n<li><p>下载spark-2.0.2-bin-hadoop2.7.tgz</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">mkdir /usr/<span class=\"built_in\">local</span>/spark/ &amp;&amp; <span class=\"built_in\">cd</span> /usr/<span class=\"built_in\">local</span>/spark</div><div class=\"line\">chown -R hadoop:hadoop /usr/<span class=\"built_in\">local</span>/spark</div><div class=\"line\">wget <span class=\"string\">\"http://d3kbcqa49mib13.cloudfront.net/spark-2.0.2-bin-hadoop2.7.tgz\"</span></div><div class=\"line\">tar -zxf spark-2.0.2-bin-hadoop2.7.tgz &amp;&amp; rm -f spark-2.0.2-bin-hadoop2.7.tgz</div><div class=\"line\"><span class=\"built_in\">cd</span> spark-2.0.2-bin-hadoop2.7</div></pre></td></tr></table></figure>\n</li>\n<li><p>配置环境变量 </p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">\"export SPARK_HOME=/usr/local/spark/spark-2.0.2-bin-hadoop2.7\"</span> &gt;&gt; /etc/profile</div><div class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">\"export PATH=<span class=\"variable\">$PATH</span>:<span class=\"variable\">$SPARK_HOME</span>/bin:<span class=\"variable\">$SPARK_HOME</span>/sbin\"</span> &gt;&gt; /etc/profile</div><div class=\"line\"><span class=\"built_in\">source</span> /etc/profile</div></pre></td></tr></table></figure>\n</li>\n<li><p>修改配置文件</p>\n<ul>\n<li><p>vim conf/spark-env.sh</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">export</span> JAVA_HOME=/usr/<span class=\"built_in\">local</span>/java/jdk1.7.0_76</div><div class=\"line\"><span class=\"built_in\">export</span> SCALA_HOME=/usr/<span class=\"built_in\">local</span>/scala/scala-2.11.8</div><div class=\"line\"><span class=\"built_in\">export</span> SPARK_HOME=/usr/<span class=\"built_in\">local</span>/spark/spark-2.0.2-bin-hadoop2.7</div><div class=\"line\"><span class=\"built_in\">export</span> HADOOP_HOME=/usr/<span class=\"built_in\">local</span>/hadoop/hadoop-2.7.3</div><div class=\"line\"><span class=\"built_in\">export</span> SPARK_MASTER_HOST=master</div><div class=\"line\"><span class=\"built_in\">export</span> HADOOP_CONF_DIR=/usr/<span class=\"built_in\">local</span>/hadoop/hadoop-2.7.3/etc/hadoop/</div><div class=\"line\"><span class=\"built_in\">export</span> SPARK_HISTORY_OPTS=<span class=\"string\">\"-Dspark.history.retainedApplications=3 -Dspark.history.fs.logDirectory=hdfs://master:9000/sparklogs\"</span></div><div class=\"line\"><span class=\"built_in\">export</span> LD_LIBRARY_PATH=<span class=\"variable\">$&#123;HADOOP_HOME&#125;</span>/lib/native/:<span class=\"variable\">$LD_LIBRARY_PATH</span></div></pre></td></tr></table></figure>\n</li>\n<li><p>vim spark-default.conf</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">spark.eventLog.enabled true</div><div class=\"line\">spark.yarn.jars hdfs:///sparkjars/*              # 指定spark on yarn模式下所以来的spark jar包</div><div class=\"line\">spark.eventLog.dir hdfs://master:9000/sparklogs</div><div class=\"line\">spark.es.nodes　 192.168.1.181      # 指定实际elasticSearch集群的节点, 可以不用全部列出</div><div class=\"line\">spark.es.port　　9200               # es节点端口</div><div class=\"line\">spark.es.nodes.discovery true       # 多播扫描, 自动加入同一集群</div></pre></td></tr></table></figure>\n</li>\n<li><p>vim slaves</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">slave01</div><div class=\"line\">slave02</div></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n<li><p>在hdfs为Spark建立必要的目录</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\"># SPARK_HOME</span></div><div class=\"line\"><span class=\"comment\"># sprk集群的日志目录：配置文件中对history-server中定义的log目录</span></div><div class=\"line\">$ hdfs dfs -mkdir /sparklogs</div><div class=\"line\"><span class=\"comment\"># 将spark的jar包拷贝到hadoop服务器上，这样避免每次计算的时候都要做去一次拷贝操作</span></div><div class=\"line\">$ hdfs dfs -mkdir /sparkjars</div><div class=\"line\">$ <span class=\"built_in\">cd</span> /usr/<span class=\"built_in\">local</span>/spark/spark-2.0.2-bin-hadoop2.7/ &amp;&amp; hdfs dfs -put jars/* /sparkjars/</div></pre></td></tr></table></figure>\n<p><strong><em>配置文件修改完成后， 将/usr/local/spark文件夹拷贝到其他节点对应的位置, 并配置好环境变量</em></strong></p>\n</li>\n<li><p>spark集群启动, 在主节点中执行:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">cd</span> /usr/<span class=\"built_in\">local</span>/spark/spark-2.0.2-bin-hadoop2.7/ &amp;&amp; ./sbin/start-all.sh</div></pre></td></tr></table></figure>\n<p>用自带example验证测试</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">root@master:/usr/<span class=\"built_in\">local</span>/spark/spark-2.0.2-bin-hadoop2.7<span class=\"comment\"># bin/spark-submit --class org.apache.spark.\\</span></div><div class=\"line\">examples.JavaSparkPi --master spark://master:7077 examples/jars/spark-examples_2.11-2.0.2.jar</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">16/12/26 15:41:13 WARN SparkContext: Use an existing SparkContext, some configuration may not take effect.</div><div class=\"line\">[Stage 0:&gt;                                                          (0 + 0) / 2]16/12/26 15:41:20 WARN \\</div><div class=\"line\">TaskSetManager: Stage 0 contains a task of very large size (981 KB). The maximum recommended task size is 100 KB.</div><div class=\"line\">Pi is roughly 3.13608</div></pre></td></tr></table></figure>\n<p>  <strong><em>spark启动后， 通过<a href=\"http://master:8080/可以查看spark当前的运行状态\" target=\"_blank\" rel=\"external\">http://master:8080/可以查看spark当前的运行状态</a></em></strong></p>\n<h5 id=\"5-结合es-hadoop\"><a href=\"#5-结合es-hadoop\" class=\"headerlink\" title=\"5. 结合es-hadoop\"></a>5. 结合es-hadoop</h5><ul>\n<li>下载ES-Hadoop</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">mkdir /usr/<span class=\"built_in\">local</span>/es-hadoop &amp;&amp; <span class=\"built_in\">cd</span> /usr/<span class=\"built_in\">local</span>/es-hadoop</div><div class=\"line\">wget <span class=\"string\">\"http://download.elastic.co/hadoop/elasticsearch-hadoop-5.1.1.zip\"</span></div><div class=\"line\">unzip elasticsearch-hadoop-5.1.1.zip &amp;&amp; rm -f elasticsearch-hadoop-5.1.1.zip</div><div class=\"line\">cp elasticsearch-hadoop-5.1.1/dist/elasticsearch-hadoop-5.1.1.jar /usr/<span class=\"built_in\">local</span>/spark/spark-2.0.2-bin-hadoop2.7/jars/</div></pre></td></tr></table></figure>\n<ul>\n<li>通过spark访问/操作elasticSearch<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">root@master:/usr/local/spark/spark-2.0.2-bin-hadoop2.7# ./bin/spark-submit your_spark_es_script.py</div></pre></td></tr></table></figure>\n</li>\n</ul>\n","site":{"data":{}},"excerpt":"<h3 id=\"安装包准备\"><a href=\"#安装包准备\" class=\"headerlink\" title=\"安装包准备\"></a>安装包准备</h3><ul>\n<li><p>Oracle JDK<br><br>  安装了elasticSearch的系统应该已经配置好了JDK环境; 推荐JDK7</p>\n</li>\n<li><p>scala开发环境<br><br>  spark依赖于scala运行, scala是开发spark统计程序的官方语言; 推荐安装scala-2.11版本</p>\n</li>\n<li><p>hadoop集群<br><br>  hadoop-yarn为spark运算提供资源管理及hdfs存储; 推荐apache hadoop-2.7.3版本</p>\n</li>\n<li><p>spark集群<br><br>  用于分布式运算; 推荐apache spark 2.0.2版本</p>\n</li>\n<li><p>ES-Hadoop插件<br><br>  es-hadoop作为hadoop/spark集成elasticSearch的插件使用; 推荐es-hadoop_5.1.1版本</p>","more":"</li>\n</ul>\n<h3 id=\"安装步骤\"><a href=\"#安装步骤\" class=\"headerlink\" title=\"安装步骤\"></a>安装步骤</h3><p>** 尚未找到docker对hadoop多机器多节点集群的快速部署方案, 暂时先手动部署</p>\n<h5 id=\"1-安装JDK1-7\"><a href=\"#1-安装JDK1-7\" class=\"headerlink\" title=\"1. 安装JDK1.7\"></a>1. 安装JDK1.7</h5><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">mkdir /usr/<span class=\"built_in\">local</span>/java &amp;&amp; <span class=\"built_in\">cd</span> /usr/<span class=\"built_in\">local</span>/java</div><div class=\"line\">wget <span class=\"string\">\"http://download.oracle.com/otn/java/jdk/7u76-b13/jdk-7u76-linux-x64.tar.gz\"</span></div><div class=\"line\">tar -zxf jdk-7u76-linux-x64.tar.gz &amp;&amp; rm -f jdk-7u76-linux-x64.tar.gz</div></pre></td></tr></table></figure>\n<p>在/etc/profile中加入如下变量:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">export</span> JAVA_HOME=/usr/<span class=\"built_in\">local</span>/java/jdk1.7.0_76</div><div class=\"line\"><span class=\"built_in\">export</span> JRE_HOME=/usr/<span class=\"built_in\">local</span>/java/jdk1.7.0_76/jre</div><div class=\"line\"><span class=\"built_in\">export</span> PATH=<span class=\"variable\">$PATH</span>:/usr/<span class=\"built_in\">local</span>/java/jdk1.7.0_76/bin</div><div class=\"line\"><span class=\"built_in\">export</span> CLASSPATH=./:/usr/<span class=\"built_in\">local</span>/java/jdk1.7.0_76/lib:/usr/<span class=\"built_in\">local</span>/java/jdk1.7.0_76/jre/lib</div></pre></td></tr></table></figure>\n<p><em>source /etc/profile</em></p>\n<h5 id=\"2-安装scala-2-11\"><a href=\"#2-安装scala-2-11\" class=\"headerlink\" title=\"2. 安装scala-2.11\"></a>2. 安装scala-2.11<br></h5><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">mkdir /usr/<span class=\"built_in\">local</span>/scala &amp;&amp; <span class=\"built_in\">cd</span> /usr/<span class=\"built_in\">local</span>/scala/</div><div class=\"line\">wget <span class=\"string\">\"http://downloads.lightbend.com/scala/2.11.8/scala-2.11.8.tgz\"</span></div><div class=\"line\">tar -zxf scala-2.11.8.tgz &amp;&amp; rm -f scala-2.11.8.tgz</div><div class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">\"export SCALA_HOME=/usr/local/scala/scala-2.11.8\"</span> &gt;&gt; /etc/profile</div><div class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">\"export PATH=<span class=\"variable\">$SCALA_HOME</span>/bin:<span class=\"variable\">$PATH</span>\"</span> &gt;&gt; /etc/profile</div><div class=\"line\"><span class=\"built_in\">source</span> /etc/profile</div></pre></td></tr></table></figure>\n<h5 id=\"3-部署Hadoop\"><a href=\"#3-部署Hadoop\" class=\"headerlink\" title=\"3. 部署Hadoop\"></a>3. 部署Hadoop<br></h5><ul>\n<li><p>为hadoop创建专有用户</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">groupadd hadoop           <span class=\"comment\"># 添加hadoop用户组</span></div><div class=\"line\">useradd hadoop -g hadoop  <span class=\"comment\"># 添加hadoop用户并加入hadoop组</span></div></pre></td></tr></table></figure>\n<p>vim /etc/sudoers          # 编辑sudoers文件，给hadoop用户sudo权限<br></p>\n<blockquote>\n<p>hadoop ALL=(ALL) ALL    # 在sudoers末尾加上这一行<br></p>\n</blockquote>\n</li>\n<li><p>修改各机器主机名, 用ä¥方便区分节点<br><br>假设有三台机器, 一个用作master节点, 两个用于slave节点，如下:</p>\n<blockquote>\n<p>192.168.1.181 master<br><br>192.168.1.191 slave01<br><br>192.168.1.102 slave02<br></p>\n</blockquote>\n<p>那么在将各个hostname分别改为master, slave01, slave02后, 各自配置/etc/hosts:<br></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">\"192.168.1.181 master\"</span> &gt;&gt; /etc/hosts</div><div class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">\"192.168.1.191 slave01\"</span> &gt;&gt; /etc/hosts</div><div class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">\"192.168.1.102 slave02\"</span> &gt;&gt; /etc/hosts</div></pre></td></tr></table></figure>\n</li>\n<li><p>配置免密码登录<br><br>hadoop集群中需要配置namenode(master节点)通过用户hadoop免密码登录到本地以及其他datanode(slave节点);<br><br>具体做法是将master节点上的rsa这类证书分发到各个slave节点对应ssh配置目录， 这里略过具体过程。</p>\n</li>\n<li><p>下载hadoop2.7.3<br></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">mkdir /usr/<span class=\"built_in\">local</span>/hadoop &amp;&amp; <span class=\"built_in\">cd</span> /usr/<span class=\"built_in\">local</span>/hadoop</div><div class=\"line\">wget <span class=\"string\">\"https://archive.apache.org/dist/hadoop/core/hadoop-2.7.3/hadoop-2.7.3.tar.gz\"</span></div><div class=\"line\">tar -zxf hadoop-2.7.3.tar.gz &amp;&amp; rm -f hadoop-2.7.3.tar.gz &amp;&amp; chown -R hadoop:hadoop /usr/<span class=\"built_in\">local</span>/hadoop</div><div class=\"line\"><span class=\"built_in\">cd</span> hadoop-2.7.3</div></pre></td></tr></table></figure>\n</li>\n<li><p>配置环境变量(所有节点同样配置)<br></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">\"export HADOOP_HOME=/usr/local/hadoop/hadoop-2.7.3\"</span> &gt;&gt; /etc/profile</div><div class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">\"export PATH=<span class=\"variable\">$PATH</span>:<span class=\"variable\">$HADOOP_HOME</span>/bin:<span class=\"variable\">$HADOOP_HOME</span>/sbin\"</span> &gt;&gt; /etc/profile</div><div class=\"line\"><span class=\"built_in\">source</span> /etc/profile</div></pre></td></tr></table></figure>\n</li>\n<li><p>修改配置文件, 在${HADOOP_HOME}/etc/hadoop/下(<strong><em>可先在主节点中配置好, 然后拷贝到其他工作节点</em></strong>)<br></p>\n<ul>\n<li><p>vim etc/hadoop/hadoop-env.sh<br></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">export</span> JAVA_HOME=/usr/<span class=\"built_in\">local</span>/java/jdk1.7.0_76</div></pre></td></tr></table></figure>\n</li>\n<li><p>vim etc/hadoop/yarn-env.sh<br></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">export</span> JAVA_HOME=/usr/<span class=\"built_in\">local</span>/java/jdk1.7.0_76</div></pre></td></tr></table></figure>\n</li>\n<li><p>vim etc/hadoop/slaves  // 把datanode的hostname写入slaves文件, 根据实际情况修改</p>\n<blockquote>\n<p>slave01<br><br>slave02</p>\n</blockquote>\n</li>\n<li><p>vim etc/hadoop/core-site.xml<br></p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">configuration</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">property</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">name</span>&gt;</span>fs.defaultFS<span class=\"tag\">&lt;/<span class=\"name\">name</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">value</span>&gt;</span>hdfs://master:9000<span class=\"tag\">&lt;/<span class=\"name\">value</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">description</span>&gt;</span>HDFS的URI，文件系统://namenode标识:端口号<span class=\"tag\">&lt;/<span class=\"name\">description</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">property</span>&gt;</span></div><div class=\"line\">    </div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">property</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">name</span>&gt;</span>hadoop.tmp.dir<span class=\"tag\">&lt;/<span class=\"name\">name</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">value</span>&gt;</span>/usr/local/hadoop/tmp<span class=\"tag\">&lt;/<span class=\"name\">value</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">description</span>&gt;</span>namenode上本地的hadoop临时文件夹<span class=\"tag\">&lt;/<span class=\"name\">description</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">property</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">configuration</span>&gt;</span></div></pre></td></tr></table></figure>\n</li>\n<li><p>vim etc/hadoop/hdfs-site.xml<br></p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">configuration</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">property</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">name</span>&gt;</span>dfs.name.dir<span class=\"tag\">&lt;/<span class=\"name\">name</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">value</span>&gt;</span>/usr/local/hadoop/hdfs/name<span class=\"tag\">&lt;/<span class=\"name\">value</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">description</span>&gt;</span>namenode上存储hdfs名字空间元数据 <span class=\"tag\">&lt;/<span class=\"name\">description</span>&gt;</span> </div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">property</span>&gt;</span></div><div class=\"line\">    </div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">property</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">name</span>&gt;</span>dfs.data.dir<span class=\"tag\">&lt;/<span class=\"name\">name</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">value</span>&gt;</span>/usr/local/hadoop/hdfs/data<span class=\"tag\">&lt;/<span class=\"name\">value</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">description</span>&gt;</span>datanode上数据块的物理存储位置<span class=\"tag\">&lt;/<span class=\"name\">description</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">property</span>&gt;</span></div><div class=\"line\">    </div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">property</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">name</span>&gt;</span>dfs.replication<span class=\"tag\">&lt;/<span class=\"name\">name</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">value</span>&gt;</span>2<span class=\"tag\">&lt;/<span class=\"name\">value</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">description</span>&gt;</span>副本个数，配置默认是3,应小于datanode机器数量<span class=\"tag\">&lt;/<span class=\"name\">description</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">property</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">configuration</span>&gt;</span></div></pre></td></tr></table></figure>\n</li>\n<li><p>vim etc/hadoop/yarn-site.xml<br></p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">configuration</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">property</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">name</span>&gt;</span>yarn.nodemanager.aux-services<span class=\"tag\">&lt;/<span class=\"name\">name</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">value</span>&gt;</span>mapreduce_shuffle<span class=\"tag\">&lt;/<span class=\"name\">value</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">property</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">property</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">name</span>&gt;</span>yarn.resourcemanager.hostname<span class=\"tag\">&lt;/<span class=\"name\">name</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">value</span>&gt;</span>master<span class=\"tag\">&lt;/<span class=\"name\">value</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">property</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">configuration</span>&gt;</span></div></pre></td></tr></table></figure>\n</li>\n<li><p>vim etc/hadoop/mapred-site.xml</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">configuration</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">property</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">name</span>&gt;</span>mapreduce.framework.name<span class=\"tag\">&lt;/<span class=\"name\">name</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">value</span>&gt;</span>yarn<span class=\"tag\">&lt;/<span class=\"name\">value</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">property</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">configuration</span>&gt;</span></div></pre></td></tr></table></figure>\n</li>\n</ul>\n<p><strong><em>所有配置文件修改后, 将/usr/local/hadoop/文件夹拷贝到datanode中相应的位置</em></strong></p>\n</li>\n<li><p>hadoop集群初始化及启动, 在主节点中执行</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">cd</span> /usr/<span class=\"built_in\">local</span>/hadoop/hadoop-2.7.3 &amp;&amp; su hadoop</div><div class=\"line\">bin/hdfs namenode -format</div><div class=\"line\">sbin/start-dfs.sh</div><div class=\"line\">sbin/start-yarn.sh</div></pre></td></tr></table></figure>\n<p><strong><em>hadoop启动后, 通过<a href=\"http://master:50070/和http://master:8088/可以分别查看hdfs和task等状态信息\" target=\"_blank\" rel=\"external\">http://master:50070/和http://master:8088/可以分别查看hdfs和task等状态信息</a></em></strong></p>\n</li>\n</ul>\n<h5 id=\"4-部署spark\"><a href=\"#4-部署spark\" class=\"headerlink\" title=\"4. 部署spark\"></a>4. 部署spark</h5><ul>\n<li><p>下载spark-2.0.2-bin-hadoop2.7.tgz</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">mkdir /usr/<span class=\"built_in\">local</span>/spark/ &amp;&amp; <span class=\"built_in\">cd</span> /usr/<span class=\"built_in\">local</span>/spark</div><div class=\"line\">chown -R hadoop:hadoop /usr/<span class=\"built_in\">local</span>/spark</div><div class=\"line\">wget <span class=\"string\">\"http://d3kbcqa49mib13.cloudfront.net/spark-2.0.2-bin-hadoop2.7.tgz\"</span></div><div class=\"line\">tar -zxf spark-2.0.2-bin-hadoop2.7.tgz &amp;&amp; rm -f spark-2.0.2-bin-hadoop2.7.tgz</div><div class=\"line\"><span class=\"built_in\">cd</span> spark-2.0.2-bin-hadoop2.7</div></pre></td></tr></table></figure>\n</li>\n<li><p>配置环境变量 </p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">\"export SPARK_HOME=/usr/local/spark/spark-2.0.2-bin-hadoop2.7\"</span> &gt;&gt; /etc/profile</div><div class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">\"export PATH=<span class=\"variable\">$PATH</span>:<span class=\"variable\">$SPARK_HOME</span>/bin:<span class=\"variable\">$SPARK_HOME</span>/sbin\"</span> &gt;&gt; /etc/profile</div><div class=\"line\"><span class=\"built_in\">source</span> /etc/profile</div></pre></td></tr></table></figure>\n</li>\n<li><p>修改配置文件</p>\n<ul>\n<li><p>vim conf/spark-env.sh</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">export</span> JAVA_HOME=/usr/<span class=\"built_in\">local</span>/java/jdk1.7.0_76</div><div class=\"line\"><span class=\"built_in\">export</span> SCALA_HOME=/usr/<span class=\"built_in\">local</span>/scala/scala-2.11.8</div><div class=\"line\"><span class=\"built_in\">export</span> SPARK_HOME=/usr/<span class=\"built_in\">local</span>/spark/spark-2.0.2-bin-hadoop2.7</div><div class=\"line\"><span class=\"built_in\">export</span> HADOOP_HOME=/usr/<span class=\"built_in\">local</span>/hadoop/hadoop-2.7.3</div><div class=\"line\"><span class=\"built_in\">export</span> SPARK_MASTER_HOST=master</div><div class=\"line\"><span class=\"built_in\">export</span> HADOOP_CONF_DIR=/usr/<span class=\"built_in\">local</span>/hadoop/hadoop-2.7.3/etc/hadoop/</div><div class=\"line\"><span class=\"built_in\">export</span> SPARK_HISTORY_OPTS=<span class=\"string\">\"-Dspark.history.retainedApplications=3 -Dspark.history.fs.logDirectory=hdfs://master:9000/sparklogs\"</span></div><div class=\"line\"><span class=\"built_in\">export</span> LD_LIBRARY_PATH=<span class=\"variable\">$&#123;HADOOP_HOME&#125;</span>/lib/native/:<span class=\"variable\">$LD_LIBRARY_PATH</span></div></pre></td></tr></table></figure>\n</li>\n<li><p>vim spark-default.conf</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">spark.eventLog.enabled true</div><div class=\"line\">spark.yarn.jars hdfs:///sparkjars/*              # 指定spark on yarn模式下所以来的spark jar包</div><div class=\"line\">spark.eventLog.dir hdfs://master:9000/sparklogs</div><div class=\"line\">spark.es.nodes　 192.168.1.181      # 指定实际elasticSearch集群的节点, 可以不用全部列出</div><div class=\"line\">spark.es.port　　9200               # es节点端口</div><div class=\"line\">spark.es.nodes.discovery true       # 多播扫描, 自动加入同一集群</div></pre></td></tr></table></figure>\n</li>\n<li><p>vim slaves</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">slave01</div><div class=\"line\">slave02</div></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n<li><p>在hdfs为Spark建立必要的目录</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\"># SPARK_HOME</span></div><div class=\"line\"><span class=\"comment\"># sprk集群的日志目录：配置文件中对history-server中定义的log目录</span></div><div class=\"line\">$ hdfs dfs -mkdir /sparklogs</div><div class=\"line\"><span class=\"comment\"># 将spark的jar包拷贝到hadoop服务器上，这样避免每次计算的时候都要做去一次拷贝操作</span></div><div class=\"line\">$ hdfs dfs -mkdir /sparkjars</div><div class=\"line\">$ <span class=\"built_in\">cd</span> /usr/<span class=\"built_in\">local</span>/spark/spark-2.0.2-bin-hadoop2.7/ &amp;&amp; hdfs dfs -put jars/* /sparkjars/</div></pre></td></tr></table></figure>\n<p><strong><em>配置文件修改完成后， 将/usr/local/spark文件夹拷贝到其他节点对应的位置, 并配置好环境变量</em></strong></p>\n</li>\n<li><p>spark集群启动, 在主节点中执行:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">cd</span> /usr/<span class=\"built_in\">local</span>/spark/spark-2.0.2-bin-hadoop2.7/ &amp;&amp; ./sbin/start-all.sh</div></pre></td></tr></table></figure>\n<p>用自带example验证测试</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">root@master:/usr/<span class=\"built_in\">local</span>/spark/spark-2.0.2-bin-hadoop2.7<span class=\"comment\"># bin/spark-submit --class org.apache.spark.\\</span></div><div class=\"line\">examples.JavaSparkPi --master spark://master:7077 examples/jars/spark-examples_2.11-2.0.2.jar</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">16/12/26 15:41:13 WARN SparkContext: Use an existing SparkContext, some configuration may not take effect.</div><div class=\"line\">[Stage 0:&gt;                                                          (0 + 0) / 2]16/12/26 15:41:20 WARN \\</div><div class=\"line\">TaskSetManager: Stage 0 contains a task of very large size (981 KB). The maximum recommended task size is 100 KB.</div><div class=\"line\">Pi is roughly 3.13608</div></pre></td></tr></table></figure>\n<p>  <strong><em>spark启动后， 通过<a href=\"http://master:8080/可以查看spark当前的运行状态\" target=\"_blank\" rel=\"external\">http://master:8080/可以查看spark当前的运行状态</a></em></strong></p>\n<h5 id=\"5-结合es-hadoop\"><a href=\"#5-结合es-hadoop\" class=\"headerlink\" title=\"5. 结合es-hadoop\"></a>5. 结合es-hadoop</h5><ul>\n<li>下载ES-Hadoop</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">mkdir /usr/<span class=\"built_in\">local</span>/es-hadoop &amp;&amp; <span class=\"built_in\">cd</span> /usr/<span class=\"built_in\">local</span>/es-hadoop</div><div class=\"line\">wget <span class=\"string\">\"http://download.elastic.co/hadoop/elasticsearch-hadoop-5.1.1.zip\"</span></div><div class=\"line\">unzip elasticsearch-hadoop-5.1.1.zip &amp;&amp; rm -f elasticsearch-hadoop-5.1.1.zip</div><div class=\"line\">cp elasticsearch-hadoop-5.1.1/dist/elasticsearch-hadoop-5.1.1.jar /usr/<span class=\"built_in\">local</span>/spark/spark-2.0.2-bin-hadoop2.7/jars/</div></pre></td></tr></table></figure>\n<ul>\n<li>通过spark访问/操作elasticSearch<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">root@master:/usr/local/spark/spark-2.0.2-bin-hadoop2.7# ./bin/spark-submit your_spark_es_script.py</div></pre></td></tr></table></figure>\n</li>\n</ul>"},{"title":"关于本站","date":"2015-07-22T14:31:49.000Z","_content":"\n本站主要记录了我的一些技术笔记， 及生活上的一些感悟。\n\nLife is short, let's programing.\n","source":"_posts/about/about.md","raw":"---\ntitle: 关于本站\ndate: 2015-07-22 22:31:49\ntags:\n---\n\n本站主要记录了我的一些技术笔记， 及生活上的一些感悟。\n\nLife is short, let's programing.\n","slug":"about/about","published":1,"updated":"2017-08-02T07:28:30.881Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj84nao2a000c7v4ddnknec0p","content":"<p>本站主要记录了我的一些技术笔记， 及生活上的一些感悟。</p>\n<p>Life is short, let’s programing.</p>\n","site":{"data":{}},"excerpt":"","more":"<p>本站主要记录了我的一些技术笔记， 及生活上的一些感悟。</p>\n<p>Life is short, let’s programing.</p>\n"},{"title":"python之encode/decode","date":"2017-07-23T04:46:25.000Z","_content":"\n## python之encode/decode\n\n```python\n# coding: utf-8\n\nimport base64\n\nto_enc = 'sampledata'\nenc_res = base64.b64encode(to_enc)\nprint enc_res\n\ndec_res = base64.b64decode(enc_res)\nprint dec_res\n```\n运行效果如下:\n\n```bash\nroot@XIAOMO:/tmp# python27 b64.py\nc2FtcGxlZGF0YQ==\nsampledata\n```\n","source":"_posts/encode/base64.md","raw":"---\ntitle: python之encode/decode\ndate: 2017/7/23 12:46:25\n---\n\n## python之encode/decode\n\n```python\n# coding: utf-8\n\nimport base64\n\nto_enc = 'sampledata'\nenc_res = base64.b64encode(to_enc)\nprint enc_res\n\ndec_res = base64.b64decode(enc_res)\nprint dec_res\n```\n运行效果如下:\n\n```bash\nroot@XIAOMO:/tmp# python27 b64.py\nc2FtcGxlZGF0YQ==\nsampledata\n```\n","slug":"encode/base64","published":1,"updated":"2017-07-23T06:36:17.117Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj84nao2l000d7v4ducr9rbp9","content":"<h2 id=\"python之encode-decode\"><a href=\"#python之encode-decode\" class=\"headerlink\" title=\"python之encode/decode\"></a>python之encode/decode</h2><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\"># coding: utf-8</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">import</span> base64</div><div class=\"line\"></div><div class=\"line\">to_enc = <span class=\"string\">'sampledata'</span></div><div class=\"line\">enc_res = base64.b64encode(to_enc)</div><div class=\"line\"><span class=\"keyword\">print</span> enc_res</div><div class=\"line\"></div><div class=\"line\">dec_res = base64.b64decode(enc_res)</div><div class=\"line\"><span class=\"keyword\">print</span> dec_res</div></pre></td></tr></table></figure>\n<p>运行效果如下:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">root@XIAOMO:/tmp<span class=\"comment\"># python27 b64.py</span></div><div class=\"line\">c2FtcGxlZGF0YQ==</div><div class=\"line\">sampledata</div></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"python之encode-decode\"><a href=\"#python之encode-decode\" class=\"headerlink\" title=\"python之encode/decode\"></a>python之encode/decode</h2><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\"># coding: utf-8</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">import</span> base64</div><div class=\"line\"></div><div class=\"line\">to_enc = <span class=\"string\">'sampledata'</span></div><div class=\"line\">enc_res = base64.b64encode(to_enc)</div><div class=\"line\"><span class=\"keyword\">print</span> enc_res</div><div class=\"line\"></div><div class=\"line\">dec_res = base64.b64decode(enc_res)</div><div class=\"line\"><span class=\"keyword\">print</span> dec_res</div></pre></td></tr></table></figure>\n<p>运行效果如下:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">root@XIAOMO:/tmp<span class=\"comment\"># python27 b64.py</span></div><div class=\"line\">c2FtcGxlZGF0YQ==</div><div class=\"line\">sampledata</div></pre></td></tr></table></figure>\n"},{"title":"CentOS7 中文乱码问题","date":"2017-07-22T17:25:42.000Z","_content":"\n## 修改/etc/locale.conf\n\n```bash\nLANG=\"en_US.UTF-8\"\n```\n\n## 修改/etc/sysconfig/i18n\n\n```bash\nLANG=\"zh_CN.UTF-8\"\n```\n<!--more-->\n\n## 修改/etc/vimrc或~/.vimrc,添加\n```bash\nset fileencodings=utf-8,gb2312,gbk,gb18030  \nset termencoding=utf-8  \nset fileformats=unix  \nset encoding=prc\n```\n\n## 刷新配置文件\n\n```bash\nsource /etc/locale.conf\nsource /etc/sysconfig/i18n\nsource ~/.vimrc\nsource /etc/vimrc\n```\n","source":"_posts/encode/centos_zh.md","raw":"---\ntitle: CentOS7 中文乱码问题\ndate: 2017/07/23 1:25:42\n---\n\n## 修改/etc/locale.conf\n\n```bash\nLANG=\"en_US.UTF-8\"\n```\n\n## 修改/etc/sysconfig/i18n\n\n```bash\nLANG=\"zh_CN.UTF-8\"\n```\n<!--more-->\n\n## 修改/etc/vimrc或~/.vimrc,添加\n```bash\nset fileencodings=utf-8,gb2312,gbk,gb18030  \nset termencoding=utf-8  \nset fileformats=unix  \nset encoding=prc\n```\n\n## 刷新配置文件\n\n```bash\nsource /etc/locale.conf\nsource /etc/sysconfig/i18n\nsource ~/.vimrc\nsource /etc/vimrc\n```\n","slug":"encode/centos_zh","published":1,"updated":"2017-08-20T05:48:47.995Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj84nao2o000e7v4dpfx210kb","content":"<h2 id=\"修改-etc-locale-conf\"><a href=\"#修改-etc-locale-conf\" class=\"headerlink\" title=\"修改/etc/locale.conf\"></a>修改/etc/locale.conf</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">LANG=<span class=\"string\">\"en_US.UTF-8\"</span></div></pre></td></tr></table></figure>\n<h2 id=\"修改-etc-sysconfig-i18n\"><a href=\"#修改-etc-sysconfig-i18n\" class=\"headerlink\" title=\"修改/etc/sysconfig/i18n\"></a>修改/etc/sysconfig/i18n</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">LANG=<span class=\"string\">\"zh_CN.UTF-8\"</span></div></pre></td></tr></table></figure>\n<a id=\"more\"></a>\n<h2 id=\"修改-etc-vimrc或-vimrc-添加\"><a href=\"#修改-etc-vimrc或-vimrc-添加\" class=\"headerlink\" title=\"修改/etc/vimrc或~/.vimrc,添加\"></a>修改/etc/vimrc或~/.vimrc,添加</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">set</span> fileencodings=utf-8,gb2312,gbk,gb18030  </div><div class=\"line\"><span class=\"built_in\">set</span> termencoding=utf-8  </div><div class=\"line\"><span class=\"built_in\">set</span> fileformats=unix  </div><div class=\"line\"><span class=\"built_in\">set</span> encoding=prc</div></pre></td></tr></table></figure>\n<h2 id=\"刷新配置文件\"><a href=\"#刷新配置文件\" class=\"headerlink\" title=\"刷新配置文件\"></a>刷新配置文件</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">source</span> /etc/locale.conf</div><div class=\"line\"><span class=\"built_in\">source</span> /etc/sysconfig/i18n</div><div class=\"line\"><span class=\"built_in\">source</span> ~/.vimrc</div><div class=\"line\"><span class=\"built_in\">source</span> /etc/vimrc</div></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"<h2 id=\"修改-etc-locale-conf\"><a href=\"#修改-etc-locale-conf\" class=\"headerlink\" title=\"修改/etc/locale.conf\"></a>修改/etc/locale.conf</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">LANG=<span class=\"string\">\"en_US.UTF-8\"</span></div></pre></td></tr></table></figure>\n<h2 id=\"修改-etc-sysconfig-i18n\"><a href=\"#修改-etc-sysconfig-i18n\" class=\"headerlink\" title=\"修改/etc/sysconfig/i18n\"></a>修改/etc/sysconfig/i18n</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">LANG=<span class=\"string\">\"zh_CN.UTF-8\"</span></div></pre></td></tr></table></figure>","more":"<h2 id=\"修改-etc-vimrc或-vimrc-添加\"><a href=\"#修改-etc-vimrc或-vimrc-添加\" class=\"headerlink\" title=\"修改/etc/vimrc或~/.vimrc,添加\"></a>修改/etc/vimrc或~/.vimrc,添加</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">set</span> fileencodings=utf-8,gb2312,gbk,gb18030  </div><div class=\"line\"><span class=\"built_in\">set</span> termencoding=utf-8  </div><div class=\"line\"><span class=\"built_in\">set</span> fileformats=unix  </div><div class=\"line\"><span class=\"built_in\">set</span> encoding=prc</div></pre></td></tr></table></figure>\n<h2 id=\"刷新配置文件\"><a href=\"#刷新配置文件\" class=\"headerlink\" title=\"刷新配置文件\"></a>刷新配置文件</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">source</span> /etc/locale.conf</div><div class=\"line\"><span class=\"built_in\">source</span> /etc/sysconfig/i18n</div><div class=\"line\"><span class=\"built_in\">source</span> ~/.vimrc</div><div class=\"line\"><span class=\"built_in\">source</span> /etc/vimrc</div></pre></td></tr></table></figure>"},{"title":"[golang]简单文件上传服务","date":"2017-09-07T10:51:21.000Z","_content":"\n利用net/http库及gorilla/mux库实现了一个简单的文件上传服务,<br>\n示例如下:\n<!--more-->\n\n```golang\npackage main\n\nimport (\n\t\"fmt\"\n\t\"github.com/gorilla/mux\"\n\t\"io\"\n\t\"net/http\"\n\t\"os\"\n)\n\nconst uploadHTML = `\n<html>  \n  <head>  \n    <title>选择文件</title>\n  </head>  \n  <body>  \n    <form enctype=\"multipart/form-data\" action=\"/\" method=\"post\">  \n      <input type=\"file\" name=\"uploadfile\" />  \n      <input type=\"submit\" value=\"上传文件\" />  \n    </form>  \n  </body>  \n</html>`\n\nconst destLocalPath = \"/data/files/\"\n\nfunc index(w http.ResponseWriter, r *http.Request) {\n\tw.Write([]byte(uploadHTML))\n}\n\nfunc upload(w http.ResponseWriter, r *http.Request) {\n\tif r.Method == \"GET\" {\n\t\tindex(w, r)\n\t\treturn\n\t}\n\n\tr.ParseMultipartForm(32 << 20) // max memory is set to 32MB\n\tclientfd, handler, err := r.FormFile(\"uploadfile\")\n\tif err != nil {\n\t\tfmt.Println(err)\n\t\tw.Write([]byte(\"upload failed.\"))\n\t\treturn\n\t}\n\tdefer clientfd.Close()\n\n\tlocalpath := fmt.Sprintf(\"%s%s\", destLocalPath, handler.Filename)\n\tlocalfd, err := os.OpenFile(localpath, os.O_WRONLY|os.O_CREATE, 0666)\n\tif err != nil {\n\t\tfmt.Println(err)\n\t\tw.Write([]byte(\"upload failed.\"))\n\t\treturn\n\t}\n\tdefer localfd.Close()\n\n\tio.Copy(localfd, clientfd)\n\tw.Write([]byte(\"upload finish.\"))\n}\n\nfunc newRouter() http.Handler {\n\thdl := mux.NewRouter()\n\thdl.HandleFunc(\"/\", upload)\n\n\treturn hdl\n}\n\nfunc main() {\n\thttp.ListenAndServe(\":8877\", newRouter())\n}\n```\n\n假如需要在接收文件的时候计算文件hash值， 应该如何做呢？<br>\n根据io.TeeReader库，可以在文件上传过程中自动计算hash值, 完整代码修改为:\n\n```golang\npackage main\n\nimport (\n\t\"crypto/sha1\"\n\t\"encoding/hex\"\n\t\"fmt\"\n\t\"github.com/gorilla/mux\"\n\t\"io\"\n\t\"net/http\"\n\t\"os\"\n)\n\nconst uploadHTML = `\n<html>  \n  <head>  \n    <title>选择文件</title>\n  </head>  \n  <body>  \n    <form enctype=\"multipart/form-data\" action=\"/\" method=\"post\">  \n      <input type=\"file\" name=\"uploadfile\" />  \n      <input type=\"submit\" value=\"上传文件\" />  \n    </form>  \n  </body>  \n</html>`\n\nconst destLocalPath = \"/data/files/\"\n\nfunc index(w http.ResponseWriter, r *http.Request) {\n\tw.Write([]byte(uploadHTML))\n}\n\nfunc upload(w http.ResponseWriter, r *http.Request) {\n\tif r.Method == \"GET\" {\n\t\tindex(w, r)\n\t\treturn\n\t}\n\n\tr.ParseMultipartForm(32 << 20) // max memory is set to 32MB\n\tclientfd, handler, err := r.FormFile(\"uploadfile\")\n\tif err != nil {\n\t\tfmt.Println(err)\n\t\tw.Write([]byte(\"upload failed.\"))\n\t\treturn\n\t}\n\tdefer clientfd.Close()\n\n\tlocalpath := fmt.Sprintf(\"%s%s\", destLocalPath, handler.Filename)\n\tlocalfd, err := os.OpenFile(localpath, os.O_WRONLY|os.O_CREATE, 0666)\n\tif err != nil {\n\t\tfmt.Println(err)\n\t\tw.Write([]byte(\"upload failed.\"))\n\t\treturn\n\t}\n\tdefer localfd.Close()\n\n\t// 利用io.TeeReader在读取文件内容时计算hash值\n\tfhash := sha1.New()\n\tio.Copy(localfd, io.TeeReader(clientfd, fhash))\n\thstr := hex.EncodeToString(fhash.Sum(nil))\n\tw.Write([]byte(fmt.Sprintf(\"upload finish:%s\", hstr)))\n}\n\nfunc newRouter() http.Handler {\n\thdl := mux.NewRouter()\n\thdl.HandleFunc(\"/\", upload)\n\n\treturn hdl\n}\n\nfunc main() {\n\thttp.ListenAndServe(\":8877\", newRouter())\n}\n```\n","source":"_posts/golang/golang-simple-uploadsrv.md","raw":"---\ntitle: '[golang]简单文件上传服务'\ndate: 2017-09-07 18:51:21\ntags: golang\n---\n\n利用net/http库及gorilla/mux库实现了一个简单的文件上传服务,<br>\n示例如下:\n<!--more-->\n\n```golang\npackage main\n\nimport (\n\t\"fmt\"\n\t\"github.com/gorilla/mux\"\n\t\"io\"\n\t\"net/http\"\n\t\"os\"\n)\n\nconst uploadHTML = `\n<html>  \n  <head>  \n    <title>选择文件</title>\n  </head>  \n  <body>  \n    <form enctype=\"multipart/form-data\" action=\"/\" method=\"post\">  \n      <input type=\"file\" name=\"uploadfile\" />  \n      <input type=\"submit\" value=\"上传文件\" />  \n    </form>  \n  </body>  \n</html>`\n\nconst destLocalPath = \"/data/files/\"\n\nfunc index(w http.ResponseWriter, r *http.Request) {\n\tw.Write([]byte(uploadHTML))\n}\n\nfunc upload(w http.ResponseWriter, r *http.Request) {\n\tif r.Method == \"GET\" {\n\t\tindex(w, r)\n\t\treturn\n\t}\n\n\tr.ParseMultipartForm(32 << 20) // max memory is set to 32MB\n\tclientfd, handler, err := r.FormFile(\"uploadfile\")\n\tif err != nil {\n\t\tfmt.Println(err)\n\t\tw.Write([]byte(\"upload failed.\"))\n\t\treturn\n\t}\n\tdefer clientfd.Close()\n\n\tlocalpath := fmt.Sprintf(\"%s%s\", destLocalPath, handler.Filename)\n\tlocalfd, err := os.OpenFile(localpath, os.O_WRONLY|os.O_CREATE, 0666)\n\tif err != nil {\n\t\tfmt.Println(err)\n\t\tw.Write([]byte(\"upload failed.\"))\n\t\treturn\n\t}\n\tdefer localfd.Close()\n\n\tio.Copy(localfd, clientfd)\n\tw.Write([]byte(\"upload finish.\"))\n}\n\nfunc newRouter() http.Handler {\n\thdl := mux.NewRouter()\n\thdl.HandleFunc(\"/\", upload)\n\n\treturn hdl\n}\n\nfunc main() {\n\thttp.ListenAndServe(\":8877\", newRouter())\n}\n```\n\n假如需要在接收文件的时候计算文件hash值， 应该如何做呢？<br>\n根据io.TeeReader库，可以在文件上传过程中自动计算hash值, 完整代码修改为:\n\n```golang\npackage main\n\nimport (\n\t\"crypto/sha1\"\n\t\"encoding/hex\"\n\t\"fmt\"\n\t\"github.com/gorilla/mux\"\n\t\"io\"\n\t\"net/http\"\n\t\"os\"\n)\n\nconst uploadHTML = `\n<html>  \n  <head>  \n    <title>选择文件</title>\n  </head>  \n  <body>  \n    <form enctype=\"multipart/form-data\" action=\"/\" method=\"post\">  \n      <input type=\"file\" name=\"uploadfile\" />  \n      <input type=\"submit\" value=\"上传文件\" />  \n    </form>  \n  </body>  \n</html>`\n\nconst destLocalPath = \"/data/files/\"\n\nfunc index(w http.ResponseWriter, r *http.Request) {\n\tw.Write([]byte(uploadHTML))\n}\n\nfunc upload(w http.ResponseWriter, r *http.Request) {\n\tif r.Method == \"GET\" {\n\t\tindex(w, r)\n\t\treturn\n\t}\n\n\tr.ParseMultipartForm(32 << 20) // max memory is set to 32MB\n\tclientfd, handler, err := r.FormFile(\"uploadfile\")\n\tif err != nil {\n\t\tfmt.Println(err)\n\t\tw.Write([]byte(\"upload failed.\"))\n\t\treturn\n\t}\n\tdefer clientfd.Close()\n\n\tlocalpath := fmt.Sprintf(\"%s%s\", destLocalPath, handler.Filename)\n\tlocalfd, err := os.OpenFile(localpath, os.O_WRONLY|os.O_CREATE, 0666)\n\tif err != nil {\n\t\tfmt.Println(err)\n\t\tw.Write([]byte(\"upload failed.\"))\n\t\treturn\n\t}\n\tdefer localfd.Close()\n\n\t// 利用io.TeeReader在读取文件内容时计算hash值\n\tfhash := sha1.New()\n\tio.Copy(localfd, io.TeeReader(clientfd, fhash))\n\thstr := hex.EncodeToString(fhash.Sum(nil))\n\tw.Write([]byte(fmt.Sprintf(\"upload finish:%s\", hstr)))\n}\n\nfunc newRouter() http.Handler {\n\thdl := mux.NewRouter()\n\thdl.HandleFunc(\"/\", upload)\n\n\treturn hdl\n}\n\nfunc main() {\n\thttp.ListenAndServe(\":8877\", newRouter())\n}\n```\n","slug":"golang/golang-simple-uploadsrv","published":1,"updated":"2017-09-08T04:19:20.025Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj84nao2r000f7v4dzfnqvhcc","content":"<p>利用net/http库及gorilla/mux库实现了一个简单的文件上传服务,<br><br>示例如下:<br><a id=\"more\"></a></p>\n<figure class=\"highlight golang\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">package</span> main</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">import</span> (</div><div class=\"line\">\t<span class=\"string\">\"fmt\"</span></div><div class=\"line\">\t<span class=\"string\">\"github.com/gorilla/mux\"</span></div><div class=\"line\">\t<span class=\"string\">\"io\"</span></div><div class=\"line\">\t<span class=\"string\">\"net/http\"</span></div><div class=\"line\">\t<span class=\"string\">\"os\"</span></div><div class=\"line\">)</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">const</span> uploadHTML = <span class=\"string\">`</span></div><div class=\"line\">&lt;html&gt;  </div><div class=\"line\">  &lt;head&gt;  </div><div class=\"line\">    &lt;title&gt;选择文件&lt;/title&gt;</div><div class=\"line\">  &lt;/head&gt;  </div><div class=\"line\">  &lt;body&gt;  </div><div class=\"line\">    &lt;form enctype=\"multipart/form-data\" action=\"/\" method=\"post\"&gt;  </div><div class=\"line\">      &lt;input type=\"file\" name=\"uploadfile\" /&gt;  </div><div class=\"line\">      &lt;input type=\"submit\" value=\"上传文件\" /&gt;  </div><div class=\"line\">    &lt;/form&gt;  </div><div class=\"line\">  &lt;/body&gt;  </div><div class=\"line\">&lt;/html&gt;`</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">const</span> destLocalPath = <span class=\"string\">\"/data/files/\"</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">index</span><span class=\"params\">(w http.ResponseWriter, r *http.Request)</span></span> &#123;</div><div class=\"line\">\tw.Write([]<span class=\"keyword\">byte</span>(uploadHTML))</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">upload</span><span class=\"params\">(w http.ResponseWriter, r *http.Request)</span></span> &#123;</div><div class=\"line\">\t<span class=\"keyword\">if</span> r.Method == <span class=\"string\">\"GET\"</span> &#123;</div><div class=\"line\">\t\tindex(w, r)</div><div class=\"line\">\t\t<span class=\"keyword\">return</span></div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\tr.ParseMultipartForm(<span class=\"number\">32</span> &lt;&lt; <span class=\"number\">20</span>) <span class=\"comment\">// max memory is set to 32MB</span></div><div class=\"line\">\tclientfd, handler, err := r.FormFile(<span class=\"string\">\"uploadfile\"</span>)</div><div class=\"line\">\t<span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</div><div class=\"line\">\t\tfmt.Println(err)</div><div class=\"line\">\t\tw.Write([]<span class=\"keyword\">byte</span>(<span class=\"string\">\"upload failed.\"</span>))</div><div class=\"line\">\t\t<span class=\"keyword\">return</span></div><div class=\"line\">\t&#125;</div><div class=\"line\">\t<span class=\"keyword\">defer</span> clientfd.Close()</div><div class=\"line\"></div><div class=\"line\">\tlocalpath := fmt.Sprintf(<span class=\"string\">\"%s%s\"</span>, destLocalPath, handler.Filename)</div><div class=\"line\">\tlocalfd, err := os.OpenFile(localpath, os.O_WRONLY|os.O_CREATE, <span class=\"number\">0666</span>)</div><div class=\"line\">\t<span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</div><div class=\"line\">\t\tfmt.Println(err)</div><div class=\"line\">\t\tw.Write([]<span class=\"keyword\">byte</span>(<span class=\"string\">\"upload failed.\"</span>))</div><div class=\"line\">\t\t<span class=\"keyword\">return</span></div><div class=\"line\">\t&#125;</div><div class=\"line\">\t<span class=\"keyword\">defer</span> localfd.Close()</div><div class=\"line\"></div><div class=\"line\">\tio.Copy(localfd, clientfd)</div><div class=\"line\">\tw.Write([]<span class=\"keyword\">byte</span>(<span class=\"string\">\"upload finish.\"</span>))</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">newRouter</span><span class=\"params\">()</span> <span class=\"title\">http</span>.<span class=\"title\">Handler</span></span> &#123;</div><div class=\"line\">\thdl := mux.NewRouter()</div><div class=\"line\">\thdl.HandleFunc(<span class=\"string\">\"/\"</span>, upload)</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"keyword\">return</span> hdl</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</div><div class=\"line\">\thttp.ListenAndServe(<span class=\"string\">\":8877\"</span>, newRouter())</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>假如需要在接收文件的时候计算文件hash值， 应该如何做呢？<br><br>根据io.TeeReader库，可以在文件上传过程中自动计算hash值, 完整代码修改为:</p>\n<figure class=\"highlight golang\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">package</span> main</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">import</span> (</div><div class=\"line\">\t<span class=\"string\">\"crypto/sha1\"</span></div><div class=\"line\">\t<span class=\"string\">\"encoding/hex\"</span></div><div class=\"line\">\t<span class=\"string\">\"fmt\"</span></div><div class=\"line\">\t<span class=\"string\">\"github.com/gorilla/mux\"</span></div><div class=\"line\">\t<span class=\"string\">\"io\"</span></div><div class=\"line\">\t<span class=\"string\">\"net/http\"</span></div><div class=\"line\">\t<span class=\"string\">\"os\"</span></div><div class=\"line\">)</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">const</span> uploadHTML = <span class=\"string\">`</span></div><div class=\"line\">&lt;html&gt;  </div><div class=\"line\">  &lt;head&gt;  </div><div class=\"line\">    &lt;title&gt;选择文件&lt;/title&gt;</div><div class=\"line\">  &lt;/head&gt;  </div><div class=\"line\">  &lt;body&gt;  </div><div class=\"line\">    &lt;form enctype=\"multipart/form-data\" action=\"/\" method=\"post\"&gt;  </div><div class=\"line\">      &lt;input type=\"file\" name=\"uploadfile\" /&gt;  </div><div class=\"line\">      &lt;input type=\"submit\" value=\"上传文件\" /&gt;  </div><div class=\"line\">    &lt;/form&gt;  </div><div class=\"line\">  &lt;/body&gt;  </div><div class=\"line\">&lt;/html&gt;`</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">const</span> destLocalPath = <span class=\"string\">\"/data/files/\"</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">index</span><span class=\"params\">(w http.ResponseWriter, r *http.Request)</span></span> &#123;</div><div class=\"line\">\tw.Write([]<span class=\"keyword\">byte</span>(uploadHTML))</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">upload</span><span class=\"params\">(w http.ResponseWriter, r *http.Request)</span></span> &#123;</div><div class=\"line\">\t<span class=\"keyword\">if</span> r.Method == <span class=\"string\">\"GET\"</span> &#123;</div><div class=\"line\">\t\tindex(w, r)</div><div class=\"line\">\t\t<span class=\"keyword\">return</span></div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\tr.ParseMultipartForm(<span class=\"number\">32</span> &lt;&lt; <span class=\"number\">20</span>) <span class=\"comment\">// max memory is set to 32MB</span></div><div class=\"line\">\tclientfd, handler, err := r.FormFile(<span class=\"string\">\"uploadfile\"</span>)</div><div class=\"line\">\t<span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</div><div class=\"line\">\t\tfmt.Println(err)</div><div class=\"line\">\t\tw.Write([]<span class=\"keyword\">byte</span>(<span class=\"string\">\"upload failed.\"</span>))</div><div class=\"line\">\t\t<span class=\"keyword\">return</span></div><div class=\"line\">\t&#125;</div><div class=\"line\">\t<span class=\"keyword\">defer</span> clientfd.Close()</div><div class=\"line\"></div><div class=\"line\">\tlocalpath := fmt.Sprintf(<span class=\"string\">\"%s%s\"</span>, destLocalPath, handler.Filename)</div><div class=\"line\">\tlocalfd, err := os.OpenFile(localpath, os.O_WRONLY|os.O_CREATE, <span class=\"number\">0666</span>)</div><div class=\"line\">\t<span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</div><div class=\"line\">\t\tfmt.Println(err)</div><div class=\"line\">\t\tw.Write([]<span class=\"keyword\">byte</span>(<span class=\"string\">\"upload failed.\"</span>))</div><div class=\"line\">\t\t<span class=\"keyword\">return</span></div><div class=\"line\">\t&#125;</div><div class=\"line\">\t<span class=\"keyword\">defer</span> localfd.Close()</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"comment\">// 利用io.TeeReader在读取文件内容时计算hash值</span></div><div class=\"line\">\tfhash := sha1.New()</div><div class=\"line\">\tio.Copy(localfd, io.TeeReader(clientfd, fhash))</div><div class=\"line\">\thstr := hex.EncodeToString(fhash.Sum(<span class=\"literal\">nil</span>))</div><div class=\"line\">\tw.Write([]<span class=\"keyword\">byte</span>(fmt.Sprintf(<span class=\"string\">\"upload finish:%s\"</span>, hstr)))</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">newRouter</span><span class=\"params\">()</span> <span class=\"title\">http</span>.<span class=\"title\">Handler</span></span> &#123;</div><div class=\"line\">\thdl := mux.NewRouter()</div><div class=\"line\">\thdl.HandleFunc(<span class=\"string\">\"/\"</span>, upload)</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"keyword\">return</span> hdl</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</div><div class=\"line\">\thttp.ListenAndServe(<span class=\"string\">\":8877\"</span>, newRouter())</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"<p>利用net/http库及gorilla/mux库实现了一个简单的文件上传服务,<br><br>示例如下:<br>","more":"</p>\n<figure class=\"highlight golang\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">package</span> main</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">import</span> (</div><div class=\"line\">\t<span class=\"string\">\"fmt\"</span></div><div class=\"line\">\t<span class=\"string\">\"github.com/gorilla/mux\"</span></div><div class=\"line\">\t<span class=\"string\">\"io\"</span></div><div class=\"line\">\t<span class=\"string\">\"net/http\"</span></div><div class=\"line\">\t<span class=\"string\">\"os\"</span></div><div class=\"line\">)</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">const</span> uploadHTML = <span class=\"string\">`</span></div><div class=\"line\">&lt;html&gt;  </div><div class=\"line\">  &lt;head&gt;  </div><div class=\"line\">    &lt;title&gt;选择文件&lt;/title&gt;</div><div class=\"line\">  &lt;/head&gt;  </div><div class=\"line\">  &lt;body&gt;  </div><div class=\"line\">    &lt;form enctype=\"multipart/form-data\" action=\"/\" method=\"post\"&gt;  </div><div class=\"line\">      &lt;input type=\"file\" name=\"uploadfile\" /&gt;  </div><div class=\"line\">      &lt;input type=\"submit\" value=\"上传文件\" /&gt;  </div><div class=\"line\">    &lt;/form&gt;  </div><div class=\"line\">  &lt;/body&gt;  </div><div class=\"line\">&lt;/html&gt;`</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">const</span> destLocalPath = <span class=\"string\">\"/data/files/\"</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">index</span><span class=\"params\">(w http.ResponseWriter, r *http.Request)</span></span> &#123;</div><div class=\"line\">\tw.Write([]<span class=\"keyword\">byte</span>(uploadHTML))</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">upload</span><span class=\"params\">(w http.ResponseWriter, r *http.Request)</span></span> &#123;</div><div class=\"line\">\t<span class=\"keyword\">if</span> r.Method == <span class=\"string\">\"GET\"</span> &#123;</div><div class=\"line\">\t\tindex(w, r)</div><div class=\"line\">\t\t<span class=\"keyword\">return</span></div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\tr.ParseMultipartForm(<span class=\"number\">32</span> &lt;&lt; <span class=\"number\">20</span>) <span class=\"comment\">// max memory is set to 32MB</span></div><div class=\"line\">\tclientfd, handler, err := r.FormFile(<span class=\"string\">\"uploadfile\"</span>)</div><div class=\"line\">\t<span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</div><div class=\"line\">\t\tfmt.Println(err)</div><div class=\"line\">\t\tw.Write([]<span class=\"keyword\">byte</span>(<span class=\"string\">\"upload failed.\"</span>))</div><div class=\"line\">\t\t<span class=\"keyword\">return</span></div><div class=\"line\">\t&#125;</div><div class=\"line\">\t<span class=\"keyword\">defer</span> clientfd.Close()</div><div class=\"line\"></div><div class=\"line\">\tlocalpath := fmt.Sprintf(<span class=\"string\">\"%s%s\"</span>, destLocalPath, handler.Filename)</div><div class=\"line\">\tlocalfd, err := os.OpenFile(localpath, os.O_WRONLY|os.O_CREATE, <span class=\"number\">0666</span>)</div><div class=\"line\">\t<span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</div><div class=\"line\">\t\tfmt.Println(err)</div><div class=\"line\">\t\tw.Write([]<span class=\"keyword\">byte</span>(<span class=\"string\">\"upload failed.\"</span>))</div><div class=\"line\">\t\t<span class=\"keyword\">return</span></div><div class=\"line\">\t&#125;</div><div class=\"line\">\t<span class=\"keyword\">defer</span> localfd.Close()</div><div class=\"line\"></div><div class=\"line\">\tio.Copy(localfd, clientfd)</div><div class=\"line\">\tw.Write([]<span class=\"keyword\">byte</span>(<span class=\"string\">\"upload finish.\"</span>))</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">newRouter</span><span class=\"params\">()</span> <span class=\"title\">http</span>.<span class=\"title\">Handler</span></span> &#123;</div><div class=\"line\">\thdl := mux.NewRouter()</div><div class=\"line\">\thdl.HandleFunc(<span class=\"string\">\"/\"</span>, upload)</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"keyword\">return</span> hdl</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</div><div class=\"line\">\thttp.ListenAndServe(<span class=\"string\">\":8877\"</span>, newRouter())</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>假如需要在接收文件的时候计算文件hash值， 应该如何做呢？<br><br>根据io.TeeReader库，可以在文件上传过程中自动计算hash值, 完整代码修改为:</p>\n<figure class=\"highlight golang\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">package</span> main</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">import</span> (</div><div class=\"line\">\t<span class=\"string\">\"crypto/sha1\"</span></div><div class=\"line\">\t<span class=\"string\">\"encoding/hex\"</span></div><div class=\"line\">\t<span class=\"string\">\"fmt\"</span></div><div class=\"line\">\t<span class=\"string\">\"github.com/gorilla/mux\"</span></div><div class=\"line\">\t<span class=\"string\">\"io\"</span></div><div class=\"line\">\t<span class=\"string\">\"net/http\"</span></div><div class=\"line\">\t<span class=\"string\">\"os\"</span></div><div class=\"line\">)</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">const</span> uploadHTML = <span class=\"string\">`</span></div><div class=\"line\">&lt;html&gt;  </div><div class=\"line\">  &lt;head&gt;  </div><div class=\"line\">    &lt;title&gt;选择文件&lt;/title&gt;</div><div class=\"line\">  &lt;/head&gt;  </div><div class=\"line\">  &lt;body&gt;  </div><div class=\"line\">    &lt;form enctype=\"multipart/form-data\" action=\"/\" method=\"post\"&gt;  </div><div class=\"line\">      &lt;input type=\"file\" name=\"uploadfile\" /&gt;  </div><div class=\"line\">      &lt;input type=\"submit\" value=\"上传文件\" /&gt;  </div><div class=\"line\">    &lt;/form&gt;  </div><div class=\"line\">  &lt;/body&gt;  </div><div class=\"line\">&lt;/html&gt;`</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">const</span> destLocalPath = <span class=\"string\">\"/data/files/\"</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">index</span><span class=\"params\">(w http.ResponseWriter, r *http.Request)</span></span> &#123;</div><div class=\"line\">\tw.Write([]<span class=\"keyword\">byte</span>(uploadHTML))</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">upload</span><span class=\"params\">(w http.ResponseWriter, r *http.Request)</span></span> &#123;</div><div class=\"line\">\t<span class=\"keyword\">if</span> r.Method == <span class=\"string\">\"GET\"</span> &#123;</div><div class=\"line\">\t\tindex(w, r)</div><div class=\"line\">\t\t<span class=\"keyword\">return</span></div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\tr.ParseMultipartForm(<span class=\"number\">32</span> &lt;&lt; <span class=\"number\">20</span>) <span class=\"comment\">// max memory is set to 32MB</span></div><div class=\"line\">\tclientfd, handler, err := r.FormFile(<span class=\"string\">\"uploadfile\"</span>)</div><div class=\"line\">\t<span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</div><div class=\"line\">\t\tfmt.Println(err)</div><div class=\"line\">\t\tw.Write([]<span class=\"keyword\">byte</span>(<span class=\"string\">\"upload failed.\"</span>))</div><div class=\"line\">\t\t<span class=\"keyword\">return</span></div><div class=\"line\">\t&#125;</div><div class=\"line\">\t<span class=\"keyword\">defer</span> clientfd.Close()</div><div class=\"line\"></div><div class=\"line\">\tlocalpath := fmt.Sprintf(<span class=\"string\">\"%s%s\"</span>, destLocalPath, handler.Filename)</div><div class=\"line\">\tlocalfd, err := os.OpenFile(localpath, os.O_WRONLY|os.O_CREATE, <span class=\"number\">0666</span>)</div><div class=\"line\">\t<span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</div><div class=\"line\">\t\tfmt.Println(err)</div><div class=\"line\">\t\tw.Write([]<span class=\"keyword\">byte</span>(<span class=\"string\">\"upload failed.\"</span>))</div><div class=\"line\">\t\t<span class=\"keyword\">return</span></div><div class=\"line\">\t&#125;</div><div class=\"line\">\t<span class=\"keyword\">defer</span> localfd.Close()</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"comment\">// 利用io.TeeReader在读取文件内容时计算hash值</span></div><div class=\"line\">\tfhash := sha1.New()</div><div class=\"line\">\tio.Copy(localfd, io.TeeReader(clientfd, fhash))</div><div class=\"line\">\thstr := hex.EncodeToString(fhash.Sum(<span class=\"literal\">nil</span>))</div><div class=\"line\">\tw.Write([]<span class=\"keyword\">byte</span>(fmt.Sprintf(<span class=\"string\">\"upload finish:%s\"</span>, hstr)))</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">newRouter</span><span class=\"params\">()</span> <span class=\"title\">http</span>.<span class=\"title\">Handler</span></span> &#123;</div><div class=\"line\">\thdl := mux.NewRouter()</div><div class=\"line\">\thdl.HandleFunc(<span class=\"string\">\"/\"</span>, upload)</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"keyword\">return</span> hdl</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</div><div class=\"line\">\thttp.ListenAndServe(<span class=\"string\">\":8877\"</span>, newRouter())</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>"},{"title":"[golang]json-rpc","date":"2016-03-12T10:09:09.000Z","_content":"\n#### 关于JSON-RPC\nJSON-RPC是一个远程调用协议, 还是轻量级的, 简单易用。\n在请求远程调用的时候, 我们可以这样定义请求体:\n```json\n{\n    \"jsonrpc\": \"2.0\",\n    \"method\": \"login\",\n    \"params\": {\"name\":\"momo\", \"passwd\":\"xxxxxx\"},\n    \"id\": 0\n}\n```\n<!--more-->\n关于其中几个参数, 有如下说明:\n```\njsonrpc: 协议的版本号(1.0版本是不带该参数, 2.0版带该参数并且值为\"2.0\")\nmethod:  所要调用的方法名\nparams:  所调用方法接收的参数(/列表)\nid:      当次请求的标识码(服务端响应体内应包含相同的id)\n```\n更详细的说明, 可以参考这里: http://wiki.geekdream.com/Specification/json-rpc_2.0.html\n\n#### Golang JSON-RPC\n\ngolang中有rpc包:<br>\n***net/rpc*** <br>实现了最基本的rpc调用，默认通过HTTP协议传输gob数据来实现远程调用。<br>\n***net/rpc/jsonrpc*** <br>实现了JSON-RPC协议， 也就实现了对json数据的序列化和反序列化。\n\n- 服务端示例\n\n```golang\npackage main\n\nimport (\n\t\"errors\"\n\t\"log\"\n\t\"net\"\n\t\"net/rpc\"\n\t\"net/rpc/jsonrpc\"\n)\n\n// RpcObj和ReplyObj为服务端/客户端之间传输的数据结构体\n// C/S双方都能处理这两个数据类型\ntype RpcObj struct {\n\tA, B int\n}\n\ntype ReplyObj struct {\n\tC int\n}\n\ntype Arith int\n\n// 服务端的响应结构体\ntype ArithAddResp struct {\n\tId     interface{} `json:\"id\"`\n\tResult ReplyObj    `json:\"result\"`\n\tError  interface{} `json:\"error\"`\n}\n\n// 符合 func (t T) funname(t1 *T1, t2 *T2) error 类型的方法都可以注册到rpc中\nfunc (t *Arith) Add(args *RpcObj, reply *ReplyObj) error {\n\treply.C = args.A + args.B\n\treturn nil\n}\n\nfunc (t *Arith) Mul(args *RpcObj, reply *ReplyObj) error {\n\treply.C = args.A * args.B\n\treturn nil\n}\n\nfunc (t *Arith) Div(args *RpcObj, reply *ReplyObj) error {\n\tif args.B == 0 {\n\t\treturn errors.New(\"divide by zero\")\n\t}\n\treply.C = args.A / args.B\n\treturn nil\n}\n\nfunc (t *Arith) Error(args *RpcObj, reply *ReplyObj) error {\n\tpanic(\"ERROR\")\n}\n\nfunc main() {\n\tarith := new(Arith)\n\t// 新建rpc server\n\tserver := rpc.NewServer()\n\t// 注册handler处理器\n\tserver.Register(arith)\n\t// 监听8080端口\n\tl, e := net.Listen(\"tcp\", \":8080\")\n\tif e != nil {\n\t\tlog.Fatal(\"listen error:\", e)\n\t}\n\n\tlog.Println(\"RPC server started...\")\n\tfor {\n\t\t// 接收客户端请求\n\t\tconn, err := l.Accept()\n\t\tif err != nil {\n\t\t\tlog.Fatal(err)\n\t\t}\n\n\t\t// 在goroutine中处理请求\n\t\t// 通过http.Conn创建一个jsonrpc编码器, 并将其传递到rpc编码器\n\t\tgo server.ServeCodec(jsonrpc.NewServerCodec(conn))\n\t}\n\tlog.Println(\"RPC server is shutdown...\")\n}\n\n```\n\n- 客户端示例\n\n```golang\npackage main\n\nimport (\n\t\"log\"\n\t\"net\"\n\t\"net/rpc/jsonrpc\"\n)\n\ntype RpcObj struct {\n\tA, B int\n}\n\ntype ReplyObj struct {\n\tC int\n}\n\ntype Arith int\n\ntype ArithAddResp struct {\n\tId     interface{} `json:\"id\"`\n\tResult ReplyObj    `json:\"result\"`\n\tError  interface{} `json:\"error\"`\n}\n\nfunc main() {\n\tconn, err := net.Dial(\"tcp\", \"localhost:8080\")\n\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\tdefer conn.Close()\n\n\tc := jsonrpc.NewClient(conn)\n\n\tvar reply ReplyObj\n\tvar args *RpcObj\n\tfor i := 5; i >= 0; i-- {\n\t\t// 往RPC调用传递参数\n\t\targs = &RpcObj{5, i}\n\n\t\t// 远程调用Arith.Mul方法\n\t\terr = c.Call(\"Arith.Mul\", args, &reply)\n\t\tif err != nil {\n\t\t\tlog.Fatal(\"Exited as arith error:\", err)\n\t\t}\n\t\tlog.Printf(\"Arith: %d * %d = %v\\n\", args.A, args.B, reply.C)\n\n\t\t// 远程调用Arith.Div方法\n\t\terr = c.Call(\"Arith.Div\", args, &reply)\n\t\tif err != nil {\n\t\t\tlog.Fatal(\"Exited as arith error:\", err)\n\t\t}\n\t\tlog.Printf(\"Arith: %d / %d = %v\\n\", args.A, args.B, reply.C)\n\n\t\t// 华丽的分割线\n\t\tlog.Printf(\"\\033[33m%s\\033[m\\n\", \"---------------\")\n\t}\n}\n```\n\n- 示例效果\n\n```bash\nroot@XIAOMO:/data/apps/demo# go run rpccli.go\n2016/03/28 16:17:41 Arith: 5 * 5 = 25\n2016/03/28 16:17:41 Arith: 5 / 5 = 1\n2016/03/28 16:17:41 ---------------\n2016/03/28 16:17:41 Arith: 5 * 4 = 20\n2016/03/28 16:17:41 Arith: 5 / 4 = 1\n2016/03/28 16:17:41 ---------------\n2016/03/28 16:17:41 Arith: 5 * 3 = 15\n2016/03/28 16:17:41 Arith: 5 / 3 = 1\n2016/03/28 16:17:41 ---------------\n2016/03/28 16:17:41 Arith: 5 * 2 = 10\n2016/03/28 16:17:41 Arith: 5 / 2 = 2\n2016/03/28 16:17:41 ---------------\n2016/03/28 16:17:41 Arith: 5 * 1 = 5\n2016/03/28 16:17:41 Arith: 5 / 1 = 5\n2016/03/28 16:17:41 ---------------\n2016/03/28 16:17:41 Arith: 5 * 0 = 0\n2016/03/28 16:17:41 Exited as arith error:divide by zero\nexit status 1\n```\n","source":"_posts/golang/golang-json-rpc.md","raw":"---\ntitle: '[golang]json-rpc'\ndate: 2016-03-12 18:09:09\ntags: golang\n---\n\n#### 关于JSON-RPC\nJSON-RPC是一个远程调用协议, 还是轻量级的, 简单易用。\n在请求远程调用的时候, 我们可以这样定义请求体:\n```json\n{\n    \"jsonrpc\": \"2.0\",\n    \"method\": \"login\",\n    \"params\": {\"name\":\"momo\", \"passwd\":\"xxxxxx\"},\n    \"id\": 0\n}\n```\n<!--more-->\n关于其中几个参数, 有如下说明:\n```\njsonrpc: 协议的版本号(1.0版本是不带该参数, 2.0版带该参数并且值为\"2.0\")\nmethod:  所要调用的方法名\nparams:  所调用方法接收的参数(/列表)\nid:      当次请求的标识码(服务端响应体内应包含相同的id)\n```\n更详细的说明, 可以参考这里: http://wiki.geekdream.com/Specification/json-rpc_2.0.html\n\n#### Golang JSON-RPC\n\ngolang中有rpc包:<br>\n***net/rpc*** <br>实现了最基本的rpc调用，默认通过HTTP协议传输gob数据来实现远程调用。<br>\n***net/rpc/jsonrpc*** <br>实现了JSON-RPC协议， 也就实现了对json数据的序列化和反序列化。\n\n- 服务端示例\n\n```golang\npackage main\n\nimport (\n\t\"errors\"\n\t\"log\"\n\t\"net\"\n\t\"net/rpc\"\n\t\"net/rpc/jsonrpc\"\n)\n\n// RpcObj和ReplyObj为服务端/客户端之间传输的数据结构体\n// C/S双方都能处理这两个数据类型\ntype RpcObj struct {\n\tA, B int\n}\n\ntype ReplyObj struct {\n\tC int\n}\n\ntype Arith int\n\n// 服务端的响应结构体\ntype ArithAddResp struct {\n\tId     interface{} `json:\"id\"`\n\tResult ReplyObj    `json:\"result\"`\n\tError  interface{} `json:\"error\"`\n}\n\n// 符合 func (t T) funname(t1 *T1, t2 *T2) error 类型的方法都可以注册到rpc中\nfunc (t *Arith) Add(args *RpcObj, reply *ReplyObj) error {\n\treply.C = args.A + args.B\n\treturn nil\n}\n\nfunc (t *Arith) Mul(args *RpcObj, reply *ReplyObj) error {\n\treply.C = args.A * args.B\n\treturn nil\n}\n\nfunc (t *Arith) Div(args *RpcObj, reply *ReplyObj) error {\n\tif args.B == 0 {\n\t\treturn errors.New(\"divide by zero\")\n\t}\n\treply.C = args.A / args.B\n\treturn nil\n}\n\nfunc (t *Arith) Error(args *RpcObj, reply *ReplyObj) error {\n\tpanic(\"ERROR\")\n}\n\nfunc main() {\n\tarith := new(Arith)\n\t// 新建rpc server\n\tserver := rpc.NewServer()\n\t// 注册handler处理器\n\tserver.Register(arith)\n\t// 监听8080端口\n\tl, e := net.Listen(\"tcp\", \":8080\")\n\tif e != nil {\n\t\tlog.Fatal(\"listen error:\", e)\n\t}\n\n\tlog.Println(\"RPC server started...\")\n\tfor {\n\t\t// 接收客户端请求\n\t\tconn, err := l.Accept()\n\t\tif err != nil {\n\t\t\tlog.Fatal(err)\n\t\t}\n\n\t\t// 在goroutine中处理请求\n\t\t// 通过http.Conn创建一个jsonrpc编码器, 并将其传递到rpc编码器\n\t\tgo server.ServeCodec(jsonrpc.NewServerCodec(conn))\n\t}\n\tlog.Println(\"RPC server is shutdown...\")\n}\n\n```\n\n- 客户端示例\n\n```golang\npackage main\n\nimport (\n\t\"log\"\n\t\"net\"\n\t\"net/rpc/jsonrpc\"\n)\n\ntype RpcObj struct {\n\tA, B int\n}\n\ntype ReplyObj struct {\n\tC int\n}\n\ntype Arith int\n\ntype ArithAddResp struct {\n\tId     interface{} `json:\"id\"`\n\tResult ReplyObj    `json:\"result\"`\n\tError  interface{} `json:\"error\"`\n}\n\nfunc main() {\n\tconn, err := net.Dial(\"tcp\", \"localhost:8080\")\n\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\tdefer conn.Close()\n\n\tc := jsonrpc.NewClient(conn)\n\n\tvar reply ReplyObj\n\tvar args *RpcObj\n\tfor i := 5; i >= 0; i-- {\n\t\t// 往RPC调用传递参数\n\t\targs = &RpcObj{5, i}\n\n\t\t// 远程调用Arith.Mul方法\n\t\terr = c.Call(\"Arith.Mul\", args, &reply)\n\t\tif err != nil {\n\t\t\tlog.Fatal(\"Exited as arith error:\", err)\n\t\t}\n\t\tlog.Printf(\"Arith: %d * %d = %v\\n\", args.A, args.B, reply.C)\n\n\t\t// 远程调用Arith.Div方法\n\t\terr = c.Call(\"Arith.Div\", args, &reply)\n\t\tif err != nil {\n\t\t\tlog.Fatal(\"Exited as arith error:\", err)\n\t\t}\n\t\tlog.Printf(\"Arith: %d / %d = %v\\n\", args.A, args.B, reply.C)\n\n\t\t// 华丽的分割线\n\t\tlog.Printf(\"\\033[33m%s\\033[m\\n\", \"---------------\")\n\t}\n}\n```\n\n- 示例效果\n\n```bash\nroot@XIAOMO:/data/apps/demo# go run rpccli.go\n2016/03/28 16:17:41 Arith: 5 * 5 = 25\n2016/03/28 16:17:41 Arith: 5 / 5 = 1\n2016/03/28 16:17:41 ---------------\n2016/03/28 16:17:41 Arith: 5 * 4 = 20\n2016/03/28 16:17:41 Arith: 5 / 4 = 1\n2016/03/28 16:17:41 ---------------\n2016/03/28 16:17:41 Arith: 5 * 3 = 15\n2016/03/28 16:17:41 Arith: 5 / 3 = 1\n2016/03/28 16:17:41 ---------------\n2016/03/28 16:17:41 Arith: 5 * 2 = 10\n2016/03/28 16:17:41 Arith: 5 / 2 = 2\n2016/03/28 16:17:41 ---------------\n2016/03/28 16:17:41 Arith: 5 * 1 = 5\n2016/03/28 16:17:41 Arith: 5 / 1 = 5\n2016/03/28 16:17:41 ---------------\n2016/03/28 16:17:41 Arith: 5 * 0 = 0\n2016/03/28 16:17:41 Exited as arith error:divide by zero\nexit status 1\n```\n","slug":"golang/golang-json-rpc","published":1,"updated":"2017-08-10T10:10:16.094Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj84nao2v000g7v4d2bv24okn","content":"<h4 id=\"关于JSON-RPC\"><a href=\"#关于JSON-RPC\" class=\"headerlink\" title=\"关于JSON-RPC\"></a>关于JSON-RPC</h4><p>JSON-RPC是一个远程调用协议, 还是轻量级的, 简单易用。<br>在请求远程调用的时候, 我们可以这样定义请求体:<br><figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"attr\">\"jsonrpc\"</span>: <span class=\"string\">\"2.0\"</span>,</div><div class=\"line\">    <span class=\"attr\">\"method\"</span>: <span class=\"string\">\"login\"</span>,</div><div class=\"line\">    <span class=\"attr\">\"params\"</span>: &#123;<span class=\"attr\">\"name\"</span>:<span class=\"string\">\"momo\"</span>, <span class=\"attr\">\"passwd\"</span>:<span class=\"string\">\"xxxxxx\"</span>&#125;,</div><div class=\"line\">    <span class=\"attr\">\"id\"</span>: <span class=\"number\">0</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<a id=\"more\"></a>\n<p>关于其中几个参数, 有如下说明:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">jsonrpc: 协议的版本号(1.0版本是不带该参数, 2.0版带该参数并且值为&quot;2.0&quot;)</div><div class=\"line\">method:  所要调用的方法名</div><div class=\"line\">params:  所调用方法接收的参数(/列表)</div><div class=\"line\">id:      当次请求的标识码(服务端响应体内应包含相同的id)</div></pre></td></tr></table></figure></p>\n<p>更详细的说明, 可以参考这里: <a href=\"http://wiki.geekdream.com/Specification/json-rpc_2.0.html\" target=\"_blank\" rel=\"external\">http://wiki.geekdream.com/Specification/json-rpc_2.0.html</a></p>\n<h4 id=\"Golang-JSON-RPC\"><a href=\"#Golang-JSON-RPC\" class=\"headerlink\" title=\"Golang JSON-RPC\"></a>Golang JSON-RPC</h4><p>golang中有rpc包:<br><br><strong><em>net/rpc</em></strong> <br>实现了最基本的rpc调用，默认通过HTTP协议传输gob数据来实现远程调用。<br><br><strong><em>net/rpc/jsonrpc</em></strong> <br>实现了JSON-RPC协议， 也就实现了对json数据的序列化和反序列化。</p>\n<ul>\n<li>服务端示例</li>\n</ul>\n<figure class=\"highlight golang\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">package</span> main</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">import</span> (</div><div class=\"line\">\t<span class=\"string\">\"errors\"</span></div><div class=\"line\">\t<span class=\"string\">\"log\"</span></div><div class=\"line\">\t<span class=\"string\">\"net\"</span></div><div class=\"line\">\t<span class=\"string\">\"net/rpc\"</span></div><div class=\"line\">\t<span class=\"string\">\"net/rpc/jsonrpc\"</span></div><div class=\"line\">)</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// RpcObj和ReplyObj为服务端/客户端之间传输的数据结构体</span></div><div class=\"line\"><span class=\"comment\">// C/S双方都能处理这两个数据类型</span></div><div class=\"line\"><span class=\"keyword\">type</span> RpcObj <span class=\"keyword\">struct</span> &#123;</div><div class=\"line\">\tA, B <span class=\"keyword\">int</span></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">type</span> ReplyObj <span class=\"keyword\">struct</span> &#123;</div><div class=\"line\">\tC <span class=\"keyword\">int</span></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">type</span> Arith <span class=\"keyword\">int</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 服务端的响应结构体</span></div><div class=\"line\"><span class=\"keyword\">type</span> ArithAddResp <span class=\"keyword\">struct</span> &#123;</div><div class=\"line\">\tId     <span class=\"keyword\">interface</span>&#123;&#125; <span class=\"string\">`json:\"id\"`</span></div><div class=\"line\">\tResult ReplyObj    <span class=\"string\">`json:\"result\"`</span></div><div class=\"line\">\tError  <span class=\"keyword\">interface</span>&#123;&#125; <span class=\"string\">`json:\"error\"`</span></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 符合 func (t T) funname(t1 *T1, t2 *T2) error 类型的方法都可以注册到rpc中</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(t *Arith)</span> <span class=\"title\">Add</span><span class=\"params\">(args *RpcObj, reply *ReplyObj)</span> <span class=\"title\">error</span></span> &#123;</div><div class=\"line\">\treply.C = args.A + args.B</div><div class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"literal\">nil</span></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(t *Arith)</span> <span class=\"title\">Mul</span><span class=\"params\">(args *RpcObj, reply *ReplyObj)</span> <span class=\"title\">error</span></span> &#123;</div><div class=\"line\">\treply.C = args.A * args.B</div><div class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"literal\">nil</span></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(t *Arith)</span> <span class=\"title\">Div</span><span class=\"params\">(args *RpcObj, reply *ReplyObj)</span> <span class=\"title\">error</span></span> &#123;</div><div class=\"line\">\t<span class=\"keyword\">if</span> args.B == <span class=\"number\">0</span> &#123;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> errors.New(<span class=\"string\">\"divide by zero\"</span>)</div><div class=\"line\">\t&#125;</div><div class=\"line\">\treply.C = args.A / args.B</div><div class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"literal\">nil</span></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(t *Arith)</span> <span class=\"title\">Error</span><span class=\"params\">(args *RpcObj, reply *ReplyObj)</span> <span class=\"title\">error</span></span> &#123;</div><div class=\"line\">\t<span class=\"built_in\">panic</span>(<span class=\"string\">\"ERROR\"</span>)</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</div><div class=\"line\">\tarith := <span class=\"built_in\">new</span>(Arith)</div><div class=\"line\">\t<span class=\"comment\">// 新建rpc server</span></div><div class=\"line\">\tserver := rpc.NewServer()</div><div class=\"line\">\t<span class=\"comment\">// 注册handler处理器</span></div><div class=\"line\">\tserver.Register(arith)</div><div class=\"line\">\t<span class=\"comment\">// 监听8080端口</span></div><div class=\"line\">\tl, e := net.Listen(<span class=\"string\">\"tcp\"</span>, <span class=\"string\">\":8080\"</span>)</div><div class=\"line\">\t<span class=\"keyword\">if</span> e != <span class=\"literal\">nil</span> &#123;</div><div class=\"line\">\t\tlog.Fatal(<span class=\"string\">\"listen error:\"</span>, e)</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\tlog.Println(<span class=\"string\">\"RPC server started...\"</span>)</div><div class=\"line\">\t<span class=\"keyword\">for</span> &#123;</div><div class=\"line\">\t\t<span class=\"comment\">// 接收客户端请求</span></div><div class=\"line\">\t\tconn, err := l.Accept()</div><div class=\"line\">\t\t<span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</div><div class=\"line\">\t\t\tlog.Fatal(err)</div><div class=\"line\">\t\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t\t<span class=\"comment\">// 在goroutine中处理请求</span></div><div class=\"line\">\t\t<span class=\"comment\">// 通过http.Conn创建一个jsonrpc编码器, 并将其传递到rpc编码器</span></div><div class=\"line\">\t\t<span class=\"keyword\">go</span> server.ServeCodec(jsonrpc.NewServerCodec(conn))</div><div class=\"line\">\t&#125;</div><div class=\"line\">\tlog.Println(<span class=\"string\">\"RPC server is shutdown...\"</span>)</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<ul>\n<li>客户端示例</li>\n</ul>\n<figure class=\"highlight golang\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">package</span> main</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">import</span> (</div><div class=\"line\">\t<span class=\"string\">\"log\"</span></div><div class=\"line\">\t<span class=\"string\">\"net\"</span></div><div class=\"line\">\t<span class=\"string\">\"net/rpc/jsonrpc\"</span></div><div class=\"line\">)</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">type</span> RpcObj <span class=\"keyword\">struct</span> &#123;</div><div class=\"line\">\tA, B <span class=\"keyword\">int</span></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">type</span> ReplyObj <span class=\"keyword\">struct</span> &#123;</div><div class=\"line\">\tC <span class=\"keyword\">int</span></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">type</span> Arith <span class=\"keyword\">int</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">type</span> ArithAddResp <span class=\"keyword\">struct</span> &#123;</div><div class=\"line\">\tId     <span class=\"keyword\">interface</span>&#123;&#125; <span class=\"string\">`json:\"id\"`</span></div><div class=\"line\">\tResult ReplyObj    <span class=\"string\">`json:\"result\"`</span></div><div class=\"line\">\tError  <span class=\"keyword\">interface</span>&#123;&#125; <span class=\"string\">`json:\"error\"`</span></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</div><div class=\"line\">\tconn, err := net.Dial(<span class=\"string\">\"tcp\"</span>, <span class=\"string\">\"localhost:8080\"</span>)</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</div><div class=\"line\">\t\t<span class=\"built_in\">panic</span>(err)</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t<span class=\"keyword\">defer</span> conn.Close()</div><div class=\"line\"></div><div class=\"line\">\tc := jsonrpc.NewClient(conn)</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"keyword\">var</span> reply ReplyObj</div><div class=\"line\">\t<span class=\"keyword\">var</span> args *RpcObj</div><div class=\"line\">\t<span class=\"keyword\">for</span> i := <span class=\"number\">5</span>; i &gt;= <span class=\"number\">0</span>; i-- &#123;</div><div class=\"line\">\t\t<span class=\"comment\">// 往RPC调用传递参数</span></div><div class=\"line\">\t\targs = &amp;RpcObj&#123;<span class=\"number\">5</span>, i&#125;</div><div class=\"line\"></div><div class=\"line\">\t\t<span class=\"comment\">// 远程调用Arith.Mul方法</span></div><div class=\"line\">\t\terr = c.Call(<span class=\"string\">\"Arith.Mul\"</span>, args, &amp;reply)</div><div class=\"line\">\t\t<span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</div><div class=\"line\">\t\t\tlog.Fatal(<span class=\"string\">\"Exited as arith error:\"</span>, err)</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\tlog.Printf(<span class=\"string\">\"Arith: %d * %d = %v\\n\"</span>, args.A, args.B, reply.C)</div><div class=\"line\"></div><div class=\"line\">\t\t<span class=\"comment\">// 远程调用Arith.Div方法</span></div><div class=\"line\">\t\terr = c.Call(<span class=\"string\">\"Arith.Div\"</span>, args, &amp;reply)</div><div class=\"line\">\t\t<span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</div><div class=\"line\">\t\t\tlog.Fatal(<span class=\"string\">\"Exited as arith error:\"</span>, err)</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\tlog.Printf(<span class=\"string\">\"Arith: %d / %d = %v\\n\"</span>, args.A, args.B, reply.C)</div><div class=\"line\"></div><div class=\"line\">\t\t<span class=\"comment\">// 华丽的分割线</span></div><div class=\"line\">\t\tlog.Printf(<span class=\"string\">\"\\033[33m%s\\033[m\\n\"</span>, <span class=\"string\">\"---------------\"</span>)</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<ul>\n<li>示例效果</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\">root@XIAOMO:/data/apps/demo<span class=\"comment\"># go run rpccli.go</span></div><div class=\"line\">2016/03/28 16:17:41 Arith: 5 * 5 = 25</div><div class=\"line\">2016/03/28 16:17:41 Arith: 5 / 5 = 1</div><div class=\"line\">2016/03/28 16:17:41 ---------------</div><div class=\"line\">2016/03/28 16:17:41 Arith: 5 * 4 = 20</div><div class=\"line\">2016/03/28 16:17:41 Arith: 5 / 4 = 1</div><div class=\"line\">2016/03/28 16:17:41 ---------------</div><div class=\"line\">2016/03/28 16:17:41 Arith: 5 * 3 = 15</div><div class=\"line\">2016/03/28 16:17:41 Arith: 5 / 3 = 1</div><div class=\"line\">2016/03/28 16:17:41 ---------------</div><div class=\"line\">2016/03/28 16:17:41 Arith: 5 * 2 = 10</div><div class=\"line\">2016/03/28 16:17:41 Arith: 5 / 2 = 2</div><div class=\"line\">2016/03/28 16:17:41 ---------------</div><div class=\"line\">2016/03/28 16:17:41 Arith: 5 * 1 = 5</div><div class=\"line\">2016/03/28 16:17:41 Arith: 5 / 1 = 5</div><div class=\"line\">2016/03/28 16:17:41 ---------------</div><div class=\"line\">2016/03/28 16:17:41 Arith: 5 * 0 = 0</div><div class=\"line\">2016/03/28 16:17:41 Exited as arith error:divide by zero</div><div class=\"line\"><span class=\"built_in\">exit</span> status 1</div></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"<h4 id=\"关于JSON-RPC\"><a href=\"#关于JSON-RPC\" class=\"headerlink\" title=\"关于JSON-RPC\"></a>关于JSON-RPC</h4><p>JSON-RPC是一个远程调用协议, 还是轻量级的, 简单易用。<br>在请求远程调用的时候, 我们可以这样定义请求体:<br><figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"attr\">\"jsonrpc\"</span>: <span class=\"string\">\"2.0\"</span>,</div><div class=\"line\">    <span class=\"attr\">\"method\"</span>: <span class=\"string\">\"login\"</span>,</div><div class=\"line\">    <span class=\"attr\">\"params\"</span>: &#123;<span class=\"attr\">\"name\"</span>:<span class=\"string\">\"momo\"</span>, <span class=\"attr\">\"passwd\"</span>:<span class=\"string\">\"xxxxxx\"</span>&#125;,</div><div class=\"line\">    <span class=\"attr\">\"id\"</span>: <span class=\"number\">0</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>","more":"<p>关于其中几个参数, 有如下说明:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">jsonrpc: 协议的版本号(1.0版本是不带该参数, 2.0版带该参数并且值为&quot;2.0&quot;)</div><div class=\"line\">method:  所要调用的方法名</div><div class=\"line\">params:  所调用方法接收的参数(/列表)</div><div class=\"line\">id:      当次请求的标识码(服务端响应体内应包含相同的id)</div></pre></td></tr></table></figure></p>\n<p>更详细的说明, 可以参考这里: <a href=\"http://wiki.geekdream.com/Specification/json-rpc_2.0.html\" target=\"_blank\" rel=\"external\">http://wiki.geekdream.com/Specification/json-rpc_2.0.html</a></p>\n<h4 id=\"Golang-JSON-RPC\"><a href=\"#Golang-JSON-RPC\" class=\"headerlink\" title=\"Golang JSON-RPC\"></a>Golang JSON-RPC</h4><p>golang中有rpc包:<br><br><strong><em>net/rpc</em></strong> <br>实现了最基本的rpc调用，默认通过HTTP协议传输gob数据来实现远程调用。<br><br><strong><em>net/rpc/jsonrpc</em></strong> <br>实现了JSON-RPC协议， 也就实现了对json数据的序列化和反序列化。</p>\n<ul>\n<li>服务端示例</li>\n</ul>\n<figure class=\"highlight golang\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">package</span> main</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">import</span> (</div><div class=\"line\">\t<span class=\"string\">\"errors\"</span></div><div class=\"line\">\t<span class=\"string\">\"log\"</span></div><div class=\"line\">\t<span class=\"string\">\"net\"</span></div><div class=\"line\">\t<span class=\"string\">\"net/rpc\"</span></div><div class=\"line\">\t<span class=\"string\">\"net/rpc/jsonrpc\"</span></div><div class=\"line\">)</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// RpcObj和ReplyObj为服务端/客户端之间传输的数据结构体</span></div><div class=\"line\"><span class=\"comment\">// C/S双方都能处理这两个数据类型</span></div><div class=\"line\"><span class=\"keyword\">type</span> RpcObj <span class=\"keyword\">struct</span> &#123;</div><div class=\"line\">\tA, B <span class=\"keyword\">int</span></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">type</span> ReplyObj <span class=\"keyword\">struct</span> &#123;</div><div class=\"line\">\tC <span class=\"keyword\">int</span></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">type</span> Arith <span class=\"keyword\">int</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 服务端的响应结构体</span></div><div class=\"line\"><span class=\"keyword\">type</span> ArithAddResp <span class=\"keyword\">struct</span> &#123;</div><div class=\"line\">\tId     <span class=\"keyword\">interface</span>&#123;&#125; <span class=\"string\">`json:\"id\"`</span></div><div class=\"line\">\tResult ReplyObj    <span class=\"string\">`json:\"result\"`</span></div><div class=\"line\">\tError  <span class=\"keyword\">interface</span>&#123;&#125; <span class=\"string\">`json:\"error\"`</span></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 符合 func (t T) funname(t1 *T1, t2 *T2) error 类型的方法都可以注册到rpc中</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(t *Arith)</span> <span class=\"title\">Add</span><span class=\"params\">(args *RpcObj, reply *ReplyObj)</span> <span class=\"title\">error</span></span> &#123;</div><div class=\"line\">\treply.C = args.A + args.B</div><div class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"literal\">nil</span></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(t *Arith)</span> <span class=\"title\">Mul</span><span class=\"params\">(args *RpcObj, reply *ReplyObj)</span> <span class=\"title\">error</span></span> &#123;</div><div class=\"line\">\treply.C = args.A * args.B</div><div class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"literal\">nil</span></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(t *Arith)</span> <span class=\"title\">Div</span><span class=\"params\">(args *RpcObj, reply *ReplyObj)</span> <span class=\"title\">error</span></span> &#123;</div><div class=\"line\">\t<span class=\"keyword\">if</span> args.B == <span class=\"number\">0</span> &#123;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> errors.New(<span class=\"string\">\"divide by zero\"</span>)</div><div class=\"line\">\t&#125;</div><div class=\"line\">\treply.C = args.A / args.B</div><div class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"literal\">nil</span></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(t *Arith)</span> <span class=\"title\">Error</span><span class=\"params\">(args *RpcObj, reply *ReplyObj)</span> <span class=\"title\">error</span></span> &#123;</div><div class=\"line\">\t<span class=\"built_in\">panic</span>(<span class=\"string\">\"ERROR\"</span>)</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</div><div class=\"line\">\tarith := <span class=\"built_in\">new</span>(Arith)</div><div class=\"line\">\t<span class=\"comment\">// 新建rpc server</span></div><div class=\"line\">\tserver := rpc.NewServer()</div><div class=\"line\">\t<span class=\"comment\">// 注册handler处理器</span></div><div class=\"line\">\tserver.Register(arith)</div><div class=\"line\">\t<span class=\"comment\">// 监听8080端口</span></div><div class=\"line\">\tl, e := net.Listen(<span class=\"string\">\"tcp\"</span>, <span class=\"string\">\":8080\"</span>)</div><div class=\"line\">\t<span class=\"keyword\">if</span> e != <span class=\"literal\">nil</span> &#123;</div><div class=\"line\">\t\tlog.Fatal(<span class=\"string\">\"listen error:\"</span>, e)</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\tlog.Println(<span class=\"string\">\"RPC server started...\"</span>)</div><div class=\"line\">\t<span class=\"keyword\">for</span> &#123;</div><div class=\"line\">\t\t<span class=\"comment\">// 接收客户端请求</span></div><div class=\"line\">\t\tconn, err := l.Accept()</div><div class=\"line\">\t\t<span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</div><div class=\"line\">\t\t\tlog.Fatal(err)</div><div class=\"line\">\t\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t\t<span class=\"comment\">// 在goroutine中处理请求</span></div><div class=\"line\">\t\t<span class=\"comment\">// 通过http.Conn创建一个jsonrpc编码器, 并将其传递到rpc编码器</span></div><div class=\"line\">\t\t<span class=\"keyword\">go</span> server.ServeCodec(jsonrpc.NewServerCodec(conn))</div><div class=\"line\">\t&#125;</div><div class=\"line\">\tlog.Println(<span class=\"string\">\"RPC server is shutdown...\"</span>)</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<ul>\n<li>客户端示例</li>\n</ul>\n<figure class=\"highlight golang\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">package</span> main</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">import</span> (</div><div class=\"line\">\t<span class=\"string\">\"log\"</span></div><div class=\"line\">\t<span class=\"string\">\"net\"</span></div><div class=\"line\">\t<span class=\"string\">\"net/rpc/jsonrpc\"</span></div><div class=\"line\">)</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">type</span> RpcObj <span class=\"keyword\">struct</span> &#123;</div><div class=\"line\">\tA, B <span class=\"keyword\">int</span></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">type</span> ReplyObj <span class=\"keyword\">struct</span> &#123;</div><div class=\"line\">\tC <span class=\"keyword\">int</span></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">type</span> Arith <span class=\"keyword\">int</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">type</span> ArithAddResp <span class=\"keyword\">struct</span> &#123;</div><div class=\"line\">\tId     <span class=\"keyword\">interface</span>&#123;&#125; <span class=\"string\">`json:\"id\"`</span></div><div class=\"line\">\tResult ReplyObj    <span class=\"string\">`json:\"result\"`</span></div><div class=\"line\">\tError  <span class=\"keyword\">interface</span>&#123;&#125; <span class=\"string\">`json:\"error\"`</span></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</div><div class=\"line\">\tconn, err := net.Dial(<span class=\"string\">\"tcp\"</span>, <span class=\"string\">\"localhost:8080\"</span>)</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</div><div class=\"line\">\t\t<span class=\"built_in\">panic</span>(err)</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t<span class=\"keyword\">defer</span> conn.Close()</div><div class=\"line\"></div><div class=\"line\">\tc := jsonrpc.NewClient(conn)</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"keyword\">var</span> reply ReplyObj</div><div class=\"line\">\t<span class=\"keyword\">var</span> args *RpcObj</div><div class=\"line\">\t<span class=\"keyword\">for</span> i := <span class=\"number\">5</span>; i &gt;= <span class=\"number\">0</span>; i-- &#123;</div><div class=\"line\">\t\t<span class=\"comment\">// 往RPC调用传递参数</span></div><div class=\"line\">\t\targs = &amp;RpcObj&#123;<span class=\"number\">5</span>, i&#125;</div><div class=\"line\"></div><div class=\"line\">\t\t<span class=\"comment\">// 远程调用Arith.Mul方法</span></div><div class=\"line\">\t\terr = c.Call(<span class=\"string\">\"Arith.Mul\"</span>, args, &amp;reply)</div><div class=\"line\">\t\t<span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</div><div class=\"line\">\t\t\tlog.Fatal(<span class=\"string\">\"Exited as arith error:\"</span>, err)</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\tlog.Printf(<span class=\"string\">\"Arith: %d * %d = %v\\n\"</span>, args.A, args.B, reply.C)</div><div class=\"line\"></div><div class=\"line\">\t\t<span class=\"comment\">// 远程调用Arith.Div方法</span></div><div class=\"line\">\t\terr = c.Call(<span class=\"string\">\"Arith.Div\"</span>, args, &amp;reply)</div><div class=\"line\">\t\t<span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</div><div class=\"line\">\t\t\tlog.Fatal(<span class=\"string\">\"Exited as arith error:\"</span>, err)</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\tlog.Printf(<span class=\"string\">\"Arith: %d / %d = %v\\n\"</span>, args.A, args.B, reply.C)</div><div class=\"line\"></div><div class=\"line\">\t\t<span class=\"comment\">// 华丽的分割线</span></div><div class=\"line\">\t\tlog.Printf(<span class=\"string\">\"\\033[33m%s\\033[m\\n\"</span>, <span class=\"string\">\"---------------\"</span>)</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<ul>\n<li>示例效果</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\">root@XIAOMO:/data/apps/demo<span class=\"comment\"># go run rpccli.go</span></div><div class=\"line\">2016/03/28 16:17:41 Arith: 5 * 5 = 25</div><div class=\"line\">2016/03/28 16:17:41 Arith: 5 / 5 = 1</div><div class=\"line\">2016/03/28 16:17:41 ---------------</div><div class=\"line\">2016/03/28 16:17:41 Arith: 5 * 4 = 20</div><div class=\"line\">2016/03/28 16:17:41 Arith: 5 / 4 = 1</div><div class=\"line\">2016/03/28 16:17:41 ---------------</div><div class=\"line\">2016/03/28 16:17:41 Arith: 5 * 3 = 15</div><div class=\"line\">2016/03/28 16:17:41 Arith: 5 / 3 = 1</div><div class=\"line\">2016/03/28 16:17:41 ---------------</div><div class=\"line\">2016/03/28 16:17:41 Arith: 5 * 2 = 10</div><div class=\"line\">2016/03/28 16:17:41 Arith: 5 / 2 = 2</div><div class=\"line\">2016/03/28 16:17:41 ---------------</div><div class=\"line\">2016/03/28 16:17:41 Arith: 5 * 1 = 5</div><div class=\"line\">2016/03/28 16:17:41 Arith: 5 / 1 = 5</div><div class=\"line\">2016/03/28 16:17:41 ---------------</div><div class=\"line\">2016/03/28 16:17:41 Arith: 5 * 0 = 0</div><div class=\"line\">2016/03/28 16:17:41 Exited as arith error:divide by zero</div><div class=\"line\"><span class=\"built_in\">exit</span> status 1</div></pre></td></tr></table></figure>"},{"title":"[golang]pprof性能分析工具","date":"2016-08-11T10:53:57.000Z","_content":"\n### 1. 关于pprof\npprof是golang程序一个性能分析的工具，可以查看堆栈、cpu信息等。\n\n### 2. 源码示例\n<!--more-->\n```golang\npackage main\n\nimport (\n\t\"flag\"\n\t\"log\"\n\t\"net/http\"\n\t_ \"net/http/pprof\"\n\t\"sync\"\n\t\"time\"\n)\n\nfunc Counter(wg *sync.WaitGroup) {\n\ttime.Sleep(time.Second)\n\n\tvar counter int\n\tfor i := 0; i < 1000000; i++ {\n\t\ttime.Sleep(time.Millisecond * 200)\n\t\tcounter++\n\t}\n\twg.Done()\n}\n\nfunc main() {\n\tflag.Parse()\n\n\t//远程获取pprof数据\n\tgo func() {\n\t\tlog.Println(http.ListenAndServe(\"localhost:8080\", nil))\n\t}()\n\n\tvar wg sync.WaitGroup\n\twg.Add(10)\n\tfor i := 0; i < 10; i++ {\n\t\tgo Counter(&wg)\n\t}\n\twg.Wait()\n\n\t// sleep 10mins, 在程序退出之前可以查看性能参数.\n\ttime.Sleep(60 * time.Second)\n}\n```\n\n### 3. 编译运行\n```bash\ngo run test_pprof.go\n```\n\n### 4. 通过网页查看overview\n![golang pprof](/img/golang_pprof.png)\n\n### 5. 通过终端命令查看各参数\n**查看堆栈信息**\n```bash\nroot@XIAOMO:~# go tool pprof http://localhost:8080/debug/pprof/heap\nFetching profile from http://localhost:8080/debug/pprof/heap\nSaved profile in /root/pprof/pprof.localhost:8080.inuse_objects.inuse_space.003.pb.gz\nEntering interactive mode (type \"help\" for commands)\n(pprof) top10\n1069.45kB of 1069.45kB total (  100%)\nShowing top 10 nodes out of 11 (cum >= 512.19kB)\n      flat  flat%   sum%        cum   cum%\n  557.26kB 52.11% 52.11%   557.26kB 52.11%  html.init\n  512.19kB 47.89%   100%   512.19kB 47.89%  runtime.malg\n         0     0%   100%   557.26kB 52.11%  html/template.init\n         0     0%   100%   557.26kB 52.11%  main.init\n         0     0%   100%   557.26kB 52.11%  net/http/pprof.init\n         0     0%   100%   557.26kB 52.11%  runtime.goexit\n         0     0%   100%   557.26kB 52.11%  runtime.main\n         0     0%   100%   512.19kB 47.89%  runtime.mcommoninit\n         0     0%   100%   512.19kB 47.89%  runtime.mpreinit\n         0     0%   100%   512.19kB 47.89%  runtime.rt0_go\n(pprof) web\n```\ntop10命令查看了堆栈空间最大的10个函数调用;<br>\nweb明令则生成了很详细的图, 如下:<br>\n![golang pprof](/img/golang_pprof_heap.png)\n\n<br>**查看cpu性能信息**\n```bash\nroot@xiaomo:~$ go tool pprof http://localhost:8080/debug/pprof/profile\nFetching profile from http://localhost:8080/debug/pprof/profile\nPlease wait... (30s)\nSaved profile in /home/xiaomo/pprof/pprof.pprof.localhost:8080.samples.cpu.001.pb.gz\nEntering interactive mode (type \"help\" for commands)\n(pprof) web\n```\n输入命令web后生成详细结果，如下图所示:<br>\n![pprof_cpu](/img/golang_pprof_cpu.png)\n\n","source":"_posts/golang/golang-pprof性能分析工具.md","raw":"---\ntitle: '[golang]pprof性能分析工具'\ndate: 2016-08-11 18:53:57\ntags: golang\n---\n\n### 1. 关于pprof\npprof是golang程序一个性能分析的工具，可以查看堆栈、cpu信息等。\n\n### 2. 源码示例\n<!--more-->\n```golang\npackage main\n\nimport (\n\t\"flag\"\n\t\"log\"\n\t\"net/http\"\n\t_ \"net/http/pprof\"\n\t\"sync\"\n\t\"time\"\n)\n\nfunc Counter(wg *sync.WaitGroup) {\n\ttime.Sleep(time.Second)\n\n\tvar counter int\n\tfor i := 0; i < 1000000; i++ {\n\t\ttime.Sleep(time.Millisecond * 200)\n\t\tcounter++\n\t}\n\twg.Done()\n}\n\nfunc main() {\n\tflag.Parse()\n\n\t//远程获取pprof数据\n\tgo func() {\n\t\tlog.Println(http.ListenAndServe(\"localhost:8080\", nil))\n\t}()\n\n\tvar wg sync.WaitGroup\n\twg.Add(10)\n\tfor i := 0; i < 10; i++ {\n\t\tgo Counter(&wg)\n\t}\n\twg.Wait()\n\n\t// sleep 10mins, 在程序退出之前可以查看性能参数.\n\ttime.Sleep(60 * time.Second)\n}\n```\n\n### 3. 编译运行\n```bash\ngo run test_pprof.go\n```\n\n### 4. 通过网页查看overview\n![golang pprof](/img/golang_pprof.png)\n\n### 5. 通过终端命令查看各参数\n**查看堆栈信息**\n```bash\nroot@XIAOMO:~# go tool pprof http://localhost:8080/debug/pprof/heap\nFetching profile from http://localhost:8080/debug/pprof/heap\nSaved profile in /root/pprof/pprof.localhost:8080.inuse_objects.inuse_space.003.pb.gz\nEntering interactive mode (type \"help\" for commands)\n(pprof) top10\n1069.45kB of 1069.45kB total (  100%)\nShowing top 10 nodes out of 11 (cum >= 512.19kB)\n      flat  flat%   sum%        cum   cum%\n  557.26kB 52.11% 52.11%   557.26kB 52.11%  html.init\n  512.19kB 47.89%   100%   512.19kB 47.89%  runtime.malg\n         0     0%   100%   557.26kB 52.11%  html/template.init\n         0     0%   100%   557.26kB 52.11%  main.init\n         0     0%   100%   557.26kB 52.11%  net/http/pprof.init\n         0     0%   100%   557.26kB 52.11%  runtime.goexit\n         0     0%   100%   557.26kB 52.11%  runtime.main\n         0     0%   100%   512.19kB 47.89%  runtime.mcommoninit\n         0     0%   100%   512.19kB 47.89%  runtime.mpreinit\n         0     0%   100%   512.19kB 47.89%  runtime.rt0_go\n(pprof) web\n```\ntop10命令查看了堆栈空间最大的10个函数调用;<br>\nweb明令则生成了很详细的图, 如下:<br>\n![golang pprof](/img/golang_pprof_heap.png)\n\n<br>**查看cpu性能信息**\n```bash\nroot@xiaomo:~$ go tool pprof http://localhost:8080/debug/pprof/profile\nFetching profile from http://localhost:8080/debug/pprof/profile\nPlease wait... (30s)\nSaved profile in /home/xiaomo/pprof/pprof.pprof.localhost:8080.samples.cpu.001.pb.gz\nEntering interactive mode (type \"help\" for commands)\n(pprof) web\n```\n输入命令web后生成详细结果，如下图所示:<br>\n![pprof_cpu](/img/golang_pprof_cpu.png)\n\n","slug":"golang/golang-pprof性能分析工具","published":1,"updated":"2017-08-11T11:00:14.151Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj84nao2y000i7v4domr1ucs5","content":"<h3 id=\"1-关于pprof\"><a href=\"#1-关于pprof\" class=\"headerlink\" title=\"1. 关于pprof\"></a>1. 关于pprof</h3><p>pprof是golang程序一个性能分析的工具，可以查看堆栈、cpu信息等。</p>\n<h3 id=\"2-源码示例\"><a href=\"#2-源码示例\" class=\"headerlink\" title=\"2. 源码示例\"></a>2. 源码示例</h3><a id=\"more\"></a>\n<figure class=\"highlight golang\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">package</span> main</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">import</span> (</div><div class=\"line\">\t<span class=\"string\">\"flag\"</span></div><div class=\"line\">\t<span class=\"string\">\"log\"</span></div><div class=\"line\">\t<span class=\"string\">\"net/http\"</span></div><div class=\"line\">\t_ <span class=\"string\">\"net/http/pprof\"</span></div><div class=\"line\">\t<span class=\"string\">\"sync\"</span></div><div class=\"line\">\t<span class=\"string\">\"time\"</span></div><div class=\"line\">)</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">Counter</span><span class=\"params\">(wg *sync.WaitGroup)</span></span> &#123;</div><div class=\"line\">\ttime.Sleep(time.Second)</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"keyword\">var</span> counter <span class=\"keyword\">int</span></div><div class=\"line\">\t<span class=\"keyword\">for</span> i := <span class=\"number\">0</span>; i &lt; <span class=\"number\">1000000</span>; i++ &#123;</div><div class=\"line\">\t\ttime.Sleep(time.Millisecond * <span class=\"number\">200</span>)</div><div class=\"line\">\t\tcounter++</div><div class=\"line\">\t&#125;</div><div class=\"line\">\twg.Done()</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</div><div class=\"line\">\tflag.Parse()</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"comment\">//远程获取pprof数据</span></div><div class=\"line\">\t<span class=\"keyword\">go</span> <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">()</span></span> &#123;</div><div class=\"line\">\t\tlog.Println(http.ListenAndServe(<span class=\"string\">\"localhost:8080\"</span>, <span class=\"literal\">nil</span>))</div><div class=\"line\">\t&#125;()</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"keyword\">var</span> wg sync.WaitGroup</div><div class=\"line\">\twg.Add(<span class=\"number\">10</span>)</div><div class=\"line\">\t<span class=\"keyword\">for</span> i := <span class=\"number\">0</span>; i &lt; <span class=\"number\">10</span>; i++ &#123;</div><div class=\"line\">\t\t<span class=\"keyword\">go</span> Counter(&amp;wg)</div><div class=\"line\">\t&#125;</div><div class=\"line\">\twg.Wait()</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"comment\">// sleep 10mins, 在程序退出之前可以查看性能参数.</span></div><div class=\"line\">\ttime.Sleep(<span class=\"number\">60</span> * time.Second)</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h3 id=\"3-编译运行\"><a href=\"#3-编译运行\" class=\"headerlink\" title=\"3. 编译运行\"></a>3. 编译运行</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">go run test_pprof.go</div></pre></td></tr></table></figure>\n<h3 id=\"4-通过网页查看overview\"><a href=\"#4-通过网页查看overview\" class=\"headerlink\" title=\"4. 通过网页查看overview\"></a>4. 通过网页查看overview</h3><p><img src=\"/img/golang_pprof.png\" alt=\"golang pprof\"></p>\n<h3 id=\"5-通过终端命令查看各参数\"><a href=\"#5-通过终端命令查看各参数\" class=\"headerlink\" title=\"5. 通过终端命令查看各参数\"></a>5. 通过终端命令查看各参数</h3><p><strong>查看堆栈信息</strong><br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\">root@XIAOMO:~<span class=\"comment\"># go tool pprof http://localhost:8080/debug/pprof/heap</span></div><div class=\"line\">Fetching profile from http://localhost:8080/debug/pprof/heap</div><div class=\"line\">Saved profile <span class=\"keyword\">in</span> /root/pprof/pprof.localhost:8080.inuse_objects.inuse_space.003.pb.gz</div><div class=\"line\">Entering interactive mode (<span class=\"built_in\">type</span> <span class=\"string\">\"help\"</span> <span class=\"keyword\">for</span> commands)</div><div class=\"line\">(pprof) top10</div><div class=\"line\">1069.45kB of 1069.45kB total (  100%)</div><div class=\"line\">Showing top 10 nodes out of 11 (cum &gt;= 512.19kB)</div><div class=\"line\">      flat  flat%   sum%        cum   cum%</div><div class=\"line\">  557.26kB 52.11% 52.11%   557.26kB 52.11%  html.init</div><div class=\"line\">  512.19kB 47.89%   100%   512.19kB 47.89%  runtime.malg</div><div class=\"line\">         0     0%   100%   557.26kB 52.11%  html/template.init</div><div class=\"line\">         0     0%   100%   557.26kB 52.11%  main.init</div><div class=\"line\">         0     0%   100%   557.26kB 52.11%  net/http/pprof.init</div><div class=\"line\">         0     0%   100%   557.26kB 52.11%  runtime.goexit</div><div class=\"line\">         0     0%   100%   557.26kB 52.11%  runtime.main</div><div class=\"line\">         0     0%   100%   512.19kB 47.89%  runtime.mcommoninit</div><div class=\"line\">         0     0%   100%   512.19kB 47.89%  runtime.mpreinit</div><div class=\"line\">         0     0%   100%   512.19kB 47.89%  runtime.rt0_go</div><div class=\"line\">(pprof) web</div></pre></td></tr></table></figure></p>\n<p>top10命令查看了堆栈空间最大的10个函数调用;<br><br>web明令则生成了很详细的图, 如下:<br><br><img src=\"/img/golang_pprof_heap.png\" alt=\"golang pprof\"></p>\n<p><br><strong>查看cpu性能信息</strong><br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">root@xiaomo:~$ go tool pprof http://localhost:8080/debug/pprof/profile</div><div class=\"line\">Fetching profile from http://localhost:8080/debug/pprof/profile</div><div class=\"line\">Please <span class=\"built_in\">wait</span>... (30s)</div><div class=\"line\">Saved profile <span class=\"keyword\">in</span> /home/xiaomo/pprof/pprof.pprof.localhost:8080.samples.cpu.001.pb.gz</div><div class=\"line\">Entering interactive mode (<span class=\"built_in\">type</span> <span class=\"string\">\"help\"</span> <span class=\"keyword\">for</span> commands)</div><div class=\"line\">(pprof) web</div></pre></td></tr></table></figure></p>\n<p>输入命令web后生成详细结果，如下图所示:<br><br><img src=\"/img/golang_pprof_cpu.png\" alt=\"pprof_cpu\"></p>\n","site":{"data":{}},"excerpt":"<h3 id=\"1-关于pprof\"><a href=\"#1-关于pprof\" class=\"headerlink\" title=\"1. 关于pprof\"></a>1. 关于pprof</h3><p>pprof是golang程序一个性能分析的工具，可以查看堆栈、cpu信息等。</p>\n<h3 id=\"2-源码示例\"><a href=\"#2-源码示例\" class=\"headerlink\" title=\"2. 源码示例\"></a>2. 源码示例</h3>","more":"<figure class=\"highlight golang\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">package</span> main</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">import</span> (</div><div class=\"line\">\t<span class=\"string\">\"flag\"</span></div><div class=\"line\">\t<span class=\"string\">\"log\"</span></div><div class=\"line\">\t<span class=\"string\">\"net/http\"</span></div><div class=\"line\">\t_ <span class=\"string\">\"net/http/pprof\"</span></div><div class=\"line\">\t<span class=\"string\">\"sync\"</span></div><div class=\"line\">\t<span class=\"string\">\"time\"</span></div><div class=\"line\">)</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">Counter</span><span class=\"params\">(wg *sync.WaitGroup)</span></span> &#123;</div><div class=\"line\">\ttime.Sleep(time.Second)</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"keyword\">var</span> counter <span class=\"keyword\">int</span></div><div class=\"line\">\t<span class=\"keyword\">for</span> i := <span class=\"number\">0</span>; i &lt; <span class=\"number\">1000000</span>; i++ &#123;</div><div class=\"line\">\t\ttime.Sleep(time.Millisecond * <span class=\"number\">200</span>)</div><div class=\"line\">\t\tcounter++</div><div class=\"line\">\t&#125;</div><div class=\"line\">\twg.Done()</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</div><div class=\"line\">\tflag.Parse()</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"comment\">//远程获取pprof数据</span></div><div class=\"line\">\t<span class=\"keyword\">go</span> <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">()</span></span> &#123;</div><div class=\"line\">\t\tlog.Println(http.ListenAndServe(<span class=\"string\">\"localhost:8080\"</span>, <span class=\"literal\">nil</span>))</div><div class=\"line\">\t&#125;()</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"keyword\">var</span> wg sync.WaitGroup</div><div class=\"line\">\twg.Add(<span class=\"number\">10</span>)</div><div class=\"line\">\t<span class=\"keyword\">for</span> i := <span class=\"number\">0</span>; i &lt; <span class=\"number\">10</span>; i++ &#123;</div><div class=\"line\">\t\t<span class=\"keyword\">go</span> Counter(&amp;wg)</div><div class=\"line\">\t&#125;</div><div class=\"line\">\twg.Wait()</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"comment\">// sleep 10mins, 在程序退出之前可以查看性能参数.</span></div><div class=\"line\">\ttime.Sleep(<span class=\"number\">60</span> * time.Second)</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h3 id=\"3-编译运行\"><a href=\"#3-编译运行\" class=\"headerlink\" title=\"3. 编译运行\"></a>3. 编译运行</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">go run test_pprof.go</div></pre></td></tr></table></figure>\n<h3 id=\"4-通过网页查看overview\"><a href=\"#4-通过网页查看overview\" class=\"headerlink\" title=\"4. 通过网页查看overview\"></a>4. 通过网页查看overview</h3><p><img src=\"/img/golang_pprof.png\" alt=\"golang pprof\"></p>\n<h3 id=\"5-通过终端命令查看各参数\"><a href=\"#5-通过终端命令查看各参数\" class=\"headerlink\" title=\"5. 通过终端命令查看各参数\"></a>5. 通过终端命令查看各参数</h3><p><strong>查看堆栈信息</strong><br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\">root@XIAOMO:~<span class=\"comment\"># go tool pprof http://localhost:8080/debug/pprof/heap</span></div><div class=\"line\">Fetching profile from http://localhost:8080/debug/pprof/heap</div><div class=\"line\">Saved profile <span class=\"keyword\">in</span> /root/pprof/pprof.localhost:8080.inuse_objects.inuse_space.003.pb.gz</div><div class=\"line\">Entering interactive mode (<span class=\"built_in\">type</span> <span class=\"string\">\"help\"</span> <span class=\"keyword\">for</span> commands)</div><div class=\"line\">(pprof) top10</div><div class=\"line\">1069.45kB of 1069.45kB total (  100%)</div><div class=\"line\">Showing top 10 nodes out of 11 (cum &gt;= 512.19kB)</div><div class=\"line\">      flat  flat%   sum%        cum   cum%</div><div class=\"line\">  557.26kB 52.11% 52.11%   557.26kB 52.11%  html.init</div><div class=\"line\">  512.19kB 47.89%   100%   512.19kB 47.89%  runtime.malg</div><div class=\"line\">         0     0%   100%   557.26kB 52.11%  html/template.init</div><div class=\"line\">         0     0%   100%   557.26kB 52.11%  main.init</div><div class=\"line\">         0     0%   100%   557.26kB 52.11%  net/http/pprof.init</div><div class=\"line\">         0     0%   100%   557.26kB 52.11%  runtime.goexit</div><div class=\"line\">         0     0%   100%   557.26kB 52.11%  runtime.main</div><div class=\"line\">         0     0%   100%   512.19kB 47.89%  runtime.mcommoninit</div><div class=\"line\">         0     0%   100%   512.19kB 47.89%  runtime.mpreinit</div><div class=\"line\">         0     0%   100%   512.19kB 47.89%  runtime.rt0_go</div><div class=\"line\">(pprof) web</div></pre></td></tr></table></figure></p>\n<p>top10命令查看了堆栈空间最大的10个函数调用;<br><br>web明令则生成了很详细的图, 如下:<br><br><img src=\"/img/golang_pprof_heap.png\" alt=\"golang pprof\"></p>\n<p><br><strong>查看cpu性能信息</strong><br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">root@xiaomo:~$ go tool pprof http://localhost:8080/debug/pprof/profile</div><div class=\"line\">Fetching profile from http://localhost:8080/debug/pprof/profile</div><div class=\"line\">Please <span class=\"built_in\">wait</span>... (30s)</div><div class=\"line\">Saved profile <span class=\"keyword\">in</span> /home/xiaomo/pprof/pprof.pprof.localhost:8080.samples.cpu.001.pb.gz</div><div class=\"line\">Entering interactive mode (<span class=\"built_in\">type</span> <span class=\"string\">\"help\"</span> <span class=\"keyword\">for</span> commands)</div><div class=\"line\">(pprof) web</div></pre></td></tr></table></figure></p>\n<p>输入命令web后生成详细结果，如下图所示:<br><br><img src=\"/img/golang_pprof_cpu.png\" alt=\"pprof_cpu\"></p>"},{"title":"[golang]工作池workerpool","date":"2016-03-15T10:19:32.000Z","_content":"\n在并发量比较高的场景中, 服务程序既要快速处理请求, 也要限制并行处理的gorontine量, 否则会造成系统资源的浪费或负载过高。\n\n创建一个goroutine工作池, 是一个比较合理的解决方案。\n\n### 示例1\n<!--more-->\n```golang\npackage main\n\nimport (\n\t\"fmt\"\n\t\"log\"\n\t\"time\"\n)\n\nconst (\n\t// PoolSize defines the pool size\n\tPoolSize = 10\n)\n\n// Jobs jobs channel\nvar Jobs chan string = make(chan string, 30)\nvar Result chan string = make(chan string, 30)\n\n// Working do working\nfunc Working(workID int) {\n\tlog.Printf(\"Initiate worker %v...\", workID)\n\tfor j := range Jobs {\n\t\tlog.Printf(\"work id: %v, receive msg: %v\", workID, j)\n\t\tResult <- fmt.Sprintf(\"%v is done...\", j)\n\t\ttime.Sleep(time.Second * 1)\n\t}\n}\n\n// InitWorkerPool initialize worker pool\nfunc InitWorkerPool() {\n\tfor j := 0; j < PoolSize; j++ {\n\t\tgo Working(j)\n\t}\n}\n\nfunc main() {\n\tInitWorkerPool()\n\t// to generate jobs\n\ttime.Sleep(time.Second * 2)\n\tfor i := 0; i < 20; i++ {\n\t\tjob := fmt.Sprintf(\"JobID %v\", i)\n\t\tJobs <- job\n\t}\n\tclose(Jobs)\n\n\tfor i := 0; i < 20; i++ {\n\t\tlog.Printf(\"working result: %v\", <-Result)\n\t}\n}\n```\n运行结果:\n```bash\n2016/04/12 14:18:58 Initiate worker 0...\n2016/04/12 14:18:58 Initiate worker 1...\n2016/04/12 14:18:58 Initiate worker 2...\n2016/04/12 14:18:58 Initiate worker 3...\n2016/04/12 14:18:58 Initiate worker 4...\n2016/04/12 14:18:58 Initiate worker 5...\n2016/04/12 14:18:58 Initiate worker 6...\n2016/04/12 14:18:58 Initiate worker 7...\n2016/04/12 14:18:58 Initiate worker 8...\n2016/04/12 14:18:58 Initiate worker 9...\n2016/04/12 14:19:00 work id: 9, receive msg: JobID 0\n2016/04/12 14:19:00 work id: 0, receive msg: JobID 1\n2016/04/12 14:19:00 work id: 1, receive msg: JobID 2\n2016/04/12 14:19:00 work id: 2, receive msg: JobID 3\n2016/04/12 14:19:00 work id: 3, receive msg: JobID 4\n2016/04/12 14:19:00 work id: 4, receive msg: JobID 5\n2016/04/12 14:19:00 work id: 5, receive msg: JobID 6\n2016/04/12 14:19:00 work id: 6, receive msg: JobID 7\n2016/04/12 14:19:00 work id: 7, receive msg: JobID 8\n2016/04/12 14:19:00 work id: 8, receive msg: JobID 9\n2016/04/12 14:19:00 working result: JobID 0 is done...\n2016/04/12 14:19:00 working result: JobID 1 is done...\n2016/04/12 14:19:00 working result: JobID 2 is done...\n2016/04/12 14:19:00 working result: JobID 3 is done...\n2016/04/12 14:19:00 working result: JobID 4 is done...\n2016/04/12 14:19:00 working result: JobID 5 is done...\n2016/04/12 14:19:00 working result: JobID 6 is done...\n2016/04/12 14:19:00 working result: JobID 7 is done...\n2016/04/12 14:19:00 working result: JobID 8 is done...\n2016/04/12 14:19:00 working result: JobID 9 is done...\n2016/04/12 14:19:01 work id: 8, receive msg: JobID 10\n2016/04/12 14:19:01 work id: 9, receive msg: JobID 11\n2016/04/12 14:19:01 work id: 0, receive msg: JobID 12\n2016/04/12 14:19:01 work id: 1, receive msg: JobID 13\n2016/04/12 14:19:01 work id: 2, receive msg: JobID 14\n2016/04/12 14:19:01 work id: 3, receive msg: JobID 15\n2016/04/12 14:19:01 work id: 4, receive msg: JobID 16\n2016/04/12 14:19:01 work id: 5, receive msg: JobID 17\n2016/04/12 14:19:01 work id: 6, receive msg: JobID 18\n2016/04/12 14:19:01 work id: 7, receive msg: JobID 19\n2016/04/12 14:19:01 working result: JobID 10 is done...\n2016/04/12 14:19:01 working result: JobID 11 is done...\n2016/04/12 14:19:01 working result: JobID 12 is done...\n2016/04/12 14:19:01 working result: JobID 13 is done...\n2016/04/12 14:19:01 working result: JobID 14 is done...\n2016/04/12 14:19:01 working result: JobID 15 is done...\n2016/04/12 14:19:01 working result: JobID 16 is done...\n2016/04/12 14:19:01 working result: JobID 17 is done...\n2016/04/12 14:19:01 working result: JobID 18 is done...\n2016/04/12 14:19:01 working result: JobID 19 is done...\n```\n由上可以见, 程序中同时最多有10个工作任务在运行。\n\n### 示例2, 更规范的用法\n我们引入同步锁, 并把工作池定义成一个结构体WorkPool， 包含poolSize和tasks成员, 并实现WorkPool.Run方法:\n```golang\npackage main\n\nimport (\n\t\"fmt\"\n\t\"log\"\n\t\"sync\"\n\t\"time\"\n)\n\n// WorkPool worker pool definition\ntype WorkPool struct {\n\tpoolSize int\n\ttasks    chan string\n}\n\n// Run initialize worker pool, ready to run tasks\nfunc (wp *WorkPool) Run() {\n\tvar wg sync.WaitGroup\n\tfor i := 0; i < wp.poolSize; i++ {\n\t\twg.Add(1)\n\t\ttaskID := i\n\t\tgo func() {\n\t\t\tlog.Printf(\"Initiate worker %v...\", taskID)\n\t\t\tfor j := range wp.tasks {\n\t\t\t\tlog.Printf(\"work id: %v, receive msg: %v\", taskID, j)\n\t\t\t\ttime.Sleep(time.Second * 1)\n\t\t\t}\n\t\t\twg.Done()\n\t\t}()\n\t}\n\twg.Wait()\n\tlog.Println(\"WorkPool is destroyed.\")\n}\n\nfunc main() {\n\ttasks := make(chan string, 20)\n\n\t// to generate jobs\n\tgo func() {\n\t\ttime.Sleep(time.Second * 2)\n\t\tfor i := 0; i < 30; i++ {\n\t\t\tjob := fmt.Sprintf(\"jobID %v\", i)\n\t\t\ttasks <- job\n\t\t}\n\t\t// if not close tasks, will cause deadlock\n\t\tclose(tasks)\n\t}()\n\n\twp := WorkPool{\n\t\tpoolSize: 10,\n\t\ttasks:    tasks,\n\t}\n\twp.Run()\n}\n```\n运行结果:\n```bash\n2016/04/12 15:01:03 Initiate worker 9...\n2016/04/12 15:01:03 Initiate worker 0...\n2016/04/12 15:01:03 Initiate worker 1...\n2016/04/12 15:01:03 Initiate worker 2...\n2016/04/12 15:01:03 Initiate worker 3...\n2016/04/12 15:01:03 Initiate worker 4...\n2016/04/12 15:01:03 Initiate worker 5...\n2016/04/12 15:01:03 Initiate worker 6...\n2016/04/12 15:01:03 Initiate worker 7...\n2016/04/12 15:01:03 Initiate worker 8...\n2016/04/12 15:01:05 work id: 8, receive msg: jobID 0\n2016/04/12 15:01:05 work id: 9, receive msg: jobID 1\n2016/04/12 15:01:05 work id: 0, receive msg: jobID 2\n2016/04/12 15:01:05 work id: 1, receive msg: jobID 3\n2016/04/12 15:01:05 work id: 2, receive msg: jobID 4\n2016/04/12 15:01:05 work id: 3, receive msg: jobID 5\n2016/04/12 15:01:05 work id: 4, receive msg: jobID 6\n2016/04/12 15:01:05 work id: 5, receive msg: jobID 7\n2016/04/12 15:01:05 work id: 6, receive msg: jobID 8\n2016/04/12 15:01:05 work id: 7, receive msg: jobID 9\n2016/04/12 15:01:06 work id: 7, receive msg: jobID 10\n2016/04/12 15:01:06 work id: 8, receive msg: jobID 11\n2016/04/12 15:01:06 work id: 9, receive msg: jobID 12\n2016/04/12 15:01:06 work id: 0, receive msg: jobID 13\n2016/04/12 15:01:06 work id: 1, receive msg: jobID 14\n2016/04/12 15:01:06 work id: 2, receive msg: jobID 15\n2016/04/12 15:01:06 work id: 3, receive msg: jobID 16\n2016/04/12 15:01:06 work id: 4, receive msg: jobID 17\n2016/04/12 15:01:06 work id: 5, receive msg: jobID 18\n2016/04/12 15:01:06 work id: 6, receive msg: jobID 19\n2016/04/12 15:01:07 work id: 6, receive msg: jobID 20\n2016/04/12 15:01:07 work id: 7, receive msg: jobID 21\n2016/04/12 15:01:07 work id: 8, receive msg: jobID 22\n2016/04/12 15:01:07 work id: 9, receive msg: jobID 23\n2016/04/12 15:01:07 work id: 0, receive msg: jobID 24\n2016/04/12 15:01:07 work id: 1, receive msg: jobID 25\n2016/04/12 15:01:07 work id: 2, receive msg: jobID 26\n2016/04/12 15:01:07 work id: 3, receive msg: jobID 27\n2016/04/12 15:01:07 work id: 4, receive msg: jobID 28\n2016/04/12 15:01:07 work id: 5, receive msg: jobID 29\n2016/04/12 15:01:08 WorkPool is destroyed.\n```\n由上可见, 同时最多只有10个任务在执行；调用close(tasks)后, 所有工作任务完成, 工作池销毁, 主进程退出。\n\n","source":"_posts/golang/golang-工作池workerpool.md","raw":"---\ntitle: '[golang]工作池workerpool'\ndate: 2016-03-15 18:19:32\ntags: golang\n---\n\n在并发量比较高的场景中, 服务程序既要快速处理请求, 也要限制并行处理的gorontine量, 否则会造成系统资源的浪费或负载过高。\n\n创建一个goroutine工作池, 是一个比较合理的解决方案。\n\n### 示例1\n<!--more-->\n```golang\npackage main\n\nimport (\n\t\"fmt\"\n\t\"log\"\n\t\"time\"\n)\n\nconst (\n\t// PoolSize defines the pool size\n\tPoolSize = 10\n)\n\n// Jobs jobs channel\nvar Jobs chan string = make(chan string, 30)\nvar Result chan string = make(chan string, 30)\n\n// Working do working\nfunc Working(workID int) {\n\tlog.Printf(\"Initiate worker %v...\", workID)\n\tfor j := range Jobs {\n\t\tlog.Printf(\"work id: %v, receive msg: %v\", workID, j)\n\t\tResult <- fmt.Sprintf(\"%v is done...\", j)\n\t\ttime.Sleep(time.Second * 1)\n\t}\n}\n\n// InitWorkerPool initialize worker pool\nfunc InitWorkerPool() {\n\tfor j := 0; j < PoolSize; j++ {\n\t\tgo Working(j)\n\t}\n}\n\nfunc main() {\n\tInitWorkerPool()\n\t// to generate jobs\n\ttime.Sleep(time.Second * 2)\n\tfor i := 0; i < 20; i++ {\n\t\tjob := fmt.Sprintf(\"JobID %v\", i)\n\t\tJobs <- job\n\t}\n\tclose(Jobs)\n\n\tfor i := 0; i < 20; i++ {\n\t\tlog.Printf(\"working result: %v\", <-Result)\n\t}\n}\n```\n运行结果:\n```bash\n2016/04/12 14:18:58 Initiate worker 0...\n2016/04/12 14:18:58 Initiate worker 1...\n2016/04/12 14:18:58 Initiate worker 2...\n2016/04/12 14:18:58 Initiate worker 3...\n2016/04/12 14:18:58 Initiate worker 4...\n2016/04/12 14:18:58 Initiate worker 5...\n2016/04/12 14:18:58 Initiate worker 6...\n2016/04/12 14:18:58 Initiate worker 7...\n2016/04/12 14:18:58 Initiate worker 8...\n2016/04/12 14:18:58 Initiate worker 9...\n2016/04/12 14:19:00 work id: 9, receive msg: JobID 0\n2016/04/12 14:19:00 work id: 0, receive msg: JobID 1\n2016/04/12 14:19:00 work id: 1, receive msg: JobID 2\n2016/04/12 14:19:00 work id: 2, receive msg: JobID 3\n2016/04/12 14:19:00 work id: 3, receive msg: JobID 4\n2016/04/12 14:19:00 work id: 4, receive msg: JobID 5\n2016/04/12 14:19:00 work id: 5, receive msg: JobID 6\n2016/04/12 14:19:00 work id: 6, receive msg: JobID 7\n2016/04/12 14:19:00 work id: 7, receive msg: JobID 8\n2016/04/12 14:19:00 work id: 8, receive msg: JobID 9\n2016/04/12 14:19:00 working result: JobID 0 is done...\n2016/04/12 14:19:00 working result: JobID 1 is done...\n2016/04/12 14:19:00 working result: JobID 2 is done...\n2016/04/12 14:19:00 working result: JobID 3 is done...\n2016/04/12 14:19:00 working result: JobID 4 is done...\n2016/04/12 14:19:00 working result: JobID 5 is done...\n2016/04/12 14:19:00 working result: JobID 6 is done...\n2016/04/12 14:19:00 working result: JobID 7 is done...\n2016/04/12 14:19:00 working result: JobID 8 is done...\n2016/04/12 14:19:00 working result: JobID 9 is done...\n2016/04/12 14:19:01 work id: 8, receive msg: JobID 10\n2016/04/12 14:19:01 work id: 9, receive msg: JobID 11\n2016/04/12 14:19:01 work id: 0, receive msg: JobID 12\n2016/04/12 14:19:01 work id: 1, receive msg: JobID 13\n2016/04/12 14:19:01 work id: 2, receive msg: JobID 14\n2016/04/12 14:19:01 work id: 3, receive msg: JobID 15\n2016/04/12 14:19:01 work id: 4, receive msg: JobID 16\n2016/04/12 14:19:01 work id: 5, receive msg: JobID 17\n2016/04/12 14:19:01 work id: 6, receive msg: JobID 18\n2016/04/12 14:19:01 work id: 7, receive msg: JobID 19\n2016/04/12 14:19:01 working result: JobID 10 is done...\n2016/04/12 14:19:01 working result: JobID 11 is done...\n2016/04/12 14:19:01 working result: JobID 12 is done...\n2016/04/12 14:19:01 working result: JobID 13 is done...\n2016/04/12 14:19:01 working result: JobID 14 is done...\n2016/04/12 14:19:01 working result: JobID 15 is done...\n2016/04/12 14:19:01 working result: JobID 16 is done...\n2016/04/12 14:19:01 working result: JobID 17 is done...\n2016/04/12 14:19:01 working result: JobID 18 is done...\n2016/04/12 14:19:01 working result: JobID 19 is done...\n```\n由上可以见, 程序中同时最多有10个工作任务在运行。\n\n### 示例2, 更规范的用法\n我们引入同步锁, 并把工作池定义成一个结构体WorkPool， 包含poolSize和tasks成员, 并实现WorkPool.Run方法:\n```golang\npackage main\n\nimport (\n\t\"fmt\"\n\t\"log\"\n\t\"sync\"\n\t\"time\"\n)\n\n// WorkPool worker pool definition\ntype WorkPool struct {\n\tpoolSize int\n\ttasks    chan string\n}\n\n// Run initialize worker pool, ready to run tasks\nfunc (wp *WorkPool) Run() {\n\tvar wg sync.WaitGroup\n\tfor i := 0; i < wp.poolSize; i++ {\n\t\twg.Add(1)\n\t\ttaskID := i\n\t\tgo func() {\n\t\t\tlog.Printf(\"Initiate worker %v...\", taskID)\n\t\t\tfor j := range wp.tasks {\n\t\t\t\tlog.Printf(\"work id: %v, receive msg: %v\", taskID, j)\n\t\t\t\ttime.Sleep(time.Second * 1)\n\t\t\t}\n\t\t\twg.Done()\n\t\t}()\n\t}\n\twg.Wait()\n\tlog.Println(\"WorkPool is destroyed.\")\n}\n\nfunc main() {\n\ttasks := make(chan string, 20)\n\n\t// to generate jobs\n\tgo func() {\n\t\ttime.Sleep(time.Second * 2)\n\t\tfor i := 0; i < 30; i++ {\n\t\t\tjob := fmt.Sprintf(\"jobID %v\", i)\n\t\t\ttasks <- job\n\t\t}\n\t\t// if not close tasks, will cause deadlock\n\t\tclose(tasks)\n\t}()\n\n\twp := WorkPool{\n\t\tpoolSize: 10,\n\t\ttasks:    tasks,\n\t}\n\twp.Run()\n}\n```\n运行结果:\n```bash\n2016/04/12 15:01:03 Initiate worker 9...\n2016/04/12 15:01:03 Initiate worker 0...\n2016/04/12 15:01:03 Initiate worker 1...\n2016/04/12 15:01:03 Initiate worker 2...\n2016/04/12 15:01:03 Initiate worker 3...\n2016/04/12 15:01:03 Initiate worker 4...\n2016/04/12 15:01:03 Initiate worker 5...\n2016/04/12 15:01:03 Initiate worker 6...\n2016/04/12 15:01:03 Initiate worker 7...\n2016/04/12 15:01:03 Initiate worker 8...\n2016/04/12 15:01:05 work id: 8, receive msg: jobID 0\n2016/04/12 15:01:05 work id: 9, receive msg: jobID 1\n2016/04/12 15:01:05 work id: 0, receive msg: jobID 2\n2016/04/12 15:01:05 work id: 1, receive msg: jobID 3\n2016/04/12 15:01:05 work id: 2, receive msg: jobID 4\n2016/04/12 15:01:05 work id: 3, receive msg: jobID 5\n2016/04/12 15:01:05 work id: 4, receive msg: jobID 6\n2016/04/12 15:01:05 work id: 5, receive msg: jobID 7\n2016/04/12 15:01:05 work id: 6, receive msg: jobID 8\n2016/04/12 15:01:05 work id: 7, receive msg: jobID 9\n2016/04/12 15:01:06 work id: 7, receive msg: jobID 10\n2016/04/12 15:01:06 work id: 8, receive msg: jobID 11\n2016/04/12 15:01:06 work id: 9, receive msg: jobID 12\n2016/04/12 15:01:06 work id: 0, receive msg: jobID 13\n2016/04/12 15:01:06 work id: 1, receive msg: jobID 14\n2016/04/12 15:01:06 work id: 2, receive msg: jobID 15\n2016/04/12 15:01:06 work id: 3, receive msg: jobID 16\n2016/04/12 15:01:06 work id: 4, receive msg: jobID 17\n2016/04/12 15:01:06 work id: 5, receive msg: jobID 18\n2016/04/12 15:01:06 work id: 6, receive msg: jobID 19\n2016/04/12 15:01:07 work id: 6, receive msg: jobID 20\n2016/04/12 15:01:07 work id: 7, receive msg: jobID 21\n2016/04/12 15:01:07 work id: 8, receive msg: jobID 22\n2016/04/12 15:01:07 work id: 9, receive msg: jobID 23\n2016/04/12 15:01:07 work id: 0, receive msg: jobID 24\n2016/04/12 15:01:07 work id: 1, receive msg: jobID 25\n2016/04/12 15:01:07 work id: 2, receive msg: jobID 26\n2016/04/12 15:01:07 work id: 3, receive msg: jobID 27\n2016/04/12 15:01:07 work id: 4, receive msg: jobID 28\n2016/04/12 15:01:07 work id: 5, receive msg: jobID 29\n2016/04/12 15:01:08 WorkPool is destroyed.\n```\n由上可见, 同时最多只有10个任务在执行；调用close(tasks)后, 所有工作任务完成, 工作池销毁, 主进程退出。\n\n","slug":"golang/golang-工作池workerpool","published":1,"updated":"2017-08-10T10:20:36.402Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj84nao31000j7v4d87li9v8k","content":"<p>在并发量比较高的场景中, 服务程序既要快速处理请求, 也要限制并行处理的gorontine量, 否则会造成系统资源的浪费或负载过高。</p>\n<p>创建一个goroutine工作池, 是一个比较合理的解决方案。</p>\n<h3 id=\"示例1\"><a href=\"#示例1\" class=\"headerlink\" title=\"示例1\"></a>示例1</h3><a id=\"more\"></a>\n<figure class=\"highlight golang\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">package</span> main</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">import</span> (</div><div class=\"line\">\t<span class=\"string\">\"fmt\"</span></div><div class=\"line\">\t<span class=\"string\">\"log\"</span></div><div class=\"line\">\t<span class=\"string\">\"time\"</span></div><div class=\"line\">)</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">const</span> (</div><div class=\"line\">\t<span class=\"comment\">// PoolSize defines the pool size</span></div><div class=\"line\">\tPoolSize = <span class=\"number\">10</span></div><div class=\"line\">)</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// Jobs jobs channel</span></div><div class=\"line\"><span class=\"keyword\">var</span> Jobs <span class=\"keyword\">chan</span> <span class=\"keyword\">string</span> = <span class=\"built_in\">make</span>(<span class=\"keyword\">chan</span> <span class=\"keyword\">string</span>, <span class=\"number\">30</span>)</div><div class=\"line\"><span class=\"keyword\">var</span> Result <span class=\"keyword\">chan</span> <span class=\"keyword\">string</span> = <span class=\"built_in\">make</span>(<span class=\"keyword\">chan</span> <span class=\"keyword\">string</span>, <span class=\"number\">30</span>)</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// Working do working</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">Working</span><span class=\"params\">(workID <span class=\"keyword\">int</span>)</span></span> &#123;</div><div class=\"line\">\tlog.Printf(<span class=\"string\">\"Initiate worker %v...\"</span>, workID)</div><div class=\"line\">\t<span class=\"keyword\">for</span> j := <span class=\"keyword\">range</span> Jobs &#123;</div><div class=\"line\">\t\tlog.Printf(<span class=\"string\">\"work id: %v, receive msg: %v\"</span>, workID, j)</div><div class=\"line\">\t\tResult &lt;- fmt.Sprintf(<span class=\"string\">\"%v is done...\"</span>, j)</div><div class=\"line\">\t\ttime.Sleep(time.Second * <span class=\"number\">1</span>)</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// InitWorkerPool initialize worker pool</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">InitWorkerPool</span><span class=\"params\">()</span></span> &#123;</div><div class=\"line\">\t<span class=\"keyword\">for</span> j := <span class=\"number\">0</span>; j &lt; PoolSize; j++ &#123;</div><div class=\"line\">\t\t<span class=\"keyword\">go</span> Working(j)</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</div><div class=\"line\">\tInitWorkerPool()</div><div class=\"line\">\t<span class=\"comment\">// to generate jobs</span></div><div class=\"line\">\ttime.Sleep(time.Second * <span class=\"number\">2</span>)</div><div class=\"line\">\t<span class=\"keyword\">for</span> i := <span class=\"number\">0</span>; i &lt; <span class=\"number\">20</span>; i++ &#123;</div><div class=\"line\">\t\tjob := fmt.Sprintf(<span class=\"string\">\"JobID %v\"</span>, i)</div><div class=\"line\">\t\tJobs &lt;- job</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t<span class=\"built_in\">close</span>(Jobs)</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"keyword\">for</span> i := <span class=\"number\">0</span>; i &lt; <span class=\"number\">20</span>; i++ &#123;</div><div class=\"line\">\t\tlog.Printf(<span class=\"string\">\"working result: %v\"</span>, &lt;-Result)</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>运行结果:<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div></pre></td><td class=\"code\"><pre><div class=\"line\">2016/04/12 14:18:58 Initiate worker 0...</div><div class=\"line\">2016/04/12 14:18:58 Initiate worker 1...</div><div class=\"line\">2016/04/12 14:18:58 Initiate worker 2...</div><div class=\"line\">2016/04/12 14:18:58 Initiate worker 3...</div><div class=\"line\">2016/04/12 14:18:58 Initiate worker 4...</div><div class=\"line\">2016/04/12 14:18:58 Initiate worker 5...</div><div class=\"line\">2016/04/12 14:18:58 Initiate worker 6...</div><div class=\"line\">2016/04/12 14:18:58 Initiate worker 7...</div><div class=\"line\">2016/04/12 14:18:58 Initiate worker 8...</div><div class=\"line\">2016/04/12 14:18:58 Initiate worker 9...</div><div class=\"line\">2016/04/12 14:19:00 work id: 9, receive msg: JobID 0</div><div class=\"line\">2016/04/12 14:19:00 work id: 0, receive msg: JobID 1</div><div class=\"line\">2016/04/12 14:19:00 work id: 1, receive msg: JobID 2</div><div class=\"line\">2016/04/12 14:19:00 work id: 2, receive msg: JobID 3</div><div class=\"line\">2016/04/12 14:19:00 work id: 3, receive msg: JobID 4</div><div class=\"line\">2016/04/12 14:19:00 work id: 4, receive msg: JobID 5</div><div class=\"line\">2016/04/12 14:19:00 work id: 5, receive msg: JobID 6</div><div class=\"line\">2016/04/12 14:19:00 work id: 6, receive msg: JobID 7</div><div class=\"line\">2016/04/12 14:19:00 work id: 7, receive msg: JobID 8</div><div class=\"line\">2016/04/12 14:19:00 work id: 8, receive msg: JobID 9</div><div class=\"line\">2016/04/12 14:19:00 working result: JobID 0 is <span class=\"keyword\">done</span>...</div><div class=\"line\">2016/04/12 14:19:00 working result: JobID 1 is <span class=\"keyword\">done</span>...</div><div class=\"line\">2016/04/12 14:19:00 working result: JobID 2 is <span class=\"keyword\">done</span>...</div><div class=\"line\">2016/04/12 14:19:00 working result: JobID 3 is <span class=\"keyword\">done</span>...</div><div class=\"line\">2016/04/12 14:19:00 working result: JobID 4 is <span class=\"keyword\">done</span>...</div><div class=\"line\">2016/04/12 14:19:00 working result: JobID 5 is <span class=\"keyword\">done</span>...</div><div class=\"line\">2016/04/12 14:19:00 working result: JobID 6 is <span class=\"keyword\">done</span>...</div><div class=\"line\">2016/04/12 14:19:00 working result: JobID 7 is <span class=\"keyword\">done</span>...</div><div class=\"line\">2016/04/12 14:19:00 working result: JobID 8 is <span class=\"keyword\">done</span>...</div><div class=\"line\">2016/04/12 14:19:00 working result: JobID 9 is <span class=\"keyword\">done</span>...</div><div class=\"line\">2016/04/12 14:19:01 work id: 8, receive msg: JobID 10</div><div class=\"line\">2016/04/12 14:19:01 work id: 9, receive msg: JobID 11</div><div class=\"line\">2016/04/12 14:19:01 work id: 0, receive msg: JobID 12</div><div class=\"line\">2016/04/12 14:19:01 work id: 1, receive msg: JobID 13</div><div class=\"line\">2016/04/12 14:19:01 work id: 2, receive msg: JobID 14</div><div class=\"line\">2016/04/12 14:19:01 work id: 3, receive msg: JobID 15</div><div class=\"line\">2016/04/12 14:19:01 work id: 4, receive msg: JobID 16</div><div class=\"line\">2016/04/12 14:19:01 work id: 5, receive msg: JobID 17</div><div class=\"line\">2016/04/12 14:19:01 work id: 6, receive msg: JobID 18</div><div class=\"line\">2016/04/12 14:19:01 work id: 7, receive msg: JobID 19</div><div class=\"line\">2016/04/12 14:19:01 working result: JobID 10 is <span class=\"keyword\">done</span>...</div><div class=\"line\">2016/04/12 14:19:01 working result: JobID 11 is <span class=\"keyword\">done</span>...</div><div class=\"line\">2016/04/12 14:19:01 working result: JobID 12 is <span class=\"keyword\">done</span>...</div><div class=\"line\">2016/04/12 14:19:01 working result: JobID 13 is <span class=\"keyword\">done</span>...</div><div class=\"line\">2016/04/12 14:19:01 working result: JobID 14 is <span class=\"keyword\">done</span>...</div><div class=\"line\">2016/04/12 14:19:01 working result: JobID 15 is <span class=\"keyword\">done</span>...</div><div class=\"line\">2016/04/12 14:19:01 working result: JobID 16 is <span class=\"keyword\">done</span>...</div><div class=\"line\">2016/04/12 14:19:01 working result: JobID 17 is <span class=\"keyword\">done</span>...</div><div class=\"line\">2016/04/12 14:19:01 working result: JobID 18 is <span class=\"keyword\">done</span>...</div><div class=\"line\">2016/04/12 14:19:01 working result: JobID 19 is <span class=\"keyword\">done</span>...</div></pre></td></tr></table></figure></p>\n<p>由上可以见, 程序中同时最多有10个工作任务在运行。</p>\n<h3 id=\"示例2-更规范的用法\"><a href=\"#示例2-更规范的用法\" class=\"headerlink\" title=\"示例2, 更规范的用法\"></a>示例2, 更规范的用法</h3><p>我们引入同步锁, 并把工作池定义成一个结构体WorkPool， 包含poolSize和tasks成员, 并实现WorkPool.Run方法:<br><figure class=\"highlight golang\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">package</span> main</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">import</span> (</div><div class=\"line\">\t<span class=\"string\">\"fmt\"</span></div><div class=\"line\">\t<span class=\"string\">\"log\"</span></div><div class=\"line\">\t<span class=\"string\">\"sync\"</span></div><div class=\"line\">\t<span class=\"string\">\"time\"</span></div><div class=\"line\">)</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// WorkPool worker pool definition</span></div><div class=\"line\"><span class=\"keyword\">type</span> WorkPool <span class=\"keyword\">struct</span> &#123;</div><div class=\"line\">\tpoolSize <span class=\"keyword\">int</span></div><div class=\"line\">\ttasks    <span class=\"keyword\">chan</span> <span class=\"keyword\">string</span></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// Run initialize worker pool, ready to run tasks</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(wp *WorkPool)</span> <span class=\"title\">Run</span><span class=\"params\">()</span></span> &#123;</div><div class=\"line\">\t<span class=\"keyword\">var</span> wg sync.WaitGroup</div><div class=\"line\">\t<span class=\"keyword\">for</span> i := <span class=\"number\">0</span>; i &lt; wp.poolSize; i++ &#123;</div><div class=\"line\">\t\twg.Add(<span class=\"number\">1</span>)</div><div class=\"line\">\t\ttaskID := i</div><div class=\"line\">\t\t<span class=\"keyword\">go</span> <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">()</span></span> &#123;</div><div class=\"line\">\t\t\tlog.Printf(<span class=\"string\">\"Initiate worker %v...\"</span>, taskID)</div><div class=\"line\">\t\t\t<span class=\"keyword\">for</span> j := <span class=\"keyword\">range</span> wp.tasks &#123;</div><div class=\"line\">\t\t\t\tlog.Printf(<span class=\"string\">\"work id: %v, receive msg: %v\"</span>, taskID, j)</div><div class=\"line\">\t\t\t\ttime.Sleep(time.Second * <span class=\"number\">1</span>)</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t\twg.Done()</div><div class=\"line\">\t\t&#125;()</div><div class=\"line\">\t&#125;</div><div class=\"line\">\twg.Wait()</div><div class=\"line\">\tlog.Println(<span class=\"string\">\"WorkPool is destroyed.\"</span>)</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</div><div class=\"line\">\ttasks := <span class=\"built_in\">make</span>(<span class=\"keyword\">chan</span> <span class=\"keyword\">string</span>, <span class=\"number\">20</span>)</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"comment\">// to generate jobs</span></div><div class=\"line\">\t<span class=\"keyword\">go</span> <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">()</span></span> &#123;</div><div class=\"line\">\t\ttime.Sleep(time.Second * <span class=\"number\">2</span>)</div><div class=\"line\">\t\t<span class=\"keyword\">for</span> i := <span class=\"number\">0</span>; i &lt; <span class=\"number\">30</span>; i++ &#123;</div><div class=\"line\">\t\t\tjob := fmt.Sprintf(<span class=\"string\">\"jobID %v\"</span>, i)</div><div class=\"line\">\t\t\ttasks &lt;- job</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\t<span class=\"comment\">// if not close tasks, will cause deadlock</span></div><div class=\"line\">\t\t<span class=\"built_in\">close</span>(tasks)</div><div class=\"line\">\t&#125;()</div><div class=\"line\"></div><div class=\"line\">\twp := WorkPool&#123;</div><div class=\"line\">\t\tpoolSize: <span class=\"number\">10</span>,</div><div class=\"line\">\t\ttasks:    tasks,</div><div class=\"line\">\t&#125;</div><div class=\"line\">\twp.Run()</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>运行结果:<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div></pre></td><td class=\"code\"><pre><div class=\"line\">2016/04/12 15:01:03 Initiate worker 9...</div><div class=\"line\">2016/04/12 15:01:03 Initiate worker 0...</div><div class=\"line\">2016/04/12 15:01:03 Initiate worker 1...</div><div class=\"line\">2016/04/12 15:01:03 Initiate worker 2...</div><div class=\"line\">2016/04/12 15:01:03 Initiate worker 3...</div><div class=\"line\">2016/04/12 15:01:03 Initiate worker 4...</div><div class=\"line\">2016/04/12 15:01:03 Initiate worker 5...</div><div class=\"line\">2016/04/12 15:01:03 Initiate worker 6...</div><div class=\"line\">2016/04/12 15:01:03 Initiate worker 7...</div><div class=\"line\">2016/04/12 15:01:03 Initiate worker 8...</div><div class=\"line\">2016/04/12 15:01:05 work id: 8, receive msg: jobID 0</div><div class=\"line\">2016/04/12 15:01:05 work id: 9, receive msg: jobID 1</div><div class=\"line\">2016/04/12 15:01:05 work id: 0, receive msg: jobID 2</div><div class=\"line\">2016/04/12 15:01:05 work id: 1, receive msg: jobID 3</div><div class=\"line\">2016/04/12 15:01:05 work id: 2, receive msg: jobID 4</div><div class=\"line\">2016/04/12 15:01:05 work id: 3, receive msg: jobID 5</div><div class=\"line\">2016/04/12 15:01:05 work id: 4, receive msg: jobID 6</div><div class=\"line\">2016/04/12 15:01:05 work id: 5, receive msg: jobID 7</div><div class=\"line\">2016/04/12 15:01:05 work id: 6, receive msg: jobID 8</div><div class=\"line\">2016/04/12 15:01:05 work id: 7, receive msg: jobID 9</div><div class=\"line\">2016/04/12 15:01:06 work id: 7, receive msg: jobID 10</div><div class=\"line\">2016/04/12 15:01:06 work id: 8, receive msg: jobID 11</div><div class=\"line\">2016/04/12 15:01:06 work id: 9, receive msg: jobID 12</div><div class=\"line\">2016/04/12 15:01:06 work id: 0, receive msg: jobID 13</div><div class=\"line\">2016/04/12 15:01:06 work id: 1, receive msg: jobID 14</div><div class=\"line\">2016/04/12 15:01:06 work id: 2, receive msg: jobID 15</div><div class=\"line\">2016/04/12 15:01:06 work id: 3, receive msg: jobID 16</div><div class=\"line\">2016/04/12 15:01:06 work id: 4, receive msg: jobID 17</div><div class=\"line\">2016/04/12 15:01:06 work id: 5, receive msg: jobID 18</div><div class=\"line\">2016/04/12 15:01:06 work id: 6, receive msg: jobID 19</div><div class=\"line\">2016/04/12 15:01:07 work id: 6, receive msg: jobID 20</div><div class=\"line\">2016/04/12 15:01:07 work id: 7, receive msg: jobID 21</div><div class=\"line\">2016/04/12 15:01:07 work id: 8, receive msg: jobID 22</div><div class=\"line\">2016/04/12 15:01:07 work id: 9, receive msg: jobID 23</div><div class=\"line\">2016/04/12 15:01:07 work id: 0, receive msg: jobID 24</div><div class=\"line\">2016/04/12 15:01:07 work id: 1, receive msg: jobID 25</div><div class=\"line\">2016/04/12 15:01:07 work id: 2, receive msg: jobID 26</div><div class=\"line\">2016/04/12 15:01:07 work id: 3, receive msg: jobID 27</div><div class=\"line\">2016/04/12 15:01:07 work id: 4, receive msg: jobID 28</div><div class=\"line\">2016/04/12 15:01:07 work id: 5, receive msg: jobID 29</div><div class=\"line\">2016/04/12 15:01:08 WorkPool is destroyed.</div></pre></td></tr></table></figure></p>\n<p>由上可见, 同时最多只有10个任务在执行；调用close(tasks)后, 所有工作任务完成, 工作池销毁, 主进程退出。</p>\n","site":{"data":{}},"excerpt":"<p>在并发量比较高的场景中, 服务程序既要快速处理请求, 也要限制并行处理的gorontine量, 否则会造成系统资源的浪费或负载过高。</p>\n<p>创建一个goroutine工作池, 是一个比较合理的解决方案。</p>\n<h3 id=\"示例1\"><a href=\"#示例1\" class=\"headerlink\" title=\"示例1\"></a>示例1</h3>","more":"<figure class=\"highlight golang\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">package</span> main</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">import</span> (</div><div class=\"line\">\t<span class=\"string\">\"fmt\"</span></div><div class=\"line\">\t<span class=\"string\">\"log\"</span></div><div class=\"line\">\t<span class=\"string\">\"time\"</span></div><div class=\"line\">)</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">const</span> (</div><div class=\"line\">\t<span class=\"comment\">// PoolSize defines the pool size</span></div><div class=\"line\">\tPoolSize = <span class=\"number\">10</span></div><div class=\"line\">)</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// Jobs jobs channel</span></div><div class=\"line\"><span class=\"keyword\">var</span> Jobs <span class=\"keyword\">chan</span> <span class=\"keyword\">string</span> = <span class=\"built_in\">make</span>(<span class=\"keyword\">chan</span> <span class=\"keyword\">string</span>, <span class=\"number\">30</span>)</div><div class=\"line\"><span class=\"keyword\">var</span> Result <span class=\"keyword\">chan</span> <span class=\"keyword\">string</span> = <span class=\"built_in\">make</span>(<span class=\"keyword\">chan</span> <span class=\"keyword\">string</span>, <span class=\"number\">30</span>)</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// Working do working</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">Working</span><span class=\"params\">(workID <span class=\"keyword\">int</span>)</span></span> &#123;</div><div class=\"line\">\tlog.Printf(<span class=\"string\">\"Initiate worker %v...\"</span>, workID)</div><div class=\"line\">\t<span class=\"keyword\">for</span> j := <span class=\"keyword\">range</span> Jobs &#123;</div><div class=\"line\">\t\tlog.Printf(<span class=\"string\">\"work id: %v, receive msg: %v\"</span>, workID, j)</div><div class=\"line\">\t\tResult &lt;- fmt.Sprintf(<span class=\"string\">\"%v is done...\"</span>, j)</div><div class=\"line\">\t\ttime.Sleep(time.Second * <span class=\"number\">1</span>)</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// InitWorkerPool initialize worker pool</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">InitWorkerPool</span><span class=\"params\">()</span></span> &#123;</div><div class=\"line\">\t<span class=\"keyword\">for</span> j := <span class=\"number\">0</span>; j &lt; PoolSize; j++ &#123;</div><div class=\"line\">\t\t<span class=\"keyword\">go</span> Working(j)</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</div><div class=\"line\">\tInitWorkerPool()</div><div class=\"line\">\t<span class=\"comment\">// to generate jobs</span></div><div class=\"line\">\ttime.Sleep(time.Second * <span class=\"number\">2</span>)</div><div class=\"line\">\t<span class=\"keyword\">for</span> i := <span class=\"number\">0</span>; i &lt; <span class=\"number\">20</span>; i++ &#123;</div><div class=\"line\">\t\tjob := fmt.Sprintf(<span class=\"string\">\"JobID %v\"</span>, i)</div><div class=\"line\">\t\tJobs &lt;- job</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t<span class=\"built_in\">close</span>(Jobs)</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"keyword\">for</span> i := <span class=\"number\">0</span>; i &lt; <span class=\"number\">20</span>; i++ &#123;</div><div class=\"line\">\t\tlog.Printf(<span class=\"string\">\"working result: %v\"</span>, &lt;-Result)</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>运行结果:<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div></pre></td><td class=\"code\"><pre><div class=\"line\">2016/04/12 14:18:58 Initiate worker 0...</div><div class=\"line\">2016/04/12 14:18:58 Initiate worker 1...</div><div class=\"line\">2016/04/12 14:18:58 Initiate worker 2...</div><div class=\"line\">2016/04/12 14:18:58 Initiate worker 3...</div><div class=\"line\">2016/04/12 14:18:58 Initiate worker 4...</div><div class=\"line\">2016/04/12 14:18:58 Initiate worker 5...</div><div class=\"line\">2016/04/12 14:18:58 Initiate worker 6...</div><div class=\"line\">2016/04/12 14:18:58 Initiate worker 7...</div><div class=\"line\">2016/04/12 14:18:58 Initiate worker 8...</div><div class=\"line\">2016/04/12 14:18:58 Initiate worker 9...</div><div class=\"line\">2016/04/12 14:19:00 work id: 9, receive msg: JobID 0</div><div class=\"line\">2016/04/12 14:19:00 work id: 0, receive msg: JobID 1</div><div class=\"line\">2016/04/12 14:19:00 work id: 1, receive msg: JobID 2</div><div class=\"line\">2016/04/12 14:19:00 work id: 2, receive msg: JobID 3</div><div class=\"line\">2016/04/12 14:19:00 work id: 3, receive msg: JobID 4</div><div class=\"line\">2016/04/12 14:19:00 work id: 4, receive msg: JobID 5</div><div class=\"line\">2016/04/12 14:19:00 work id: 5, receive msg: JobID 6</div><div class=\"line\">2016/04/12 14:19:00 work id: 6, receive msg: JobID 7</div><div class=\"line\">2016/04/12 14:19:00 work id: 7, receive msg: JobID 8</div><div class=\"line\">2016/04/12 14:19:00 work id: 8, receive msg: JobID 9</div><div class=\"line\">2016/04/12 14:19:00 working result: JobID 0 is <span class=\"keyword\">done</span>...</div><div class=\"line\">2016/04/12 14:19:00 working result: JobID 1 is <span class=\"keyword\">done</span>...</div><div class=\"line\">2016/04/12 14:19:00 working result: JobID 2 is <span class=\"keyword\">done</span>...</div><div class=\"line\">2016/04/12 14:19:00 working result: JobID 3 is <span class=\"keyword\">done</span>...</div><div class=\"line\">2016/04/12 14:19:00 working result: JobID 4 is <span class=\"keyword\">done</span>...</div><div class=\"line\">2016/04/12 14:19:00 working result: JobID 5 is <span class=\"keyword\">done</span>...</div><div class=\"line\">2016/04/12 14:19:00 working result: JobID 6 is <span class=\"keyword\">done</span>...</div><div class=\"line\">2016/04/12 14:19:00 working result: JobID 7 is <span class=\"keyword\">done</span>...</div><div class=\"line\">2016/04/12 14:19:00 working result: JobID 8 is <span class=\"keyword\">done</span>...</div><div class=\"line\">2016/04/12 14:19:00 working result: JobID 9 is <span class=\"keyword\">done</span>...</div><div class=\"line\">2016/04/12 14:19:01 work id: 8, receive msg: JobID 10</div><div class=\"line\">2016/04/12 14:19:01 work id: 9, receive msg: JobID 11</div><div class=\"line\">2016/04/12 14:19:01 work id: 0, receive msg: JobID 12</div><div class=\"line\">2016/04/12 14:19:01 work id: 1, receive msg: JobID 13</div><div class=\"line\">2016/04/12 14:19:01 work id: 2, receive msg: JobID 14</div><div class=\"line\">2016/04/12 14:19:01 work id: 3, receive msg: JobID 15</div><div class=\"line\">2016/04/12 14:19:01 work id: 4, receive msg: JobID 16</div><div class=\"line\">2016/04/12 14:19:01 work id: 5, receive msg: JobID 17</div><div class=\"line\">2016/04/12 14:19:01 work id: 6, receive msg: JobID 18</div><div class=\"line\">2016/04/12 14:19:01 work id: 7, receive msg: JobID 19</div><div class=\"line\">2016/04/12 14:19:01 working result: JobID 10 is <span class=\"keyword\">done</span>...</div><div class=\"line\">2016/04/12 14:19:01 working result: JobID 11 is <span class=\"keyword\">done</span>...</div><div class=\"line\">2016/04/12 14:19:01 working result: JobID 12 is <span class=\"keyword\">done</span>...</div><div class=\"line\">2016/04/12 14:19:01 working result: JobID 13 is <span class=\"keyword\">done</span>...</div><div class=\"line\">2016/04/12 14:19:01 working result: JobID 14 is <span class=\"keyword\">done</span>...</div><div class=\"line\">2016/04/12 14:19:01 working result: JobID 15 is <span class=\"keyword\">done</span>...</div><div class=\"line\">2016/04/12 14:19:01 working result: JobID 16 is <span class=\"keyword\">done</span>...</div><div class=\"line\">2016/04/12 14:19:01 working result: JobID 17 is <span class=\"keyword\">done</span>...</div><div class=\"line\">2016/04/12 14:19:01 working result: JobID 18 is <span class=\"keyword\">done</span>...</div><div class=\"line\">2016/04/12 14:19:01 working result: JobID 19 is <span class=\"keyword\">done</span>...</div></pre></td></tr></table></figure></p>\n<p>由上可以见, 程序中同时最多有10个工作任务在运行。</p>\n<h3 id=\"示例2-更规范的用法\"><a href=\"#示例2-更规范的用法\" class=\"headerlink\" title=\"示例2, 更规范的用法\"></a>示例2, 更规范的用法</h3><p>我们引入同步锁, 并把工作池定义成一个结构体WorkPool， 包含poolSize和tasks成员, 并实现WorkPool.Run方法:<br><figure class=\"highlight golang\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">package</span> main</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">import</span> (</div><div class=\"line\">\t<span class=\"string\">\"fmt\"</span></div><div class=\"line\">\t<span class=\"string\">\"log\"</span></div><div class=\"line\">\t<span class=\"string\">\"sync\"</span></div><div class=\"line\">\t<span class=\"string\">\"time\"</span></div><div class=\"line\">)</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// WorkPool worker pool definition</span></div><div class=\"line\"><span class=\"keyword\">type</span> WorkPool <span class=\"keyword\">struct</span> &#123;</div><div class=\"line\">\tpoolSize <span class=\"keyword\">int</span></div><div class=\"line\">\ttasks    <span class=\"keyword\">chan</span> <span class=\"keyword\">string</span></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// Run initialize worker pool, ready to run tasks</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(wp *WorkPool)</span> <span class=\"title\">Run</span><span class=\"params\">()</span></span> &#123;</div><div class=\"line\">\t<span class=\"keyword\">var</span> wg sync.WaitGroup</div><div class=\"line\">\t<span class=\"keyword\">for</span> i := <span class=\"number\">0</span>; i &lt; wp.poolSize; i++ &#123;</div><div class=\"line\">\t\twg.Add(<span class=\"number\">1</span>)</div><div class=\"line\">\t\ttaskID := i</div><div class=\"line\">\t\t<span class=\"keyword\">go</span> <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">()</span></span> &#123;</div><div class=\"line\">\t\t\tlog.Printf(<span class=\"string\">\"Initiate worker %v...\"</span>, taskID)</div><div class=\"line\">\t\t\t<span class=\"keyword\">for</span> j := <span class=\"keyword\">range</span> wp.tasks &#123;</div><div class=\"line\">\t\t\t\tlog.Printf(<span class=\"string\">\"work id: %v, receive msg: %v\"</span>, taskID, j)</div><div class=\"line\">\t\t\t\ttime.Sleep(time.Second * <span class=\"number\">1</span>)</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t\twg.Done()</div><div class=\"line\">\t\t&#125;()</div><div class=\"line\">\t&#125;</div><div class=\"line\">\twg.Wait()</div><div class=\"line\">\tlog.Println(<span class=\"string\">\"WorkPool is destroyed.\"</span>)</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</div><div class=\"line\">\ttasks := <span class=\"built_in\">make</span>(<span class=\"keyword\">chan</span> <span class=\"keyword\">string</span>, <span class=\"number\">20</span>)</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"comment\">// to generate jobs</span></div><div class=\"line\">\t<span class=\"keyword\">go</span> <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">()</span></span> &#123;</div><div class=\"line\">\t\ttime.Sleep(time.Second * <span class=\"number\">2</span>)</div><div class=\"line\">\t\t<span class=\"keyword\">for</span> i := <span class=\"number\">0</span>; i &lt; <span class=\"number\">30</span>; i++ &#123;</div><div class=\"line\">\t\t\tjob := fmt.Sprintf(<span class=\"string\">\"jobID %v\"</span>, i)</div><div class=\"line\">\t\t\ttasks &lt;- job</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\t<span class=\"comment\">// if not close tasks, will cause deadlock</span></div><div class=\"line\">\t\t<span class=\"built_in\">close</span>(tasks)</div><div class=\"line\">\t&#125;()</div><div class=\"line\"></div><div class=\"line\">\twp := WorkPool&#123;</div><div class=\"line\">\t\tpoolSize: <span class=\"number\">10</span>,</div><div class=\"line\">\t\ttasks:    tasks,</div><div class=\"line\">\t&#125;</div><div class=\"line\">\twp.Run()</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>运行结果:<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div></pre></td><td class=\"code\"><pre><div class=\"line\">2016/04/12 15:01:03 Initiate worker 9...</div><div class=\"line\">2016/04/12 15:01:03 Initiate worker 0...</div><div class=\"line\">2016/04/12 15:01:03 Initiate worker 1...</div><div class=\"line\">2016/04/12 15:01:03 Initiate worker 2...</div><div class=\"line\">2016/04/12 15:01:03 Initiate worker 3...</div><div class=\"line\">2016/04/12 15:01:03 Initiate worker 4...</div><div class=\"line\">2016/04/12 15:01:03 Initiate worker 5...</div><div class=\"line\">2016/04/12 15:01:03 Initiate worker 6...</div><div class=\"line\">2016/04/12 15:01:03 Initiate worker 7...</div><div class=\"line\">2016/04/12 15:01:03 Initiate worker 8...</div><div class=\"line\">2016/04/12 15:01:05 work id: 8, receive msg: jobID 0</div><div class=\"line\">2016/04/12 15:01:05 work id: 9, receive msg: jobID 1</div><div class=\"line\">2016/04/12 15:01:05 work id: 0, receive msg: jobID 2</div><div class=\"line\">2016/04/12 15:01:05 work id: 1, receive msg: jobID 3</div><div class=\"line\">2016/04/12 15:01:05 work id: 2, receive msg: jobID 4</div><div class=\"line\">2016/04/12 15:01:05 work id: 3, receive msg: jobID 5</div><div class=\"line\">2016/04/12 15:01:05 work id: 4, receive msg: jobID 6</div><div class=\"line\">2016/04/12 15:01:05 work id: 5, receive msg: jobID 7</div><div class=\"line\">2016/04/12 15:01:05 work id: 6, receive msg: jobID 8</div><div class=\"line\">2016/04/12 15:01:05 work id: 7, receive msg: jobID 9</div><div class=\"line\">2016/04/12 15:01:06 work id: 7, receive msg: jobID 10</div><div class=\"line\">2016/04/12 15:01:06 work id: 8, receive msg: jobID 11</div><div class=\"line\">2016/04/12 15:01:06 work id: 9, receive msg: jobID 12</div><div class=\"line\">2016/04/12 15:01:06 work id: 0, receive msg: jobID 13</div><div class=\"line\">2016/04/12 15:01:06 work id: 1, receive msg: jobID 14</div><div class=\"line\">2016/04/12 15:01:06 work id: 2, receive msg: jobID 15</div><div class=\"line\">2016/04/12 15:01:06 work id: 3, receive msg: jobID 16</div><div class=\"line\">2016/04/12 15:01:06 work id: 4, receive msg: jobID 17</div><div class=\"line\">2016/04/12 15:01:06 work id: 5, receive msg: jobID 18</div><div class=\"line\">2016/04/12 15:01:06 work id: 6, receive msg: jobID 19</div><div class=\"line\">2016/04/12 15:01:07 work id: 6, receive msg: jobID 20</div><div class=\"line\">2016/04/12 15:01:07 work id: 7, receive msg: jobID 21</div><div class=\"line\">2016/04/12 15:01:07 work id: 8, receive msg: jobID 22</div><div class=\"line\">2016/04/12 15:01:07 work id: 9, receive msg: jobID 23</div><div class=\"line\">2016/04/12 15:01:07 work id: 0, receive msg: jobID 24</div><div class=\"line\">2016/04/12 15:01:07 work id: 1, receive msg: jobID 25</div><div class=\"line\">2016/04/12 15:01:07 work id: 2, receive msg: jobID 26</div><div class=\"line\">2016/04/12 15:01:07 work id: 3, receive msg: jobID 27</div><div class=\"line\">2016/04/12 15:01:07 work id: 4, receive msg: jobID 28</div><div class=\"line\">2016/04/12 15:01:07 work id: 5, receive msg: jobID 29</div><div class=\"line\">2016/04/12 15:01:08 WorkPool is destroyed.</div></pre></td></tr></table></figure></p>\n<p>由上可见, 同时最多只有10个任务在执行；调用close(tasks)后, 所有工作任务完成, 工作池销毁, 主进程退出。</p>"},{"layout":"[golang]array-slice","title":"golang数组与切片","date":"2017-01-30T01:00:18.000Z","_content":"\n### array类型\n#### 1)基础特性\n- array为固定长度的数组, 其内存分配为连续的, 使用前需确定长度;\n- 数组为值类型, 赋值操作的新变量是原数组的一份完整拷贝;\n- 作为函数的传递参数, 实际也是数组的一份拷贝, 效率也就比传递指针低;\n- 数组长度也是Type一部分, 如[4]int和[2]int类型不一样.\n\n<!--more-->\n\n#### 2)声明与初始化\n```golang\npackage main\nimport \"fmt\"\n\n// 只声明, 不作初始化\nvar a1 [3]int         //一维, [0 0 0]\nvar a2 [2][2]int      //二维, [[0,0],[0,0]]\n\n// 声明并初始化\nvar b1 [5]int = [5]int{1,2,3,4,5}\nvar b2 [4]string = [4]string{\"Red\", \"Blue\", \"Green\", \"Yellow\"}\nvar b3 [2][2]int = [2][2]int{[2]int{5,6}, [2]int{7,8}}\n// 不能在顶层进行快速声明和初始化, 需用: var b4 [3]string = ...\n//b4 := [3]string{\"a\", \"b\", \"c\"}\n\n// 几种常用初始化方法(在函数内使用)\nfunc arrInFunc(){\n    a := [3]int{1,2,3}    // 所有元素赋值\n    b := [5]int{1,2,3}    // 前三个元素赋值，其他默认0\n    c := [15]int{10:3}    // 指定第11个元素初始化为3，其他默认0\n    d := [...]int{4,5,6}  // 编译器自动推断长度\n    e := [...]int{0:1, 1:2, 5:7} //自动推断长度\n    fmt.Printf(\"%v\\n\", a)\n    fmt.Printf(\"%v\\n\", b)\n    fmt.Printf(\"%v\\n\", c)\n    fmt.Printf(\"%v\\n\", d)\n    fmt.Printf(\"%v\\n\", e)\n}\n\nfunc main(){\n    arrInFunc()\n}\n```\nmain.go演示效果如下:\n```bash\nroot@XIAOMO:~/gopro# ./main\n[1 2 3]\n[1 2 3 0 0]\n[0 0 0 0 0 0 0 0 0 0 3 0 0 0 0]\n[4 5 6]\n[1 2 0 0 0 7]\n```\n\n#### 3)元素访问\nmain.go示例\n```golang\npackage main\n\nfunc accessElem() {\n    array := [3]int{1, 3, 9}\n\n    // 通过下标访问\n    for i:=0; i < len(array); i++ {\n        fmt.Println(i, array[i])\n    }\n\n    // 迭代方式访问\n    for i, v := range array {\n        fmt.Println(i, v)\n    }\n\n    // 使用new创建数组,零值填充, 返回数组指针\n    p := new([5]int)\n    fmt.Println(*p)\n}\n\nfunc main(){\n    accessElem()\n}\n```\n\n示例演示效果:\n```bash\nroot@XIAOMO:~/gopro# ./main\n0 1\n1 3\n2 9\n0 1\n1 3\n2 9\n[0 0 0 0 0]\n```\n\n#### 4)在函数中传递数组\n和C++类似, 函数参数传递中可以传值或传指针:\n\n```golang\n// 传值, 每次调用foo1, 系统将分配16字节内存在栈上\n// 函数运行结束时, 会弹栈并释放16字节内存\nfunc foo1(arr [16]int) {\n   // ...\n}\nvar a [16]int\nfoo1(a)\n\n// 传指针, 每次调用foo2, 系统将只分配指针需要的内存空间\nfunc foo2(arr *[16]int){\n    // ...\n}\nvar b [16]int\nfoo2(&b)\n```\n\n### slice类型\n#### 1)基础特性\n+ slice是一种动态数组, 可以认为是指向数组的指针; 但其并不只是指针，本身有其数据结构, 该结构包含三个元素:\n    - 指向原生数组的指针(pointer)\n    - 数组切片的元素个数(len)\n    - 数组切片已分配的空间(cap)\n+ slice作为一个引用类型, 声明是不需要指定长度;\n+ 增长操作通过内建方法append实现, 内部实现自动扩容.\n\n#### 2)创建和初始化\nmain.go\n```golang\npackage main\n\nfunc createSlice() {\n    // 通过array创建slice, 用法神似python\n    arr := [5]int{1,2,3,4,5}\n    sli1 := arr[:3]  // 切出前三个元素\n    sli2 := arr[:4]  // 切出前四个元素\n    sli1[1] = 8\n    sli2[1] = 9\n    // 将打印 9 9 9, 可见修改的是同一个元素\n    println(arr[1], sli1[1], sli2[1])\n\n    // 通过make创建slice\n    sli3 := make([]int, 3)\n    sli4 := make([]int, 4, 8) //初始4个元素，预留8个元素的空间\n    sli5 := []int{1,2,3,4,5}  //初始化赋值\n    fmt.Printf(\"%v\\n\", sli3)\n    fmt.Printf(\"%v\\n\", sli4)\n    fmt.Printf(\"%v\\n\", sli5)\n}\n\nfunc main(){\n    createSlice()\n}\n```\n#### 3)元素访问\n```golang\npackage main\n\nfunc useSlice() {\n    slice := []int{10, 20, 30, 40, 50}\n    for index, value := range slice {\n        fmt.Printf(\"Index: %d  Value: %d\\n\", index, value)\n    }\n\n    for i := 0; i < len(slice); i++ {\n        fmt.Printf(\"Index: %d  Value: %d\\n\", i, slice[i])\n    }\n}\n\nfunc main(){\n    useSlice()\n}\n```\n#### 4)在函数间传递slice\n由于slice是指向底层数组的指针, 在函数间传递slice是开销很小的。\n在64位机器中, slice对象占24个字节, 三个元素分别占8个字节。\n作为参数在函数中传递的方式和数组类似。\n\n### 关于new与make的区别探讨\n主要区别:\n\n- new可以用来创建各种类型对象, 也即是各类型的空间分配;\n- make用来处理内建类型(slice, channel, map等)的内存分配.\n","source":"_posts/golang/golang_array-slice.md","raw":"---\nlayout: '[golang]array-slice'\ntitle: golang数组与切片\ndate: 2017-01-30 09:00:18\ntags: golang\n---\n\n### array类型\n#### 1)基础特性\n- array为固定长度的数组, 其内存分配为连续的, 使用前需确定长度;\n- 数组为值类型, 赋值操作的新变量是原数组的一份完整拷贝;\n- 作为函数的传递参数, 实际也是数组的一份拷贝, 效率也就比传递指针低;\n- 数组长度也是Type一部分, 如[4]int和[2]int类型不一样.\n\n<!--more-->\n\n#### 2)声明与初始化\n```golang\npackage main\nimport \"fmt\"\n\n// 只声明, 不作初始化\nvar a1 [3]int         //一维, [0 0 0]\nvar a2 [2][2]int      //二维, [[0,0],[0,0]]\n\n// 声明并初始化\nvar b1 [5]int = [5]int{1,2,3,4,5}\nvar b2 [4]string = [4]string{\"Red\", \"Blue\", \"Green\", \"Yellow\"}\nvar b3 [2][2]int = [2][2]int{[2]int{5,6}, [2]int{7,8}}\n// 不能在顶层进行快速声明和初始化, 需用: var b4 [3]string = ...\n//b4 := [3]string{\"a\", \"b\", \"c\"}\n\n// 几种常用初始化方法(在函数内使用)\nfunc arrInFunc(){\n    a := [3]int{1,2,3}    // 所有元素赋值\n    b := [5]int{1,2,3}    // 前三个元素赋值，其他默认0\n    c := [15]int{10:3}    // 指定第11个元素初始化为3，其他默认0\n    d := [...]int{4,5,6}  // 编译器自动推断长度\n    e := [...]int{0:1, 1:2, 5:7} //自动推断长度\n    fmt.Printf(\"%v\\n\", a)\n    fmt.Printf(\"%v\\n\", b)\n    fmt.Printf(\"%v\\n\", c)\n    fmt.Printf(\"%v\\n\", d)\n    fmt.Printf(\"%v\\n\", e)\n}\n\nfunc main(){\n    arrInFunc()\n}\n```\nmain.go演示效果如下:\n```bash\nroot@XIAOMO:~/gopro# ./main\n[1 2 3]\n[1 2 3 0 0]\n[0 0 0 0 0 0 0 0 0 0 3 0 0 0 0]\n[4 5 6]\n[1 2 0 0 0 7]\n```\n\n#### 3)元素访问\nmain.go示例\n```golang\npackage main\n\nfunc accessElem() {\n    array := [3]int{1, 3, 9}\n\n    // 通过下标访问\n    for i:=0; i < len(array); i++ {\n        fmt.Println(i, array[i])\n    }\n\n    // 迭代方式访问\n    for i, v := range array {\n        fmt.Println(i, v)\n    }\n\n    // 使用new创建数组,零值填充, 返回数组指针\n    p := new([5]int)\n    fmt.Println(*p)\n}\n\nfunc main(){\n    accessElem()\n}\n```\n\n示例演示效果:\n```bash\nroot@XIAOMO:~/gopro# ./main\n0 1\n1 3\n2 9\n0 1\n1 3\n2 9\n[0 0 0 0 0]\n```\n\n#### 4)在函数中传递数组\n和C++类似, 函数参数传递中可以传值或传指针:\n\n```golang\n// 传值, 每次调用foo1, 系统将分配16字节内存在栈上\n// 函数运行结束时, 会弹栈并释放16字节内存\nfunc foo1(arr [16]int) {\n   // ...\n}\nvar a [16]int\nfoo1(a)\n\n// 传指针, 每次调用foo2, 系统将只分配指针需要的内存空间\nfunc foo2(arr *[16]int){\n    // ...\n}\nvar b [16]int\nfoo2(&b)\n```\n\n### slice类型\n#### 1)基础特性\n+ slice是一种动态数组, 可以认为是指向数组的指针; 但其并不只是指针，本身有其数据结构, 该结构包含三个元素:\n    - 指向原生数组的指针(pointer)\n    - 数组切片的元素个数(len)\n    - 数组切片已分配的空间(cap)\n+ slice作为一个引用类型, 声明是不需要指定长度;\n+ 增长操作通过内建方法append实现, 内部实现自动扩容.\n\n#### 2)创建和初始化\nmain.go\n```golang\npackage main\n\nfunc createSlice() {\n    // 通过array创建slice, 用法神似python\n    arr := [5]int{1,2,3,4,5}\n    sli1 := arr[:3]  // 切出前三个元素\n    sli2 := arr[:4]  // 切出前四个元素\n    sli1[1] = 8\n    sli2[1] = 9\n    // 将打印 9 9 9, 可见修改的是同一个元素\n    println(arr[1], sli1[1], sli2[1])\n\n    // 通过make创建slice\n    sli3 := make([]int, 3)\n    sli4 := make([]int, 4, 8) //初始4个元素，预留8个元素的空间\n    sli5 := []int{1,2,3,4,5}  //初始化赋值\n    fmt.Printf(\"%v\\n\", sli3)\n    fmt.Printf(\"%v\\n\", sli4)\n    fmt.Printf(\"%v\\n\", sli5)\n}\n\nfunc main(){\n    createSlice()\n}\n```\n#### 3)元素访问\n```golang\npackage main\n\nfunc useSlice() {\n    slice := []int{10, 20, 30, 40, 50}\n    for index, value := range slice {\n        fmt.Printf(\"Index: %d  Value: %d\\n\", index, value)\n    }\n\n    for i := 0; i < len(slice); i++ {\n        fmt.Printf(\"Index: %d  Value: %d\\n\", i, slice[i])\n    }\n}\n\nfunc main(){\n    useSlice()\n}\n```\n#### 4)在函数间传递slice\n由于slice是指向底层数组的指针, 在函数间传递slice是开销很小的。\n在64位机器中, slice对象占24个字节, 三个元素分别占8个字节。\n作为参数在函数中传递的方式和数组类似。\n\n### 关于new与make的区别探讨\n主要区别:\n\n- new可以用来创建各种类型对象, 也即是各类型的空间分配;\n- make用来处理内建类型(slice, channel, map等)的内存分配.\n","slug":"golang/golang_array-slice","published":1,"updated":"2017-08-07T05:47:10.146Z","comments":1,"photos":[],"link":"","_id":"cj84nao33000k7v4duwljoiwr","content":"<h3 id=\"array类型\"><a href=\"#array类型\" class=\"headerlink\" title=\"array类型\"></a>array类型</h3><h4 id=\"1-基础特性\"><a href=\"#1-基础特性\" class=\"headerlink\" title=\"1)基础特性\"></a>1)基础特性</h4><ul>\n<li>array为固定长度的数组, 其内存分配为连续的, 使用前需确定长度;</li>\n<li>数组为值类型, 赋值操作的新变量是原数组的一份完整拷贝;</li>\n<li>作为函数的传递参数, 实际也是数组的一份拷贝, 效率也就比传递指针低;</li>\n<li>数组长度也是Type一部分, 如[4]int和[2]int类型不一样.</li>\n</ul>\n<a id=\"more\"></a>\n<h4 id=\"2-声明与初始化\"><a href=\"#2-声明与初始化\" class=\"headerlink\" title=\"2)声明与初始化\"></a>2)声明与初始化</h4><figure class=\"highlight golang\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">package</span> main</div><div class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">\"fmt\"</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 只声明, 不作初始化</span></div><div class=\"line\"><span class=\"keyword\">var</span> a1 [<span class=\"number\">3</span>]<span class=\"keyword\">int</span>         <span class=\"comment\">//一维, [0 0 0]</span></div><div class=\"line\"><span class=\"keyword\">var</span> a2 [<span class=\"number\">2</span>][<span class=\"number\">2</span>]<span class=\"keyword\">int</span>      <span class=\"comment\">//二维, [[0,0],[0,0]]</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 声明并初始化</span></div><div class=\"line\"><span class=\"keyword\">var</span> b1 [<span class=\"number\">5</span>]<span class=\"keyword\">int</span> = [<span class=\"number\">5</span>]<span class=\"keyword\">int</span>&#123;<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>,<span class=\"number\">5</span>&#125;</div><div class=\"line\"><span class=\"keyword\">var</span> b2 [<span class=\"number\">4</span>]<span class=\"keyword\">string</span> = [<span class=\"number\">4</span>]<span class=\"keyword\">string</span>&#123;<span class=\"string\">\"Red\"</span>, <span class=\"string\">\"Blue\"</span>, <span class=\"string\">\"Green\"</span>, <span class=\"string\">\"Yellow\"</span>&#125;</div><div class=\"line\"><span class=\"keyword\">var</span> b3 [<span class=\"number\">2</span>][<span class=\"number\">2</span>]<span class=\"keyword\">int</span> = [<span class=\"number\">2</span>][<span class=\"number\">2</span>]<span class=\"keyword\">int</span>&#123;[<span class=\"number\">2</span>]<span class=\"keyword\">int</span>&#123;<span class=\"number\">5</span>,<span class=\"number\">6</span>&#125;, [<span class=\"number\">2</span>]<span class=\"keyword\">int</span>&#123;<span class=\"number\">7</span>,<span class=\"number\">8</span>&#125;&#125;</div><div class=\"line\"><span class=\"comment\">// 不能在顶层进行快速声明和初始化, 需用: var b4 [3]string = ...</span></div><div class=\"line\"><span class=\"comment\">//b4 := [3]string&#123;\"a\", \"b\", \"c\"&#125;</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 几种常用初始化方法(在函数内使用)</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">arrInFunc</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">    a := [<span class=\"number\">3</span>]<span class=\"keyword\">int</span>&#123;<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>&#125;    <span class=\"comment\">// 所有元素赋值</span></div><div class=\"line\">    b := [<span class=\"number\">5</span>]<span class=\"keyword\">int</span>&#123;<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>&#125;    <span class=\"comment\">// 前三个元素赋值，其他默认0</span></div><div class=\"line\">    c := [<span class=\"number\">15</span>]<span class=\"keyword\">int</span>&#123;<span class=\"number\">10</span>:<span class=\"number\">3</span>&#125;    <span class=\"comment\">// 指定第11个元素初始化为3，其他默认0</span></div><div class=\"line\">    d := [...]<span class=\"keyword\">int</span>&#123;<span class=\"number\">4</span>,<span class=\"number\">5</span>,<span class=\"number\">6</span>&#125;  <span class=\"comment\">// 编译器自动推断长度</span></div><div class=\"line\">    e := [...]<span class=\"keyword\">int</span>&#123;<span class=\"number\">0</span>:<span class=\"number\">1</span>, <span class=\"number\">1</span>:<span class=\"number\">2</span>, <span class=\"number\">5</span>:<span class=\"number\">7</span>&#125; <span class=\"comment\">//自动推断长度</span></div><div class=\"line\">    fmt.Printf(<span class=\"string\">\"%v\\n\"</span>, a)</div><div class=\"line\">    fmt.Printf(<span class=\"string\">\"%v\\n\"</span>, b)</div><div class=\"line\">    fmt.Printf(<span class=\"string\">\"%v\\n\"</span>, c)</div><div class=\"line\">    fmt.Printf(<span class=\"string\">\"%v\\n\"</span>, d)</div><div class=\"line\">    fmt.Printf(<span class=\"string\">\"%v\\n\"</span>, e)</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">    arrInFunc()</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>main.go演示效果如下:<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">root@XIAOMO:~/gopro<span class=\"comment\"># ./main</span></div><div class=\"line\">[1 2 3]</div><div class=\"line\">[1 2 3 0 0]</div><div class=\"line\">[0 0 0 0 0 0 0 0 0 0 3 0 0 0 0]</div><div class=\"line\">[4 5 6]</div><div class=\"line\">[1 2 0 0 0 7]</div></pre></td></tr></table></figure></p>\n<h4 id=\"3-元素访问\"><a href=\"#3-元素访问\" class=\"headerlink\" title=\"3)元素访问\"></a>3)元素访问</h4><p>main.go示例<br><figure class=\"highlight golang\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">package</span> main</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">accessElem</span><span class=\"params\">()</span></span> &#123;</div><div class=\"line\">    array := [<span class=\"number\">3</span>]<span class=\"keyword\">int</span>&#123;<span class=\"number\">1</span>, <span class=\"number\">3</span>, <span class=\"number\">9</span>&#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// 通过下标访问</span></div><div class=\"line\">    <span class=\"keyword\">for</span> i:=<span class=\"number\">0</span>; i &lt; <span class=\"built_in\">len</span>(array); i++ &#123;</div><div class=\"line\">        fmt.Println(i, array[i])</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// 迭代方式访问</span></div><div class=\"line\">    <span class=\"keyword\">for</span> i, v := <span class=\"keyword\">range</span> array &#123;</div><div class=\"line\">        fmt.Println(i, v)</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// 使用new创建数组,零值填充, 返回数组指针</span></div><div class=\"line\">    p := <span class=\"built_in\">new</span>([<span class=\"number\">5</span>]<span class=\"keyword\">int</span>)</div><div class=\"line\">    fmt.Println(*p)</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">    accessElem()</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>示例演示效果:<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">root@XIAOMO:~/gopro<span class=\"comment\"># ./main</span></div><div class=\"line\">0 1</div><div class=\"line\">1 3</div><div class=\"line\">2 9</div><div class=\"line\">0 1</div><div class=\"line\">1 3</div><div class=\"line\">2 9</div><div class=\"line\">[0 0 0 0 0]</div></pre></td></tr></table></figure></p>\n<h4 id=\"4-在函数中传递数组\"><a href=\"#4-在函数中传递数组\" class=\"headerlink\" title=\"4)在函数中传递数组\"></a>4)在函数中传递数组</h4><p>和C++类似, 函数参数传递中可以传值或传指针:</p>\n<figure class=\"highlight golang\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 传值, 每次调用foo1, 系统将分配16字节内存在栈上</span></div><div class=\"line\"><span class=\"comment\">// 函数运行结束时, 会弹栈并释放16字节内存</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">foo1</span><span class=\"params\">(arr [16]<span class=\"keyword\">int</span>)</span></span> &#123;</div><div class=\"line\">   <span class=\"comment\">// ...</span></div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"keyword\">var</span> a [<span class=\"number\">16</span>]<span class=\"keyword\">int</span></div><div class=\"line\">foo1(a)</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 传指针, 每次调用foo2, 系统将只分配指针需要的内存空间</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">foo2</span><span class=\"params\">(arr *[16]<span class=\"keyword\">int</span>)</span></span>&#123;</div><div class=\"line\">    <span class=\"comment\">// ...</span></div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"keyword\">var</span> b [<span class=\"number\">16</span>]<span class=\"keyword\">int</span></div><div class=\"line\">foo2(&amp;b)</div></pre></td></tr></table></figure>\n<h3 id=\"slice类型\"><a href=\"#slice类型\" class=\"headerlink\" title=\"slice类型\"></a>slice类型</h3><h4 id=\"1-基础特性-1\"><a href=\"#1-基础特性-1\" class=\"headerlink\" title=\"1)基础特性\"></a>1)基础特性</h4><ul>\n<li>slice是一种动态数组, 可以认为是指向数组的指针; 但其并不只是指针，本身有其数据结构, 该结构包含三个元素:<ul>\n<li>指向原生数组的指针(pointer)</li>\n<li>数组切片的元素个数(len)</li>\n<li>数组切片已分配的空间(cap)</li>\n</ul>\n</li>\n<li>slice作为一个引用类型, 声明是不需要指定长度;</li>\n<li>增长操作通过内建方法append实现, 内部实现自动扩容.</li>\n</ul>\n<h4 id=\"2-创建和初始化\"><a href=\"#2-创建和初始化\" class=\"headerlink\" title=\"2)创建和初始化\"></a>2)创建和初始化</h4><p>main.go<br><figure class=\"highlight golang\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">package</span> main</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">createSlice</span><span class=\"params\">()</span></span> &#123;</div><div class=\"line\">    <span class=\"comment\">// 通过array创建slice, 用法神似python</span></div><div class=\"line\">    arr := [<span class=\"number\">5</span>]<span class=\"keyword\">int</span>&#123;<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>,<span class=\"number\">5</span>&#125;</div><div class=\"line\">    sli1 := arr[:<span class=\"number\">3</span>]  <span class=\"comment\">// 切出前三个元素</span></div><div class=\"line\">    sli2 := arr[:<span class=\"number\">4</span>]  <span class=\"comment\">// 切出前四个元素</span></div><div class=\"line\">    sli1[<span class=\"number\">1</span>] = <span class=\"number\">8</span></div><div class=\"line\">    sli2[<span class=\"number\">1</span>] = <span class=\"number\">9</span></div><div class=\"line\">    <span class=\"comment\">// 将打印 9 9 9, 可见修改的是同一个元素</span></div><div class=\"line\">    <span class=\"built_in\">println</span>(arr[<span class=\"number\">1</span>], sli1[<span class=\"number\">1</span>], sli2[<span class=\"number\">1</span>])</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// 通过make创建slice</span></div><div class=\"line\">    sli3 := <span class=\"built_in\">make</span>([]<span class=\"keyword\">int</span>, <span class=\"number\">3</span>)</div><div class=\"line\">    sli4 := <span class=\"built_in\">make</span>([]<span class=\"keyword\">int</span>, <span class=\"number\">4</span>, <span class=\"number\">8</span>) <span class=\"comment\">//初始4个元素，预留8个元素的空间</span></div><div class=\"line\">    sli5 := []<span class=\"keyword\">int</span>&#123;<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>,<span class=\"number\">5</span>&#125;  <span class=\"comment\">//初始化赋值</span></div><div class=\"line\">    fmt.Printf(<span class=\"string\">\"%v\\n\"</span>, sli3)</div><div class=\"line\">    fmt.Printf(<span class=\"string\">\"%v\\n\"</span>, sli4)</div><div class=\"line\">    fmt.Printf(<span class=\"string\">\"%v\\n\"</span>, sli5)</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">    createSlice()</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<h4 id=\"3-元素访问-1\"><a href=\"#3-元素访问-1\" class=\"headerlink\" title=\"3)元素访问\"></a>3)元素访问</h4><figure class=\"highlight golang\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">package</span> main</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">useSlice</span><span class=\"params\">()</span></span> &#123;</div><div class=\"line\">    slice := []<span class=\"keyword\">int</span>&#123;<span class=\"number\">10</span>, <span class=\"number\">20</span>, <span class=\"number\">30</span>, <span class=\"number\">40</span>, <span class=\"number\">50</span>&#125;</div><div class=\"line\">    <span class=\"keyword\">for</span> index, value := <span class=\"keyword\">range</span> slice &#123;</div><div class=\"line\">        fmt.Printf(<span class=\"string\">\"Index: %d  Value: %d\\n\"</span>, index, value)</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">for</span> i := <span class=\"number\">0</span>; i &lt; <span class=\"built_in\">len</span>(slice); i++ &#123;</div><div class=\"line\">        fmt.Printf(<span class=\"string\">\"Index: %d  Value: %d\\n\"</span>, i, slice[i])</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">    useSlice()</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h4 id=\"4-在函数间传递slice\"><a href=\"#4-在函数间传递slice\" class=\"headerlink\" title=\"4)在函数间传递slice\"></a>4)在函数间传递slice</h4><p>由于slice是指向底层数组的指针, 在函数间传递slice是开销很小的。<br>在64位机器中, slice对象占24个字节, 三个元素分别占8个字节。<br>作为参数在函数中传递的方式和数组类似。</p>\n<h3 id=\"关于new与make的区别探讨\"><a href=\"#关于new与make的区别探讨\" class=\"headerlink\" title=\"关于new与make的区别探讨\"></a>关于new与make的区别探讨</h3><p>主要区别:</p>\n<ul>\n<li>new可以用来创建各种类型对象, 也即是各类型的空间分配;</li>\n<li>make用来处理内建类型(slice, channel, map等)的内存分配.</li>\n</ul>\n","site":{"data":{}},"excerpt":"<h3 id=\"array类型\"><a href=\"#array类型\" class=\"headerlink\" title=\"array类型\"></a>array类型</h3><h4 id=\"1-基础特性\"><a href=\"#1-基础特性\" class=\"headerlink\" title=\"1)基础特性\"></a>1)基础特性</h4><ul>\n<li>array为固定长度的数组, 其内存分配为连续的, 使用前需确定长度;</li>\n<li>数组为值类型, 赋值操作的新变量是原数组的一份完整拷贝;</li>\n<li>作为函数的传递参数, 实际也是数组的一份拷贝, 效率也就比传递指针低;</li>\n<li>数组长度也是Type一部分, 如[4]int和[2]int类型不一样.</li>\n</ul>","more":"<h4 id=\"2-声明与初始化\"><a href=\"#2-声明与初始化\" class=\"headerlink\" title=\"2)声明与初始化\"></a>2)声明与初始化</h4><figure class=\"highlight golang\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">package</span> main</div><div class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">\"fmt\"</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 只声明, 不作初始化</span></div><div class=\"line\"><span class=\"keyword\">var</span> a1 [<span class=\"number\">3</span>]<span class=\"keyword\">int</span>         <span class=\"comment\">//一维, [0 0 0]</span></div><div class=\"line\"><span class=\"keyword\">var</span> a2 [<span class=\"number\">2</span>][<span class=\"number\">2</span>]<span class=\"keyword\">int</span>      <span class=\"comment\">//二维, [[0,0],[0,0]]</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 声明并初始化</span></div><div class=\"line\"><span class=\"keyword\">var</span> b1 [<span class=\"number\">5</span>]<span class=\"keyword\">int</span> = [<span class=\"number\">5</span>]<span class=\"keyword\">int</span>&#123;<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>,<span class=\"number\">5</span>&#125;</div><div class=\"line\"><span class=\"keyword\">var</span> b2 [<span class=\"number\">4</span>]<span class=\"keyword\">string</span> = [<span class=\"number\">4</span>]<span class=\"keyword\">string</span>&#123;<span class=\"string\">\"Red\"</span>, <span class=\"string\">\"Blue\"</span>, <span class=\"string\">\"Green\"</span>, <span class=\"string\">\"Yellow\"</span>&#125;</div><div class=\"line\"><span class=\"keyword\">var</span> b3 [<span class=\"number\">2</span>][<span class=\"number\">2</span>]<span class=\"keyword\">int</span> = [<span class=\"number\">2</span>][<span class=\"number\">2</span>]<span class=\"keyword\">int</span>&#123;[<span class=\"number\">2</span>]<span class=\"keyword\">int</span>&#123;<span class=\"number\">5</span>,<span class=\"number\">6</span>&#125;, [<span class=\"number\">2</span>]<span class=\"keyword\">int</span>&#123;<span class=\"number\">7</span>,<span class=\"number\">8</span>&#125;&#125;</div><div class=\"line\"><span class=\"comment\">// 不能在顶层进行快速声明和初始化, 需用: var b4 [3]string = ...</span></div><div class=\"line\"><span class=\"comment\">//b4 := [3]string&#123;\"a\", \"b\", \"c\"&#125;</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 几种常用初始化方法(在函数内使用)</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">arrInFunc</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">    a := [<span class=\"number\">3</span>]<span class=\"keyword\">int</span>&#123;<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>&#125;    <span class=\"comment\">// 所有元素赋值</span></div><div class=\"line\">    b := [<span class=\"number\">5</span>]<span class=\"keyword\">int</span>&#123;<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>&#125;    <span class=\"comment\">// 前三个元素赋值，其他默认0</span></div><div class=\"line\">    c := [<span class=\"number\">15</span>]<span class=\"keyword\">int</span>&#123;<span class=\"number\">10</span>:<span class=\"number\">3</span>&#125;    <span class=\"comment\">// 指定第11个元素初始化为3，其他默认0</span></div><div class=\"line\">    d := [...]<span class=\"keyword\">int</span>&#123;<span class=\"number\">4</span>,<span class=\"number\">5</span>,<span class=\"number\">6</span>&#125;  <span class=\"comment\">// 编译器自动推断长度</span></div><div class=\"line\">    e := [...]<span class=\"keyword\">int</span>&#123;<span class=\"number\">0</span>:<span class=\"number\">1</span>, <span class=\"number\">1</span>:<span class=\"number\">2</span>, <span class=\"number\">5</span>:<span class=\"number\">7</span>&#125; <span class=\"comment\">//自动推断长度</span></div><div class=\"line\">    fmt.Printf(<span class=\"string\">\"%v\\n\"</span>, a)</div><div class=\"line\">    fmt.Printf(<span class=\"string\">\"%v\\n\"</span>, b)</div><div class=\"line\">    fmt.Printf(<span class=\"string\">\"%v\\n\"</span>, c)</div><div class=\"line\">    fmt.Printf(<span class=\"string\">\"%v\\n\"</span>, d)</div><div class=\"line\">    fmt.Printf(<span class=\"string\">\"%v\\n\"</span>, e)</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">    arrInFunc()</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>main.go演示效果如下:<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">root@XIAOMO:~/gopro<span class=\"comment\"># ./main</span></div><div class=\"line\">[1 2 3]</div><div class=\"line\">[1 2 3 0 0]</div><div class=\"line\">[0 0 0 0 0 0 0 0 0 0 3 0 0 0 0]</div><div class=\"line\">[4 5 6]</div><div class=\"line\">[1 2 0 0 0 7]</div></pre></td></tr></table></figure></p>\n<h4 id=\"3-元素访问\"><a href=\"#3-元素访问\" class=\"headerlink\" title=\"3)元素访问\"></a>3)元素访问</h4><p>main.go示例<br><figure class=\"highlight golang\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">package</span> main</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">accessElem</span><span class=\"params\">()</span></span> &#123;</div><div class=\"line\">    array := [<span class=\"number\">3</span>]<span class=\"keyword\">int</span>&#123;<span class=\"number\">1</span>, <span class=\"number\">3</span>, <span class=\"number\">9</span>&#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// 通过下标访问</span></div><div class=\"line\">    <span class=\"keyword\">for</span> i:=<span class=\"number\">0</span>; i &lt; <span class=\"built_in\">len</span>(array); i++ &#123;</div><div class=\"line\">        fmt.Println(i, array[i])</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// 迭代方式访问</span></div><div class=\"line\">    <span class=\"keyword\">for</span> i, v := <span class=\"keyword\">range</span> array &#123;</div><div class=\"line\">        fmt.Println(i, v)</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// 使用new创建数组,零值填充, 返回数组指针</span></div><div class=\"line\">    p := <span class=\"built_in\">new</span>([<span class=\"number\">5</span>]<span class=\"keyword\">int</span>)</div><div class=\"line\">    fmt.Println(*p)</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">    accessElem()</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>示例演示效果:<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">root@XIAOMO:~/gopro<span class=\"comment\"># ./main</span></div><div class=\"line\">0 1</div><div class=\"line\">1 3</div><div class=\"line\">2 9</div><div class=\"line\">0 1</div><div class=\"line\">1 3</div><div class=\"line\">2 9</div><div class=\"line\">[0 0 0 0 0]</div></pre></td></tr></table></figure></p>\n<h4 id=\"4-在函数中传递数组\"><a href=\"#4-在函数中传递数组\" class=\"headerlink\" title=\"4)在函数中传递数组\"></a>4)在函数中传递数组</h4><p>和C++类似, 函数参数传递中可以传值或传指针:</p>\n<figure class=\"highlight golang\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 传值, 每次调用foo1, 系统将分配16字节内存在栈上</span></div><div class=\"line\"><span class=\"comment\">// 函数运行结束时, 会弹栈并释放16字节内存</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">foo1</span><span class=\"params\">(arr [16]<span class=\"keyword\">int</span>)</span></span> &#123;</div><div class=\"line\">   <span class=\"comment\">// ...</span></div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"keyword\">var</span> a [<span class=\"number\">16</span>]<span class=\"keyword\">int</span></div><div class=\"line\">foo1(a)</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 传指针, 每次调用foo2, 系统将只分配指针需要的内存空间</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">foo2</span><span class=\"params\">(arr *[16]<span class=\"keyword\">int</span>)</span></span>&#123;</div><div class=\"line\">    <span class=\"comment\">// ...</span></div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"keyword\">var</span> b [<span class=\"number\">16</span>]<span class=\"keyword\">int</span></div><div class=\"line\">foo2(&amp;b)</div></pre></td></tr></table></figure>\n<h3 id=\"slice类型\"><a href=\"#slice类型\" class=\"headerlink\" title=\"slice类型\"></a>slice类型</h3><h4 id=\"1-基础特性-1\"><a href=\"#1-基础特性-1\" class=\"headerlink\" title=\"1)基础特性\"></a>1)基础特性</h4><ul>\n<li>slice是一种动态数组, 可以认为是指向数组的指针; 但其并不只是指针，本身有其数据结构, 该结构包含三个元素:<ul>\n<li>指向原生数组的指针(pointer)</li>\n<li>数组切片的元素个数(len)</li>\n<li>数组切片已分配的空间(cap)</li>\n</ul>\n</li>\n<li>slice作为一个引用类型, 声明是不需要指定长度;</li>\n<li>增长操作通过内建方法append实现, 内部实现自动扩容.</li>\n</ul>\n<h4 id=\"2-创建和初始化\"><a href=\"#2-创建和初始化\" class=\"headerlink\" title=\"2)创建和初始化\"></a>2)创建和初始化</h4><p>main.go<br><figure class=\"highlight golang\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">package</span> main</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">createSlice</span><span class=\"params\">()</span></span> &#123;</div><div class=\"line\">    <span class=\"comment\">// 通过array创建slice, 用法神似python</span></div><div class=\"line\">    arr := [<span class=\"number\">5</span>]<span class=\"keyword\">int</span>&#123;<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>,<span class=\"number\">5</span>&#125;</div><div class=\"line\">    sli1 := arr[:<span class=\"number\">3</span>]  <span class=\"comment\">// 切出前三个元素</span></div><div class=\"line\">    sli2 := arr[:<span class=\"number\">4</span>]  <span class=\"comment\">// 切出前四个元素</span></div><div class=\"line\">    sli1[<span class=\"number\">1</span>] = <span class=\"number\">8</span></div><div class=\"line\">    sli2[<span class=\"number\">1</span>] = <span class=\"number\">9</span></div><div class=\"line\">    <span class=\"comment\">// 将打印 9 9 9, 可见修改的是同一个元素</span></div><div class=\"line\">    <span class=\"built_in\">println</span>(arr[<span class=\"number\">1</span>], sli1[<span class=\"number\">1</span>], sli2[<span class=\"number\">1</span>])</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// 通过make创建slice</span></div><div class=\"line\">    sli3 := <span class=\"built_in\">make</span>([]<span class=\"keyword\">int</span>, <span class=\"number\">3</span>)</div><div class=\"line\">    sli4 := <span class=\"built_in\">make</span>([]<span class=\"keyword\">int</span>, <span class=\"number\">4</span>, <span class=\"number\">8</span>) <span class=\"comment\">//初始4个元素，预留8个元素的空间</span></div><div class=\"line\">    sli5 := []<span class=\"keyword\">int</span>&#123;<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>,<span class=\"number\">5</span>&#125;  <span class=\"comment\">//初始化赋值</span></div><div class=\"line\">    fmt.Printf(<span class=\"string\">\"%v\\n\"</span>, sli3)</div><div class=\"line\">    fmt.Printf(<span class=\"string\">\"%v\\n\"</span>, sli4)</div><div class=\"line\">    fmt.Printf(<span class=\"string\">\"%v\\n\"</span>, sli5)</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">    createSlice()</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<h4 id=\"3-元素访问-1\"><a href=\"#3-元素访问-1\" class=\"headerlink\" title=\"3)元素访问\"></a>3)元素访问</h4><figure class=\"highlight golang\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">package</span> main</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">useSlice</span><span class=\"params\">()</span></span> &#123;</div><div class=\"line\">    slice := []<span class=\"keyword\">int</span>&#123;<span class=\"number\">10</span>, <span class=\"number\">20</span>, <span class=\"number\">30</span>, <span class=\"number\">40</span>, <span class=\"number\">50</span>&#125;</div><div class=\"line\">    <span class=\"keyword\">for</span> index, value := <span class=\"keyword\">range</span> slice &#123;</div><div class=\"line\">        fmt.Printf(<span class=\"string\">\"Index: %d  Value: %d\\n\"</span>, index, value)</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">for</span> i := <span class=\"number\">0</span>; i &lt; <span class=\"built_in\">len</span>(slice); i++ &#123;</div><div class=\"line\">        fmt.Printf(<span class=\"string\">\"Index: %d  Value: %d\\n\"</span>, i, slice[i])</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">    useSlice()</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h4 id=\"4-在函数间传递slice\"><a href=\"#4-在函数间传递slice\" class=\"headerlink\" title=\"4)在函数间传递slice\"></a>4)在函数间传递slice</h4><p>由于slice是指向底层数组的指针, 在函数间传递slice是开销很小的。<br>在64位机器中, slice对象占24个字节, 三个元素分别占8个字节。<br>作为参数在函数中传递的方式和数组类似。</p>\n<h3 id=\"关于new与make的区别探讨\"><a href=\"#关于new与make的区别探讨\" class=\"headerlink\" title=\"关于new与make的区别探讨\"></a>关于new与make的区别探讨</h3><p>主要区别:</p>\n<ul>\n<li>new可以用来创建各种类型对象, 也即是各类型的空间分配;</li>\n<li>make用来处理内建类型(slice, channel, map等)的内存分配.</li>\n</ul>"},{"title":"[golang]function","date":"2016-02-07T02:07:46.000Z","_content":"\n### 基本用法\ngolang函数是不支持嵌套(但是可以使用匿名函数实现嵌套)、默认参数、重载, 但支持:\n- 不定长度的变参\n- 多返回值(类似python的返回元组?)\n- 显式命名返回值参数\n- 匿名函数\n- 函数闭包\n\n<!--more-->\n\n以下是一些基本用法示例:\n```golang\n// 一般用法, 无返回值\nfunc funcName1(input1 type1){\n    //do something\n}\n\n// 多参数, 一个返回值\nfunc funcName2(input1 type1, input2 type2) (output1 type1) {\n    //do something\n    return value1\n}\n\n// 多参数, 多返回值\nfunc funcName3(input1 type1, input2 type2) (output1 type1, output2 type2) {\n    //do something\n    return value1, value2\n}\n\n// 传入参数同类型\nfunc funcName4(i, j int) int {\n    return i*j\n}\n\n// 命名返回参数\nfunc funcName5(a, b int) (x, y int) {\n    x = a+b\n    y = a*b\n    return          // 返回 x, y\n    // return x, y  // 返回的结果和函数头声明一样: x,y,  可以不写\n    // return y, x  // 返回的结果就是y,x 而不是x, y\n}\n\n```\n### 参数传递\n#### 1.传递可变参数\n- 可变参数实际为一个slice, 必须作为一个形参放在最后的位置.\n- python中变参可用**dict方式传递; golang中需要用 ... 来展开, 否则会被当做一个参数传递\n\n```golang\npackage main\n\nimport (\n    \"fmt\"\n)\n\nfunc testListArg(x int, args ...string) {\n    str := \"\"\n    for _, s := range args {\n        str += s\n    }\n    fmt.Printf(\"%v %v\\n\", x, str)\n}\n\nfunc main() {\n    a := []string{\"a\", \"d\", \"v\", \"m\"}\n    testListArg(5, a...)\n    testListArg(6, a[:3]...)\n}\n\n```\n演示效果:\n```bash\nroot@XIAOMO:~/gopro# go build main.go\nroot@XIAOMO:~/gopro# ./main\n5 advm\n6 adv\n```\n#### 2.传递指针类型\n- string, slice, map的传递实际为指针方式传递, 无需取值后显式传递指针\n- C/C++指针通过 -> 来获取指针对象成员, golang则通过 . 来实现操作。\n\n```golang\npackage main\n\nimport (\n    \"fmt\"\n)\n\nfunc testPointer(user *User) {\n    fmt.Printf(\"name: %v, id: %v\\n\", (*user).name, (*user).id)\n}\n\nfunc main() {\n    user := User{name:\"xiaomo\",id:1}\n    testPointer(&user)\n}\n```\n#### 3.匿名函数与闭包\n匿名方法经常和闭包配套使用\n```golang\npackage main\n\nimport (\n    \"fmt\"\n)\n\n// 匿名方法\nvar f1 = func(a,b int) int {\n    return (a+b)*2\n}\n\n// 匿名方法与闭包\nfunc f2(name string) {\n    f_inner := func (x,y int) int {\n        return x+y\n    }\n    sum := f_inner(7, 8)\n    fmt.Printf(\"name:%v sum:%v\\n\", name, sum)\n\n    // 匿名函数访问外部方法局部变量\n    extra := 15\n    f_inner2 := func(x,y int) int {\n        return x+y+extra\n    }\n    sum2 := f_inner2(9, 10)\n    fmt.Printf(\"name:%v sum2:%v\\n\", name, sum2)\n}\n\nfunc main() {\n    res := f1(3,4)\n    fmt.Printf(\"%v\\n\", res)\n\n    f2(\"xiaomo\")\n}\n```\n演示效果:\n```golang\nroot@XIAOMO:~/gopro# go build main.go\nroot@XIAOMO:~/gopro# ./main\n14\nname:xiaomo sum:15\nname:xiaomo sum2:34\n\n```","source":"_posts/golang/golang_function.md","raw":"---\ntitle: '[golang]function'\ndate: 2016-02-07 10:07:46\ntags: golang\n---\n\n### 基本用法\ngolang函数是不支持嵌套(但是可以使用匿名函数实现嵌套)、默认参数、重载, 但支持:\n- 不定长度的变参\n- 多返回值(类似python的返回元组?)\n- 显式命名返回值参数\n- 匿名函数\n- 函数闭包\n\n<!--more-->\n\n以下是一些基本用法示例:\n```golang\n// 一般用法, 无返回值\nfunc funcName1(input1 type1){\n    //do something\n}\n\n// 多参数, 一个返回值\nfunc funcName2(input1 type1, input2 type2) (output1 type1) {\n    //do something\n    return value1\n}\n\n// 多参数, 多返回值\nfunc funcName3(input1 type1, input2 type2) (output1 type1, output2 type2) {\n    //do something\n    return value1, value2\n}\n\n// 传入参数同类型\nfunc funcName4(i, j int) int {\n    return i*j\n}\n\n// 命名返回参数\nfunc funcName5(a, b int) (x, y int) {\n    x = a+b\n    y = a*b\n    return          // 返回 x, y\n    // return x, y  // 返回的结果和函数头声明一样: x,y,  可以不写\n    // return y, x  // 返回的结果就是y,x 而不是x, y\n}\n\n```\n### 参数传递\n#### 1.传递可变参数\n- 可变参数实际为一个slice, 必须作为一个形参放在最后的位置.\n- python中变参可用**dict方式传递; golang中需要用 ... 来展开, 否则会被当做一个参数传递\n\n```golang\npackage main\n\nimport (\n    \"fmt\"\n)\n\nfunc testListArg(x int, args ...string) {\n    str := \"\"\n    for _, s := range args {\n        str += s\n    }\n    fmt.Printf(\"%v %v\\n\", x, str)\n}\n\nfunc main() {\n    a := []string{\"a\", \"d\", \"v\", \"m\"}\n    testListArg(5, a...)\n    testListArg(6, a[:3]...)\n}\n\n```\n演示效果:\n```bash\nroot@XIAOMO:~/gopro# go build main.go\nroot@XIAOMO:~/gopro# ./main\n5 advm\n6 adv\n```\n#### 2.传递指针类型\n- string, slice, map的传递实际为指针方式传递, 无需取值后显式传递指针\n- C/C++指针通过 -> 来获取指针对象成员, golang则通过 . 来实现操作。\n\n```golang\npackage main\n\nimport (\n    \"fmt\"\n)\n\nfunc testPointer(user *User) {\n    fmt.Printf(\"name: %v, id: %v\\n\", (*user).name, (*user).id)\n}\n\nfunc main() {\n    user := User{name:\"xiaomo\",id:1}\n    testPointer(&user)\n}\n```\n#### 3.匿名函数与闭包\n匿名方法经常和闭包配套使用\n```golang\npackage main\n\nimport (\n    \"fmt\"\n)\n\n// 匿名方法\nvar f1 = func(a,b int) int {\n    return (a+b)*2\n}\n\n// 匿名方法与闭包\nfunc f2(name string) {\n    f_inner := func (x,y int) int {\n        return x+y\n    }\n    sum := f_inner(7, 8)\n    fmt.Printf(\"name:%v sum:%v\\n\", name, sum)\n\n    // 匿名函数访问外部方法局部变量\n    extra := 15\n    f_inner2 := func(x,y int) int {\n        return x+y+extra\n    }\n    sum2 := f_inner2(9, 10)\n    fmt.Printf(\"name:%v sum2:%v\\n\", name, sum2)\n}\n\nfunc main() {\n    res := f1(3,4)\n    fmt.Printf(\"%v\\n\", res)\n\n    f2(\"xiaomo\")\n}\n```\n演示效果:\n```golang\nroot@XIAOMO:~/gopro# go build main.go\nroot@XIAOMO:~/gopro# ./main\n14\nname:xiaomo sum:15\nname:xiaomo sum2:34\n\n```","slug":"golang/golang_function","published":1,"updated":"2017-08-07T05:47:10.146Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj84nao38000n7v4djpwdo9ki","content":"<h3 id=\"基本用法\"><a href=\"#基本用法\" class=\"headerlink\" title=\"基本用法\"></a>基本用法</h3><p>golang函数是不支持嵌套(但是可以使用匿名函数实现嵌套)、默认参数、重载, 但支持:</p>\n<ul>\n<li>不定长度的变参</li>\n<li>多返回值(类似python的返回元组?)</li>\n<li>显式命名返回值参数</li>\n<li>匿名函数</li>\n<li>函数闭包</li>\n</ul>\n<a id=\"more\"></a>\n<p>以下是一些基本用法示例:<br><figure class=\"highlight golang\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 一般用法, 无返回值</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">funcName1</span><span class=\"params\">(input1 type1)</span></span>&#123;</div><div class=\"line\">    <span class=\"comment\">//do something</span></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 多参数, 一个返回值</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">funcName2</span><span class=\"params\">(input1 type1, input2 type2)</span> <span class=\"params\">(output1 type1)</span></span> &#123;</div><div class=\"line\">    <span class=\"comment\">//do something</span></div><div class=\"line\">    <span class=\"keyword\">return</span> value1</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 多参数, 多返回值</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">funcName3</span><span class=\"params\">(input1 type1, input2 type2)</span> <span class=\"params\">(output1 type1, output2 type2)</span></span> &#123;</div><div class=\"line\">    <span class=\"comment\">//do something</span></div><div class=\"line\">    <span class=\"keyword\">return</span> value1, value2</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 传入参数同类型</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">funcName4</span><span class=\"params\">(i, j <span class=\"keyword\">int</span>)</span> <span class=\"title\">int</span></span> &#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> i*j</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 命名返回参数</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">funcName5</span><span class=\"params\">(a, b <span class=\"keyword\">int</span>)</span> <span class=\"params\">(x, y <span class=\"keyword\">int</span>)</span></span> &#123;</div><div class=\"line\">    x = a+b</div><div class=\"line\">    y = a*b</div><div class=\"line\">    <span class=\"keyword\">return</span>          <span class=\"comment\">// 返回 x, y</span></div><div class=\"line\">    <span class=\"comment\">// return x, y  // 返回的结果和函数头声明一样: x,y,  可以不写</span></div><div class=\"line\">    <span class=\"comment\">// return y, x  // 返回的结果就是y,x 而不是x, y</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<h3 id=\"参数传递\"><a href=\"#参数传递\" class=\"headerlink\" title=\"参数传递\"></a>参数传递</h3><h4 id=\"1-传递可变参数\"><a href=\"#1-传递可变参数\" class=\"headerlink\" title=\"1.传递可变参数\"></a>1.传递可变参数</h4><ul>\n<li>可变参数实际为一个slice, 必须作为一个形参放在最后的位置.</li>\n<li>python中变参可用**dict方式传递; golang中需要用 … 来展开, 否则会被当做一个参数传递</li>\n</ul>\n<figure class=\"highlight golang\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">package</span> main</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">import</span> (</div><div class=\"line\">    <span class=\"string\">\"fmt\"</span></div><div class=\"line\">)</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">testListArg</span><span class=\"params\">(x <span class=\"keyword\">int</span>, args ...<span class=\"keyword\">string</span>)</span></span> &#123;</div><div class=\"line\">    str := <span class=\"string\">\"\"</span></div><div class=\"line\">    <span class=\"keyword\">for</span> _, s := <span class=\"keyword\">range</span> args &#123;</div><div class=\"line\">        str += s</div><div class=\"line\">    &#125;</div><div class=\"line\">    fmt.Printf(<span class=\"string\">\"%v %v\\n\"</span>, x, str)</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</div><div class=\"line\">    a := []<span class=\"keyword\">string</span>&#123;<span class=\"string\">\"a\"</span>, <span class=\"string\">\"d\"</span>, <span class=\"string\">\"v\"</span>, <span class=\"string\">\"m\"</span>&#125;</div><div class=\"line\">    testListArg(<span class=\"number\">5</span>, a...)</div><div class=\"line\">    testListArg(<span class=\"number\">6</span>, a[:<span class=\"number\">3</span>]...)</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>演示效果:<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">root@XIAOMO:~/gopro<span class=\"comment\"># go build main.go</span></div><div class=\"line\">root@XIAOMO:~/gopro<span class=\"comment\"># ./main</span></div><div class=\"line\">5 advm</div><div class=\"line\">6 adv</div></pre></td></tr></table></figure></p>\n<h4 id=\"2-传递指针类型\"><a href=\"#2-传递指针类型\" class=\"headerlink\" title=\"2.传递指针类型\"></a>2.传递指针类型</h4><ul>\n<li>string, slice, map的传递实际为指针方式传递, 无需取值后显式传递指针</li>\n<li>C/C++指针通过 -&gt; 来获取指针对象成员, golang则通过 . 来实现操作。</li>\n</ul>\n<figure class=\"highlight golang\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">package</span> main</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">import</span> (</div><div class=\"line\">    <span class=\"string\">\"fmt\"</span></div><div class=\"line\">)</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">testPointer</span><span class=\"params\">(user *User)</span></span> &#123;</div><div class=\"line\">    fmt.Printf(<span class=\"string\">\"name: %v, id: %v\\n\"</span>, (*user).name, (*user).id)</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</div><div class=\"line\">    user := User&#123;name:<span class=\"string\">\"xiaomo\"</span>,id:<span class=\"number\">1</span>&#125;</div><div class=\"line\">    testPointer(&amp;user)</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h4 id=\"3-匿名函数与闭包\"><a href=\"#3-匿名函数与闭包\" class=\"headerlink\" title=\"3.匿名函数与闭包\"></a>3.匿名函数与闭包</h4><p>匿名方法经常和闭包配套使用<br><figure class=\"highlight golang\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">package</span> main</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">import</span> (</div><div class=\"line\">    <span class=\"string\">\"fmt\"</span></div><div class=\"line\">)</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 匿名方法</span></div><div class=\"line\"><span class=\"keyword\">var</span> f1 = <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">(a,b <span class=\"keyword\">int</span>)</span> <span class=\"title\">int</span></span> &#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> (a+b)*<span class=\"number\">2</span></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 匿名方法与闭包</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">f2</span><span class=\"params\">(name <span class=\"keyword\">string</span>)</span></span> &#123;</div><div class=\"line\">    f_inner := <span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(x,y <span class=\"keyword\">int</span>)</span> <span class=\"title\">int</span></span> &#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> x+y</div><div class=\"line\">    &#125;</div><div class=\"line\">    sum := f_inner(<span class=\"number\">7</span>, <span class=\"number\">8</span>)</div><div class=\"line\">    fmt.Printf(<span class=\"string\">\"name:%v sum:%v\\n\"</span>, name, sum)</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// 匿名函数访问外部方法局部变量</span></div><div class=\"line\">    extra := <span class=\"number\">15</span></div><div class=\"line\">    f_inner2 := <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">(x,y <span class=\"keyword\">int</span>)</span> <span class=\"title\">int</span></span> &#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> x+y+extra</div><div class=\"line\">    &#125;</div><div class=\"line\">    sum2 := f_inner2(<span class=\"number\">9</span>, <span class=\"number\">10</span>)</div><div class=\"line\">    fmt.Printf(<span class=\"string\">\"name:%v sum2:%v\\n\"</span>, name, sum2)</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</div><div class=\"line\">    res := f1(<span class=\"number\">3</span>,<span class=\"number\">4</span>)</div><div class=\"line\">    fmt.Printf(<span class=\"string\">\"%v\\n\"</span>, res)</div><div class=\"line\"></div><div class=\"line\">    f2(<span class=\"string\">\"xiaomo\"</span>)</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>演示效果:<br><figure class=\"highlight golang\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">root@XIAOMO:~/gopro# <span class=\"keyword\">go</span> build main.<span class=\"keyword\">go</span></div><div class=\"line\">root@XIAOMO:~/gopro# ./main</div><div class=\"line\"><span class=\"number\">14</span></div><div class=\"line\">name:xiaomo sum:<span class=\"number\">15</span></div><div class=\"line\">name:xiaomo sum2:<span class=\"number\">34</span></div></pre></td></tr></table></figure></p>\n","site":{"data":{}},"excerpt":"<h3 id=\"基本用法\"><a href=\"#基本用法\" class=\"headerlink\" title=\"基本用法\"></a>基本用法</h3><p>golang函数是不支持嵌套(但是可以使用匿名函数实现嵌套)、默认参数、重载, 但支持:</p>\n<ul>\n<li>不定长度的变参</li>\n<li>多返回值(类似python的返回元组?)</li>\n<li>显式命名返回值参数</li>\n<li>匿名函数</li>\n<li>函数闭包</li>\n</ul>","more":"<p>以下是一些基本用法示例:<br><figure class=\"highlight golang\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 一般用法, 无返回值</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">funcName1</span><span class=\"params\">(input1 type1)</span></span>&#123;</div><div class=\"line\">    <span class=\"comment\">//do something</span></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 多参数, 一个返回值</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">funcName2</span><span class=\"params\">(input1 type1, input2 type2)</span> <span class=\"params\">(output1 type1)</span></span> &#123;</div><div class=\"line\">    <span class=\"comment\">//do something</span></div><div class=\"line\">    <span class=\"keyword\">return</span> value1</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 多参数, 多返回值</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">funcName3</span><span class=\"params\">(input1 type1, input2 type2)</span> <span class=\"params\">(output1 type1, output2 type2)</span></span> &#123;</div><div class=\"line\">    <span class=\"comment\">//do something</span></div><div class=\"line\">    <span class=\"keyword\">return</span> value1, value2</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 传入参数同类型</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">funcName4</span><span class=\"params\">(i, j <span class=\"keyword\">int</span>)</span> <span class=\"title\">int</span></span> &#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> i*j</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 命名返回参数</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">funcName5</span><span class=\"params\">(a, b <span class=\"keyword\">int</span>)</span> <span class=\"params\">(x, y <span class=\"keyword\">int</span>)</span></span> &#123;</div><div class=\"line\">    x = a+b</div><div class=\"line\">    y = a*b</div><div class=\"line\">    <span class=\"keyword\">return</span>          <span class=\"comment\">// 返回 x, y</span></div><div class=\"line\">    <span class=\"comment\">// return x, y  // 返回的结果和函数头声明一样: x,y,  可以不写</span></div><div class=\"line\">    <span class=\"comment\">// return y, x  // 返回的结果就是y,x 而不是x, y</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<h3 id=\"参数传递\"><a href=\"#参数传递\" class=\"headerlink\" title=\"参数传递\"></a>参数传递</h3><h4 id=\"1-传递可变参数\"><a href=\"#1-传递可变参数\" class=\"headerlink\" title=\"1.传递可变参数\"></a>1.传递可变参数</h4><ul>\n<li>可变参数实际为一个slice, 必须作为一个形参放在最后的位置.</li>\n<li>python中变参可用**dict方式传递; golang中需要用 … 来展开, 否则会被当做一个参数传递</li>\n</ul>\n<figure class=\"highlight golang\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">package</span> main</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">import</span> (</div><div class=\"line\">    <span class=\"string\">\"fmt\"</span></div><div class=\"line\">)</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">testListArg</span><span class=\"params\">(x <span class=\"keyword\">int</span>, args ...<span class=\"keyword\">string</span>)</span></span> &#123;</div><div class=\"line\">    str := <span class=\"string\">\"\"</span></div><div class=\"line\">    <span class=\"keyword\">for</span> _, s := <span class=\"keyword\">range</span> args &#123;</div><div class=\"line\">        str += s</div><div class=\"line\">    &#125;</div><div class=\"line\">    fmt.Printf(<span class=\"string\">\"%v %v\\n\"</span>, x, str)</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</div><div class=\"line\">    a := []<span class=\"keyword\">string</span>&#123;<span class=\"string\">\"a\"</span>, <span class=\"string\">\"d\"</span>, <span class=\"string\">\"v\"</span>, <span class=\"string\">\"m\"</span>&#125;</div><div class=\"line\">    testListArg(<span class=\"number\">5</span>, a...)</div><div class=\"line\">    testListArg(<span class=\"number\">6</span>, a[:<span class=\"number\">3</span>]...)</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>演示效果:<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">root@XIAOMO:~/gopro<span class=\"comment\"># go build main.go</span></div><div class=\"line\">root@XIAOMO:~/gopro<span class=\"comment\"># ./main</span></div><div class=\"line\">5 advm</div><div class=\"line\">6 adv</div></pre></td></tr></table></figure></p>\n<h4 id=\"2-传递指针类型\"><a href=\"#2-传递指针类型\" class=\"headerlink\" title=\"2.传递指针类型\"></a>2.传递指针类型</h4><ul>\n<li>string, slice, map的传递实际为指针方式传递, 无需取值后显式传递指针</li>\n<li>C/C++指针通过 -&gt; 来获取指针对象成员, golang则通过 . 来实现操作。</li>\n</ul>\n<figure class=\"highlight golang\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">package</span> main</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">import</span> (</div><div class=\"line\">    <span class=\"string\">\"fmt\"</span></div><div class=\"line\">)</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">testPointer</span><span class=\"params\">(user *User)</span></span> &#123;</div><div class=\"line\">    fmt.Printf(<span class=\"string\">\"name: %v, id: %v\\n\"</span>, (*user).name, (*user).id)</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</div><div class=\"line\">    user := User&#123;name:<span class=\"string\">\"xiaomo\"</span>,id:<span class=\"number\">1</span>&#125;</div><div class=\"line\">    testPointer(&amp;user)</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h4 id=\"3-匿名函数与闭包\"><a href=\"#3-匿名函数与闭包\" class=\"headerlink\" title=\"3.匿名函数与闭包\"></a>3.匿名函数与闭包</h4><p>匿名方法经常和闭包配套使用<br><figure class=\"highlight golang\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">package</span> main</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">import</span> (</div><div class=\"line\">    <span class=\"string\">\"fmt\"</span></div><div class=\"line\">)</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 匿名方法</span></div><div class=\"line\"><span class=\"keyword\">var</span> f1 = <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">(a,b <span class=\"keyword\">int</span>)</span> <span class=\"title\">int</span></span> &#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> (a+b)*<span class=\"number\">2</span></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 匿名方法与闭包</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">f2</span><span class=\"params\">(name <span class=\"keyword\">string</span>)</span></span> &#123;</div><div class=\"line\">    f_inner := <span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(x,y <span class=\"keyword\">int</span>)</span> <span class=\"title\">int</span></span> &#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> x+y</div><div class=\"line\">    &#125;</div><div class=\"line\">    sum := f_inner(<span class=\"number\">7</span>, <span class=\"number\">8</span>)</div><div class=\"line\">    fmt.Printf(<span class=\"string\">\"name:%v sum:%v\\n\"</span>, name, sum)</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// 匿名函数访问外部方法局部变量</span></div><div class=\"line\">    extra := <span class=\"number\">15</span></div><div class=\"line\">    f_inner2 := <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">(x,y <span class=\"keyword\">int</span>)</span> <span class=\"title\">int</span></span> &#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> x+y+extra</div><div class=\"line\">    &#125;</div><div class=\"line\">    sum2 := f_inner2(<span class=\"number\">9</span>, <span class=\"number\">10</span>)</div><div class=\"line\">    fmt.Printf(<span class=\"string\">\"name:%v sum2:%v\\n\"</span>, name, sum2)</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</div><div class=\"line\">    res := f1(<span class=\"number\">3</span>,<span class=\"number\">4</span>)</div><div class=\"line\">    fmt.Printf(<span class=\"string\">\"%v\\n\"</span>, res)</div><div class=\"line\"></div><div class=\"line\">    f2(<span class=\"string\">\"xiaomo\"</span>)</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>演示效果:<br><figure class=\"highlight golang\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">root@XIAOMO:~/gopro# <span class=\"keyword\">go</span> build main.<span class=\"keyword\">go</span></div><div class=\"line\">root@XIAOMO:~/gopro# ./main</div><div class=\"line\"><span class=\"number\">14</span></div><div class=\"line\">name:xiaomo sum:<span class=\"number\">15</span></div><div class=\"line\">name:xiaomo sum2:<span class=\"number\">34</span></div></pre></td></tr></table></figure></p>"},{"title":"[golang]channel管道类型","date":"2016-03-04T01:00:11.000Z","_content":"\n在unix系统中, 管道是进程间通信的一种方式。那golang的channel和系统的管道有什么区别？\n\n### 什么是channel\n官方文档有个channel的定义:\n\n\n>    A channel provides a mechanism for concurrently executing functions to communicate\n>    by sending and receiving values of a specified element type.\n>    The value of an uninitialized channel is nil.\n\nchannel应该可以理解为: 一种为并行执行而提供函数间通信的机制, 通过传递send和recieve特定类型的值来实现。没有初始化值的channel对象, 默认为nil。\n<!--more-->\n\n也就是: 在管道的两端, 一个对象可以在一端进行写/读/读写的操作, 另一个对象可以在另一端进行读/写/读写的操作；能否读写, 取决于管道是否是双向的。默认情况下, 管道是双向的。\n\n### channel的基础特性\n- channel是一个作为队列queue的值。 当queue满时, 写操作是阻塞的; 当queue为空时, 读操作是阻塞的\n- 向一个nil channel读数据或写数据, 会造成一直阻塞\n- 向一个close了的channel写数据, 会引起panic\n- 向一个close了的channel读数据, 会立刻获取到一个零值\n\n### 一些用法示例\n#### 1.没有缓冲的channel\n当我们没有为channel指定容量时, 我们称这个channel是没有缓冲的。\n```golang\nfunc test_deadlock() {\n     c := make(chan string)\n     c <- \"test\"    // 写入channel\n     s := <-c       // 读取channel\n     println(s)\n}\n```\n运行效果:\n```bash\nfatal error: all goroutines are asleep - deadlock!\n\ngoroutine 1 [chan send]:\nmain.test_deadlock\n\t/root/gopro/channel.go:10\nmain.main\n\t/root/gopro/channel.go:53\n```\n提示出现了死锁。这是因为处在同一个单线程环境中, 两个goroutine互相等待对方释放资源, 造成双方都无法继续运行下去。Go运行时检测到了死锁并给出了错误报告。指定容量后可解决这个问题:\n```golang\nc := make(chan string, 3)  // 长度为3\n```\n\n#### 2. 使用range来进行读取操作\n- range会在close channel后读取完所有数据并自动结束循环\n- 有/无缓冲的channel在使用range时效果是一样的\n- range方法, 不需要知道channel中消息的准确数目, 使用人性化\n\n使用range示例:\n```golang\nfunc main() {\n     message := make(chan int)\n     count := 3\n\n     go func() {\n          for i := 1; i <= count; i++ {\n               fmt.Printf(\"send %v\\n\", i)\n               message <- i\n          }\n          //完成写入后, 需要关闭channel, 否则主goroutine会因一直等待而死锁\n          close(message)\n     }()\n     time.Sleep(time.Second * 3)\n\n     for msg := range message {\n          fmt.Printf(\"recieve: %v\\n\", msg)\n     }\n}\n```\n运行效果:\n```golang\nroot@XIAOMO:~/gopro# go build channel.go\nroot@XIAOMO:~/gopro# ./channel\nsend 1\n// 此处等待3秒\nrecieve: 1\nsend 2\nsend 3\nrecieve: 2\nrecieve: 3\n```\n\n#### 3. 多channel模式\n在程序中需要用到多个channel时, 我们可以使用select(类似于switch)来实现对channel的支持。\n\n以下示例中方法CreateMsgChannel()创建了一个channel和goroutine, 并向该channel中分三次写入数据; 在main()方法中通过select来读取三个channel中的数据:\n```golang\nfunc CreateMsgChannel(msg string, delay time.Duration) <-chan string {\n     c := make(chan string)\n     go func() {\n          for i := 1; i <= 3; i++ {\n               c <- fmt.Sprintf(\"%s\\tcur_loop:%d\", msg, i)\n               // 模拟处理时间\n               time.Sleep(time.Millisecond * delay)\n          }\n     }()\n     return c\n}\n\nfunc main() {\n    c1 := CreateMsgChannel(\"msg in channel 1\", 500)\n    c2 := CreateMsgChannel(\"msg in channel 2\", 260)\n    c3 := CreateMsgChannel(\"msg in channel 3\", 50)\n\n    for i := 1; i <= 9; i++ {\n        select {\n            case msg := <-c1:\n                println(msg)\n            case msg := <-c2:\n                println(msg)\n            case msg := <-c3:\n                println(msg)\n        }\n    }\n}\n```\n运行效果:\n```golang\nroot@XIAOMO:~/gopro# go build channel.go\nroot@XIAOMO:~/gopro# ./channel\nmsg in channel 1\tcur_loop:1\nmsg in channel 2\tcur_loop:1\nmsg in channel 3\tcur_loop:1\nmsg in channel 3\tcur_loop:2\nmsg in channel 3\tcur_loop:3\nmsg in channel 2\tcur_loop:2\nmsg in channel 1\tcur_loop:2\nmsg in channel 2\tcur_loop:3\nmsg in channel 1\tcur_loop:3\n```\n由结果可见, 每个channel中的消息都能尽快的被读取, 而不会因为一个channel的阻塞而导致了其他channel的消息无法被读取。","source":"_posts/golang/golang_channel.md","raw":"---\ntitle: '[golang]channel管道类型'\ndate: 2016-03-04 09:00:11\ntags: golang\n---\n\n在unix系统中, 管道是进程间通信的一种方式。那golang的channel和系统的管道有什么区别？\n\n### 什么是channel\n官方文档有个channel的定义:\n\n\n>    A channel provides a mechanism for concurrently executing functions to communicate\n>    by sending and receiving values of a specified element type.\n>    The value of an uninitialized channel is nil.\n\nchannel应该可以理解为: 一种为并行执行而提供函数间通信的机制, 通过传递send和recieve特定类型的值来实现。没有初始化值的channel对象, 默认为nil。\n<!--more-->\n\n也就是: 在管道的两端, 一个对象可以在一端进行写/读/读写的操作, 另一个对象可以在另一端进行读/写/读写的操作；能否读写, 取决于管道是否是双向的。默认情况下, 管道是双向的。\n\n### channel的基础特性\n- channel是一个作为队列queue的值。 当queue满时, 写操作是阻塞的; 当queue为空时, 读操作是阻塞的\n- 向一个nil channel读数据或写数据, 会造成一直阻塞\n- 向一个close了的channel写数据, 会引起panic\n- 向一个close了的channel读数据, 会立刻获取到一个零值\n\n### 一些用法示例\n#### 1.没有缓冲的channel\n当我们没有为channel指定容量时, 我们称这个channel是没有缓冲的。\n```golang\nfunc test_deadlock() {\n     c := make(chan string)\n     c <- \"test\"    // 写入channel\n     s := <-c       // 读取channel\n     println(s)\n}\n```\n运行效果:\n```bash\nfatal error: all goroutines are asleep - deadlock!\n\ngoroutine 1 [chan send]:\nmain.test_deadlock\n\t/root/gopro/channel.go:10\nmain.main\n\t/root/gopro/channel.go:53\n```\n提示出现了死锁。这是因为处在同一个单线程环境中, 两个goroutine互相等待对方释放资源, 造成双方都无法继续运行下去。Go运行时检测到了死锁并给出了错误报告。指定容量后可解决这个问题:\n```golang\nc := make(chan string, 3)  // 长度为3\n```\n\n#### 2. 使用range来进行读取操作\n- range会在close channel后读取完所有数据并自动结束循环\n- 有/无缓冲的channel在使用range时效果是一样的\n- range方法, 不需要知道channel中消息的准确数目, 使用人性化\n\n使用range示例:\n```golang\nfunc main() {\n     message := make(chan int)\n     count := 3\n\n     go func() {\n          for i := 1; i <= count; i++ {\n               fmt.Printf(\"send %v\\n\", i)\n               message <- i\n          }\n          //完成写入后, 需要关闭channel, 否则主goroutine会因一直等待而死锁\n          close(message)\n     }()\n     time.Sleep(time.Second * 3)\n\n     for msg := range message {\n          fmt.Printf(\"recieve: %v\\n\", msg)\n     }\n}\n```\n运行效果:\n```golang\nroot@XIAOMO:~/gopro# go build channel.go\nroot@XIAOMO:~/gopro# ./channel\nsend 1\n// 此处等待3秒\nrecieve: 1\nsend 2\nsend 3\nrecieve: 2\nrecieve: 3\n```\n\n#### 3. 多channel模式\n在程序中需要用到多个channel时, 我们可以使用select(类似于switch)来实现对channel的支持。\n\n以下示例中方法CreateMsgChannel()创建了一个channel和goroutine, 并向该channel中分三次写入数据; 在main()方法中通过select来读取三个channel中的数据:\n```golang\nfunc CreateMsgChannel(msg string, delay time.Duration) <-chan string {\n     c := make(chan string)\n     go func() {\n          for i := 1; i <= 3; i++ {\n               c <- fmt.Sprintf(\"%s\\tcur_loop:%d\", msg, i)\n               // 模拟处理时间\n               time.Sleep(time.Millisecond * delay)\n          }\n     }()\n     return c\n}\n\nfunc main() {\n    c1 := CreateMsgChannel(\"msg in channel 1\", 500)\n    c2 := CreateMsgChannel(\"msg in channel 2\", 260)\n    c3 := CreateMsgChannel(\"msg in channel 3\", 50)\n\n    for i := 1; i <= 9; i++ {\n        select {\n            case msg := <-c1:\n                println(msg)\n            case msg := <-c2:\n                println(msg)\n            case msg := <-c3:\n                println(msg)\n        }\n    }\n}\n```\n运行效果:\n```golang\nroot@XIAOMO:~/gopro# go build channel.go\nroot@XIAOMO:~/gopro# ./channel\nmsg in channel 1\tcur_loop:1\nmsg in channel 2\tcur_loop:1\nmsg in channel 3\tcur_loop:1\nmsg in channel 3\tcur_loop:2\nmsg in channel 3\tcur_loop:3\nmsg in channel 2\tcur_loop:2\nmsg in channel 1\tcur_loop:2\nmsg in channel 2\tcur_loop:3\nmsg in channel 1\tcur_loop:3\n```\n由结果可见, 每个channel中的消息都能尽快的被读取, 而不会因为一个channel的阻塞而导致了其他channel的消息无法被读取。","slug":"golang/golang_channel","published":1,"updated":"2017-08-07T05:47:10.146Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj84nao3c000p7v4dnf9ojhzg","content":"<p>在unix系统中, 管道是进程间通信的一种方式。那golang的channel和系统的管道有什么区别？</p>\n<h3 id=\"什么是channel\"><a href=\"#什么是channel\" class=\"headerlink\" title=\"什么是channel\"></a>什么是channel</h3><p>官方文档有个channel的定义:</p>\n<blockquote>\n<p>   A channel provides a mechanism for concurrently executing functions to communicate<br>   by sending and receiving values of a specified element type.<br>   The value of an uninitialized channel is nil.</p>\n</blockquote>\n<p>channel应该可以理解为: 一种为并行执行而提供函数间通信的机制, 通过传递send和recieve特定类型的值来实现。没有初始化值的channel对象, 默认为nil。<br><a id=\"more\"></a></p>\n<p>也就是: 在管道的两端, 一个对象可以在一端进行写/读/读写的操作, 另一个对象可以在另一端进行读/写/读写的操作；能否读写, 取决于管道是否是双向的。默认情况下, 管道是双向的。</p>\n<h3 id=\"channel的基础特性\"><a href=\"#channel的基础特性\" class=\"headerlink\" title=\"channel的基础特性\"></a>channel的基础特性</h3><ul>\n<li>channel是一个作为队列queue的值。 当queue满时, 写操作是阻塞的; 当queue为空时, 读操作是阻塞的</li>\n<li>向一个nil channel读数据或写数据, 会造成一直阻塞</li>\n<li>向一个close了的channel写数据, 会引起panic</li>\n<li>向一个close了的channel读数据, 会立刻获取到一个零值</li>\n</ul>\n<h3 id=\"一些用法示例\"><a href=\"#一些用法示例\" class=\"headerlink\" title=\"一些用法示例\"></a>一些用法示例</h3><h4 id=\"1-没有缓冲的channel\"><a href=\"#1-没有缓冲的channel\" class=\"headerlink\" title=\"1.没有缓冲的channel\"></a>1.没有缓冲的channel</h4><p>当我们没有为channel指定容量时, 我们称这个channel是没有缓冲的。<br><figure class=\"highlight golang\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">test_deadlock</span><span class=\"params\">()</span></span> &#123;</div><div class=\"line\">     c := <span class=\"built_in\">make</span>(<span class=\"keyword\">chan</span> <span class=\"keyword\">string</span>)</div><div class=\"line\">     c &lt;- <span class=\"string\">\"test\"</span>    <span class=\"comment\">// 写入channel</span></div><div class=\"line\">     s := &lt;-c       <span class=\"comment\">// 读取channel</span></div><div class=\"line\">     <span class=\"built_in\">println</span>(s)</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>运行效果:<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">fatal error: all goroutines are asleep - deadlock!</div><div class=\"line\"></div><div class=\"line\">goroutine 1 [chan send]:</div><div class=\"line\">main.test_deadlock</div><div class=\"line\">\t/root/gopro/channel.go:10</div><div class=\"line\">main.main</div><div class=\"line\">\t/root/gopro/channel.go:53</div></pre></td></tr></table></figure></p>\n<p>提示出现了死锁。这是因为处在同一个单线程环境中, 两个goroutine互相等待对方释放资源, 造成双方都无法继续运行下去。Go运行时检测到了死锁并给出了错误报告。指定容量后可解决这个问题:<br><figure class=\"highlight golang\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">c := <span class=\"built_in\">make</span>(<span class=\"keyword\">chan</span> <span class=\"keyword\">string</span>, <span class=\"number\">3</span>)  <span class=\"comment\">// 长度为3</span></div></pre></td></tr></table></figure></p>\n<h4 id=\"2-使用range来进行读取操作\"><a href=\"#2-使用range来进行读取操作\" class=\"headerlink\" title=\"2. 使用range来进行读取操作\"></a>2. 使用range来进行读取操作</h4><ul>\n<li>range会在close channel后读取完所有数据并自动结束循环</li>\n<li>有/无缓冲的channel在使用range时效果是一样的</li>\n<li>range方法, 不需要知道channel中消息的准确数目, 使用人性化</li>\n</ul>\n<p>使用range示例:<br><figure class=\"highlight golang\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</div><div class=\"line\">     message := <span class=\"built_in\">make</span>(<span class=\"keyword\">chan</span> <span class=\"keyword\">int</span>)</div><div class=\"line\">     count := <span class=\"number\">3</span></div><div class=\"line\"></div><div class=\"line\">     <span class=\"keyword\">go</span> <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">()</span></span> &#123;</div><div class=\"line\">          <span class=\"keyword\">for</span> i := <span class=\"number\">1</span>; i &lt;= count; i++ &#123;</div><div class=\"line\">               fmt.Printf(<span class=\"string\">\"send %v\\n\"</span>, i)</div><div class=\"line\">               message &lt;- i</div><div class=\"line\">          &#125;</div><div class=\"line\">          <span class=\"comment\">//完成写入后, 需要关闭channel, 否则主goroutine会因一直等待而死锁</span></div><div class=\"line\">          <span class=\"built_in\">close</span>(message)</div><div class=\"line\">     &#125;()</div><div class=\"line\">     time.Sleep(time.Second * <span class=\"number\">3</span>)</div><div class=\"line\"></div><div class=\"line\">     <span class=\"keyword\">for</span> msg := <span class=\"keyword\">range</span> message &#123;</div><div class=\"line\">          fmt.Printf(<span class=\"string\">\"recieve: %v\\n\"</span>, msg)</div><div class=\"line\">     &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>运行效果:<br><figure class=\"highlight golang\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">root@XIAOMO:~/gopro# <span class=\"keyword\">go</span> build channel.<span class=\"keyword\">go</span></div><div class=\"line\">root@XIAOMO:~/gopro# ./channel</div><div class=\"line\">send <span class=\"number\">1</span></div><div class=\"line\"><span class=\"comment\">// 此处等待3秒</span></div><div class=\"line\">recieve: <span class=\"number\">1</span></div><div class=\"line\">send <span class=\"number\">2</span></div><div class=\"line\">send <span class=\"number\">3</span></div><div class=\"line\">recieve: <span class=\"number\">2</span></div><div class=\"line\">recieve: <span class=\"number\">3</span></div></pre></td></tr></table></figure></p>\n<h4 id=\"3-多channel模式\"><a href=\"#3-多channel模式\" class=\"headerlink\" title=\"3. 多channel模式\"></a>3. 多channel模式</h4><p>在程序中需要用到多个channel时, 我们可以使用select(类似于switch)来实现对channel的支持。</p>\n<p>以下示例中方法CreateMsgChannel()创建了一个channel和goroutine, 并向该channel中分三次写入数据; 在main()方法中通过select来读取三个channel中的数据:<br><figure class=\"highlight golang\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">CreateMsgChannel</span><span class=\"params\">(msg <span class=\"keyword\">string</span>, delay time.Duration)</span> &lt;-<span class=\"title\">chan</span> <span class=\"title\">string</span></span> &#123;</div><div class=\"line\">     c := <span class=\"built_in\">make</span>(<span class=\"keyword\">chan</span> <span class=\"keyword\">string</span>)</div><div class=\"line\">     <span class=\"keyword\">go</span> <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">()</span></span> &#123;</div><div class=\"line\">          <span class=\"keyword\">for</span> i := <span class=\"number\">1</span>; i &lt;= <span class=\"number\">3</span>; i++ &#123;</div><div class=\"line\">               c &lt;- fmt.Sprintf(<span class=\"string\">\"%s\\tcur_loop:%d\"</span>, msg, i)</div><div class=\"line\">               <span class=\"comment\">// 模拟处理时间</span></div><div class=\"line\">               time.Sleep(time.Millisecond * delay)</div><div class=\"line\">          &#125;</div><div class=\"line\">     &#125;()</div><div class=\"line\">     <span class=\"keyword\">return</span> c</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</div><div class=\"line\">    c1 := CreateMsgChannel(<span class=\"string\">\"msg in channel 1\"</span>, <span class=\"number\">500</span>)</div><div class=\"line\">    c2 := CreateMsgChannel(<span class=\"string\">\"msg in channel 2\"</span>, <span class=\"number\">260</span>)</div><div class=\"line\">    c3 := CreateMsgChannel(<span class=\"string\">\"msg in channel 3\"</span>, <span class=\"number\">50</span>)</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">for</span> i := <span class=\"number\">1</span>; i &lt;= <span class=\"number\">9</span>; i++ &#123;</div><div class=\"line\">        <span class=\"keyword\">select</span> &#123;</div><div class=\"line\">            <span class=\"keyword\">case</span> msg := &lt;-c1:</div><div class=\"line\">                <span class=\"built_in\">println</span>(msg)</div><div class=\"line\">            <span class=\"keyword\">case</span> msg := &lt;-c2:</div><div class=\"line\">                <span class=\"built_in\">println</span>(msg)</div><div class=\"line\">            <span class=\"keyword\">case</span> msg := &lt;-c3:</div><div class=\"line\">                <span class=\"built_in\">println</span>(msg)</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>运行效果:<br><figure class=\"highlight golang\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">root@XIAOMO:~/gopro# <span class=\"keyword\">go</span> build channel.<span class=\"keyword\">go</span></div><div class=\"line\">root@XIAOMO:~/gopro# ./channel</div><div class=\"line\">msg in channel <span class=\"number\">1</span>\tcur_loop:<span class=\"number\">1</span></div><div class=\"line\">msg in channel <span class=\"number\">2</span>\tcur_loop:<span class=\"number\">1</span></div><div class=\"line\">msg in channel <span class=\"number\">3</span>\tcur_loop:<span class=\"number\">1</span></div><div class=\"line\">msg in channel <span class=\"number\">3</span>\tcur_loop:<span class=\"number\">2</span></div><div class=\"line\">msg in channel <span class=\"number\">3</span>\tcur_loop:<span class=\"number\">3</span></div><div class=\"line\">msg in channel <span class=\"number\">2</span>\tcur_loop:<span class=\"number\">2</span></div><div class=\"line\">msg in channel <span class=\"number\">1</span>\tcur_loop:<span class=\"number\">2</span></div><div class=\"line\">msg in channel <span class=\"number\">2</span>\tcur_loop:<span class=\"number\">3</span></div><div class=\"line\">msg in channel <span class=\"number\">1</span>\tcur_loop:<span class=\"number\">3</span></div></pre></td></tr></table></figure></p>\n<p>由结果可见, 每个channel中的消息都能尽快的被读取, 而不会因为一个channel的阻塞而导致了其他channel的消息无法被读取。</p>\n","site":{"data":{}},"excerpt":"<p>在unix系统中, 管道是进程间通信的一种方式。那golang的channel和系统的管道有什么区别？</p>\n<h3 id=\"什么是channel\"><a href=\"#什么是channel\" class=\"headerlink\" title=\"什么是channel\"></a>什么是channel</h3><p>官方文档有个channel的定义:</p>\n<blockquote>\n<p>   A channel provides a mechanism for concurrently executing functions to communicate<br>   by sending and receiving values of a specified element type.<br>   The value of an uninitialized channel is nil.</p>\n</blockquote>\n<p>channel应该可以理解为: 一种为并行执行而提供函数间通信的机制, 通过传递send和recieve特定类型的值来实现。没有初始化值的channel对象, 默认为nil。<br>","more":"</p>\n<p>也就是: 在管道的两端, 一个对象可以在一端进行写/读/读写的操作, 另一个对象可以在另一端进行读/写/读写的操作；能否读写, 取决于管道是否是双向的。默认情况下, 管道是双向的。</p>\n<h3 id=\"channel的基础特性\"><a href=\"#channel的基础特性\" class=\"headerlink\" title=\"channel的基础特性\"></a>channel的基础特性</h3><ul>\n<li>channel是一个作为队列queue的值。 当queue满时, 写操作是阻塞的; 当queue为空时, 读操作是阻塞的</li>\n<li>向一个nil channel读数据或写数据, 会造成一直阻塞</li>\n<li>向一个close了的channel写数据, 会引起panic</li>\n<li>向一个close了的channel读数据, 会立刻获取到一个零值</li>\n</ul>\n<h3 id=\"一些用法示例\"><a href=\"#一些用法示例\" class=\"headerlink\" title=\"一些用法示例\"></a>一些用法示例</h3><h4 id=\"1-没有缓冲的channel\"><a href=\"#1-没有缓冲的channel\" class=\"headerlink\" title=\"1.没有缓冲的channel\"></a>1.没有缓冲的channel</h4><p>当我们没有为channel指定容量时, 我们称这个channel是没有缓冲的。<br><figure class=\"highlight golang\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">test_deadlock</span><span class=\"params\">()</span></span> &#123;</div><div class=\"line\">     c := <span class=\"built_in\">make</span>(<span class=\"keyword\">chan</span> <span class=\"keyword\">string</span>)</div><div class=\"line\">     c &lt;- <span class=\"string\">\"test\"</span>    <span class=\"comment\">// 写入channel</span></div><div class=\"line\">     s := &lt;-c       <span class=\"comment\">// 读取channel</span></div><div class=\"line\">     <span class=\"built_in\">println</span>(s)</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>运行效果:<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">fatal error: all goroutines are asleep - deadlock!</div><div class=\"line\"></div><div class=\"line\">goroutine 1 [chan send]:</div><div class=\"line\">main.test_deadlock</div><div class=\"line\">\t/root/gopro/channel.go:10</div><div class=\"line\">main.main</div><div class=\"line\">\t/root/gopro/channel.go:53</div></pre></td></tr></table></figure></p>\n<p>提示出现了死锁。这是因为处在同一个单线程环境中, 两个goroutine互相等待对方释放资源, 造成双方都无法继续运行下去。Go运行时检测到了死锁并给出了错误报告。指定容量后可解决这个问题:<br><figure class=\"highlight golang\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">c := <span class=\"built_in\">make</span>(<span class=\"keyword\">chan</span> <span class=\"keyword\">string</span>, <span class=\"number\">3</span>)  <span class=\"comment\">// 长度为3</span></div></pre></td></tr></table></figure></p>\n<h4 id=\"2-使用range来进行读取操作\"><a href=\"#2-使用range来进行读取操作\" class=\"headerlink\" title=\"2. 使用range来进行读取操作\"></a>2. 使用range来进行读取操作</h4><ul>\n<li>range会在close channel后读取完所有数据并自动结束循环</li>\n<li>有/无缓冲的channel在使用range时效果是一样的</li>\n<li>range方法, 不需要知道channel中消息的准确数目, 使用人性化</li>\n</ul>\n<p>使用range示例:<br><figure class=\"highlight golang\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</div><div class=\"line\">     message := <span class=\"built_in\">make</span>(<span class=\"keyword\">chan</span> <span class=\"keyword\">int</span>)</div><div class=\"line\">     count := <span class=\"number\">3</span></div><div class=\"line\"></div><div class=\"line\">     <span class=\"keyword\">go</span> <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">()</span></span> &#123;</div><div class=\"line\">          <span class=\"keyword\">for</span> i := <span class=\"number\">1</span>; i &lt;= count; i++ &#123;</div><div class=\"line\">               fmt.Printf(<span class=\"string\">\"send %v\\n\"</span>, i)</div><div class=\"line\">               message &lt;- i</div><div class=\"line\">          &#125;</div><div class=\"line\">          <span class=\"comment\">//完成写入后, 需要关闭channel, 否则主goroutine会因一直等待而死锁</span></div><div class=\"line\">          <span class=\"built_in\">close</span>(message)</div><div class=\"line\">     &#125;()</div><div class=\"line\">     time.Sleep(time.Second * <span class=\"number\">3</span>)</div><div class=\"line\"></div><div class=\"line\">     <span class=\"keyword\">for</span> msg := <span class=\"keyword\">range</span> message &#123;</div><div class=\"line\">          fmt.Printf(<span class=\"string\">\"recieve: %v\\n\"</span>, msg)</div><div class=\"line\">     &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>运行效果:<br><figure class=\"highlight golang\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">root@XIAOMO:~/gopro# <span class=\"keyword\">go</span> build channel.<span class=\"keyword\">go</span></div><div class=\"line\">root@XIAOMO:~/gopro# ./channel</div><div class=\"line\">send <span class=\"number\">1</span></div><div class=\"line\"><span class=\"comment\">// 此处等待3秒</span></div><div class=\"line\">recieve: <span class=\"number\">1</span></div><div class=\"line\">send <span class=\"number\">2</span></div><div class=\"line\">send <span class=\"number\">3</span></div><div class=\"line\">recieve: <span class=\"number\">2</span></div><div class=\"line\">recieve: <span class=\"number\">3</span></div></pre></td></tr></table></figure></p>\n<h4 id=\"3-多channel模式\"><a href=\"#3-多channel模式\" class=\"headerlink\" title=\"3. 多channel模式\"></a>3. 多channel模式</h4><p>在程序中需要用到多个channel时, 我们可以使用select(类似于switch)来实现对channel的支持。</p>\n<p>以下示例中方法CreateMsgChannel()创建了一个channel和goroutine, 并向该channel中分三次写入数据; 在main()方法中通过select来读取三个channel中的数据:<br><figure class=\"highlight golang\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">CreateMsgChannel</span><span class=\"params\">(msg <span class=\"keyword\">string</span>, delay time.Duration)</span> &lt;-<span class=\"title\">chan</span> <span class=\"title\">string</span></span> &#123;</div><div class=\"line\">     c := <span class=\"built_in\">make</span>(<span class=\"keyword\">chan</span> <span class=\"keyword\">string</span>)</div><div class=\"line\">     <span class=\"keyword\">go</span> <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">()</span></span> &#123;</div><div class=\"line\">          <span class=\"keyword\">for</span> i := <span class=\"number\">1</span>; i &lt;= <span class=\"number\">3</span>; i++ &#123;</div><div class=\"line\">               c &lt;- fmt.Sprintf(<span class=\"string\">\"%s\\tcur_loop:%d\"</span>, msg, i)</div><div class=\"line\">               <span class=\"comment\">// 模拟处理时间</span></div><div class=\"line\">               time.Sleep(time.Millisecond * delay)</div><div class=\"line\">          &#125;</div><div class=\"line\">     &#125;()</div><div class=\"line\">     <span class=\"keyword\">return</span> c</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</div><div class=\"line\">    c1 := CreateMsgChannel(<span class=\"string\">\"msg in channel 1\"</span>, <span class=\"number\">500</span>)</div><div class=\"line\">    c2 := CreateMsgChannel(<span class=\"string\">\"msg in channel 2\"</span>, <span class=\"number\">260</span>)</div><div class=\"line\">    c3 := CreateMsgChannel(<span class=\"string\">\"msg in channel 3\"</span>, <span class=\"number\">50</span>)</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">for</span> i := <span class=\"number\">1</span>; i &lt;= <span class=\"number\">9</span>; i++ &#123;</div><div class=\"line\">        <span class=\"keyword\">select</span> &#123;</div><div class=\"line\">            <span class=\"keyword\">case</span> msg := &lt;-c1:</div><div class=\"line\">                <span class=\"built_in\">println</span>(msg)</div><div class=\"line\">            <span class=\"keyword\">case</span> msg := &lt;-c2:</div><div class=\"line\">                <span class=\"built_in\">println</span>(msg)</div><div class=\"line\">            <span class=\"keyword\">case</span> msg := &lt;-c3:</div><div class=\"line\">                <span class=\"built_in\">println</span>(msg)</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>运行效果:<br><figure class=\"highlight golang\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">root@XIAOMO:~/gopro# <span class=\"keyword\">go</span> build channel.<span class=\"keyword\">go</span></div><div class=\"line\">root@XIAOMO:~/gopro# ./channel</div><div class=\"line\">msg in channel <span class=\"number\">1</span>\tcur_loop:<span class=\"number\">1</span></div><div class=\"line\">msg in channel <span class=\"number\">2</span>\tcur_loop:<span class=\"number\">1</span></div><div class=\"line\">msg in channel <span class=\"number\">3</span>\tcur_loop:<span class=\"number\">1</span></div><div class=\"line\">msg in channel <span class=\"number\">3</span>\tcur_loop:<span class=\"number\">2</span></div><div class=\"line\">msg in channel <span class=\"number\">3</span>\tcur_loop:<span class=\"number\">3</span></div><div class=\"line\">msg in channel <span class=\"number\">2</span>\tcur_loop:<span class=\"number\">2</span></div><div class=\"line\">msg in channel <span class=\"number\">1</span>\tcur_loop:<span class=\"number\">2</span></div><div class=\"line\">msg in channel <span class=\"number\">2</span>\tcur_loop:<span class=\"number\">3</span></div><div class=\"line\">msg in channel <span class=\"number\">1</span>\tcur_loop:<span class=\"number\">3</span></div></pre></td></tr></table></figure></p>\n<p>由结果可见, 每个channel中的消息都能尽快的被读取, 而不会因为一个channel的阻塞而导致了其他channel的消息无法被读取。</p>"},{"title":"[golang]gRPC通信协议","date":"2017-02-09T02:10:53.000Z","_content":"\n#### 关于gRPC\ngRPC是google公司面向移动应用, 基于http2.0协议标准而设计, 基于Protocol Buffers而开发的一种开源RPC框架。<br>\nProtoBuf可以用于通讯协议、数据存储等一些语言/平台无关的数据序列化, 号称高性能, 通用性强, 具体可以看下这里的分析：\n[Google Protocol Buffer 的使用和原理](https://www.ibm.com/developerworks/cn/linux/l-cn-gpb/)\n<br>gRPC提供了一种相对简单的方法来精确地定义服务, 和为ios/andoird/后台服务自动生成可靠的数据结构功能库; 通过它可以节省带宽和CPU资源, 降低TCP连接次数, 和延长电池寿命。\n<!--more-->\n\n#### 1.安装protobuf与gRPC of go\n去到[Protocol Buffers](https://github.com/google/protobuf/releases)下载器最新版。 笔者当前获取的版本为3.0.0, 安装过程如下：\n```\ntar -zxf protobuf-cpp-3.0.0-beta-2.tar.gz\ncd protobuf-3.0.0-beta-2/\n./configure\nmake && sudo make install\ngo get -u github.com/golang/protobuf/protoc-gen-go   # proto for golang\ngo get -u google.golang.org/grpc                     # grpc for golang\n```\n#### 2.定义proto文件\n```protobuf\n//protobuf3 protocol\nsyntax = \"proto3\";\npackage account;\n\n// request struct\nmessage UserRq {\n    int32 id = 1;\n}\n\n// response struct\nmessage UserRp {\n    string name = 1;\n}\n\n// service\nservice Data {\n    rpc GetUser(UserRq) returns (UserRp);\n}\n```\n上面定义了一个服务Data，有一个API叫GetUser，接收参数类型UserRq, 返回参数类型UserRp。\n\n<br>在proto中, service可以定义server， 有四种实现方式:(参考http://www.jianshu.com/p/774b38306c30)\n\n- rpc GetFeature(Point) returns (Feature) {}\n  <br>类似普通的函数调用，客户端发送请求Point到服务器，服务器返回相应Feature.\n\n- rpc ListFeatures(Rectangle) returns (stream Feature) {}\n  <br>客户端发起一次请求，服务器端返回一个流式数据，比如一个数组中的逐个元素\n\n- rpc RecordRoute(stream Point) returns (RouteSummary) {}\n  <br>客户端发起的请求是一个流式的数据，比如数组中的逐个元素，服务器返回一个相应\n\n- rpc RouteChat(stream RouteNote) returns (stream RouteNote) {}\n  <br>客户端发起的请求是一个流式数据，比如数组中的逐个元素，二服务器返回的也是一个类似的数据结构\n\n上面的proto定义实现的是第一种方式。\n\n#### 3.使用protoc command生成go源文件\n```bash\nprotoc --go_out=plugins=grpc:. account.proto\nls\naccount.pb.go  account.proto\n```\n通过protoc生成了account.pb.go，其源码看起来是这样子的:\n```golang\n// Code generated by protoc-gen-go.\n// source: account.proto\n// DO NOT EDIT!\n\n/*\nPackage account is a generated protocol buffer package.\n\nIt is generated from these files:\n\taccount.proto\n\nIt has these top-level messages:\n\tUserRq\n\tUserRp\n*/\npackage account\n\nimport proto \"github.com/golang/protobuf/proto\"\nimport fmt \"fmt\"\nimport math \"math\"\n\nimport (\n\tcontext \"golang.org/x/net/context\"\n\tgrpc \"google.golang.org/grpc\"\n)\n\n// Reference imports to suppress errors if they are not otherwise used.\nvar _ = proto.Marshal\nvar _ = fmt.Errorf\nvar _ = math.Inf\n\n// This is a compile-time assertion to ensure that this generated file\n// is compatible with the proto package it is being compiled against.\nconst _ = proto.ProtoPackageIsVersion1\n\n// request struct\ntype UserRq struct {\n\tId int32 `protobuf:\"varint,1,opt,name=id\" json:\"id,omitempty\"`\n}\n\nfunc (m *UserRq) Reset()                    { *m = UserRq{} }\nfunc (m *UserRq) String() string            { return proto.CompactTextString(m) }\nfunc (*UserRq) ProtoMessage()               {}\nfunc (*UserRq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }\n\n// response struct\ntype UserRp struct {\n\tName string `protobuf:\"bytes,1,opt,name=name\" json:\"name,omitempty\"`\n}\n\nfunc (m *UserRp) Reset()                    { *m = UserRp{} }\nfunc (m *UserRp) String() string            { return proto.CompactTextString(m) }\nfunc (*UserRp) ProtoMessage()               {}\nfunc (*UserRp) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }\n\nfunc init() {\n\tproto.RegisterType((*UserRq)(nil), \"account.UserRq\")\n\tproto.RegisterType((*UserRp)(nil), \"account.UserRp\")\n}\n\n// Reference imports to suppress errors if they are not otherwise used.\nvar _ context.Context\nvar _ grpc.ClientConn\n\n// This is a compile-time assertion to ensure that this generated file\n// is compatible with the grpc package it is being compiled against.\nconst _ = grpc.SupportPackageIsVersion1\n\n// Client API for Data service\n\ntype DataClient interface {\n\tGetUser(ctx context.Context, in *UserRq, opts ...grpc.CallOption) (*UserRp, error)\n}\n\ntype dataClient struct {\n\tcc *grpc.ClientConn\n}\n\nfunc NewDataClient(cc *grpc.ClientConn) DataClient {\n\treturn &dataClient{cc}\n}\n\nfunc (c *dataClient) GetUser(ctx context.Context, in *UserRq, opts ...grpc.CallOption) (*UserRp, error) {\n\tout := new(UserRp)\n\terr := grpc.Invoke(ctx, \"/account.Data/GetUser\", in, out, c.cc, opts...)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\treturn out, nil\n}\n\n// Server API for Data service\n\ntype DataServer interface {\n\tGetUser(context.Context, *UserRq) (*UserRp, error)\n}\n\nfunc RegisterDataServer(s *grpc.Server, srv DataServer) {\n\ts.RegisterService(&_Data_serviceDesc, srv)\n}\n\nfunc _Data_GetUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error) (interface{}, error) {\n\tin := new(UserRq)\n\tif err := dec(in); err != nil {\n\t\treturn nil, err\n\t}\n\tout, err := srv.(DataServer).GetUser(ctx, in)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\treturn out, nil\n}\n\nvar _Data_serviceDesc = grpc.ServiceDesc{\n\tServiceName: \"account.Data\",\n\tHandlerType: (*DataServer)(nil),\n\tMethods: []grpc.MethodDesc{\n\t\t{\n\t\t\tMethodName: \"GetUser\",\n\t\t\tHandler:    _Data_GetUser_Handler,\n\t\t},\n\t},\n\tStreams: []grpc.StreamDesc{},\n}\n\nvar fileDescriptor0 = []byte{\n\t// 119 bytes of a gzipped FileDescriptorProto\n\t0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0xe2, 0xe2, 0x4d, 0x4c, 0x4e, 0xce,\n\t0x2f, 0xcd, 0x2b, 0xd1, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x62, 0x87, 0x72, 0x95, 0x24, 0xb8,\n\t0xd8, 0x42, 0x8b, 0x53, 0x8b, 0x82, 0x0a, 0x85, 0xf8, 0xb8, 0x98, 0x32, 0x53, 0x24, 0x18, 0x15,\n\t0x18, 0x35, 0x58, 0x83, 0x80, 0x2c, 0x25, 0x19, 0xa8, 0x4c, 0x81, 0x90, 0x10, 0x17, 0x4b, 0x5e,\n\t0x62, 0x6e, 0x2a, 0x58, 0x8e, 0x33, 0x08, 0xcc, 0x36, 0x32, 0xe6, 0x62, 0x71, 0x49, 0x2c, 0x49,\n\t0x14, 0xd2, 0xe6, 0x62, 0x77, 0x4f, 0x2d, 0x01, 0x29, 0x14, 0xe2, 0xd7, 0x83, 0xd9, 0x01, 0x31,\n\t0x51, 0x0a, 0x4d, 0xa0, 0x20, 0x89, 0x0d, 0x6c, 0xb9, 0x31, 0x20, 0x00, 0x00, 0xff, 0xff, 0xa6,\n\t0x63, 0xe9, 0x2f, 0x8d, 0x00, 0x00, 0x00,\n}\n```\n\n#### 4. 服务端svr.go\n```\npackage main\n\n// created by moguang(moxiaomomo@gmail.com)\n// created at 2016-01-10\n\nimport (\n\t\"account\"\n\t\"golang.org/x/net/context\"\n\t\"google.golang.org/grpc\"\n\t\"log\"\n\t\"net\"\n\t\"strconv\"\n)\n\ntype Data struct{}\n\nfunc main() {\n\thost := \"127.0.0.1:8080\"\n\t//listen on port\n\tlis, err := net.Listen(\"tcp\", host)\n\tif err != nil {\n\t\tlog.Fatalf(\"Failed to listen: %v\", err)\n\t}\n\ts := grpc.NewServer()\n\taccount.RegisterDataServer(s, &Data{})\n\t// accept message\n\tlog.Printf(\"Begin to serve on %v\", host)\n\ts.Serve(lis)\n\tlog.Println(\"Server is shutdown.\")\n}\n\n// 给Data类型定义方法\nfunc (t *Data) GetUser(ctx context.Context, request *account.UserRq) (response *account.UserRp, err error) {\n\tlog.Printf(\"To get user, request.Id: %v\", request.Id)\n\tresponse = &account.UserRp{\n\t\tName: strconv.Itoa(int(request.Id)) + \"_test\",\n\t}\n\treturn response, err\n}\n```\n\n#### 5. 客户端cli.go\n```golang\npackage main\n\n// created by moguang(moxiaomomo@gmail.com)\n// created at 2016-01-10\n\nimport (\n\t\"account\"\n\t\"golang.org/x/net/context\"\n\t\"google.golang.org/grpc\"\n\t\"log\"\n\t\"math/rand\"\n\t\"strconv\"\n\t\"strings\"\n\t\"sync\"\n\t\"time\"\n)\n\nvar (\n\twg sync.WaitGroup\n)\n\nconst (\n\tserver      = \"127.0.0.1\"\n\tport        = \"8080\"\n\tparallel    = 10 //连接并行数\n\ttimes       = 10 //每连接请求次数\n)\n\nfunc main() {\n\tbeginTime := time.Now()\n\t//结合WaitGroup, 实现并行请求\n\tfor i := 0; i < int(parallel); i++ {\n\t\twg.Add(1)\n\t\tgo execRPC(&wg)\n\t}\n\twg.Wait()\n\n\tendTime := time.Now()\n\tlog.Printf(\"Exec time secs: %.2f \", endTime.Sub(beginTime).Seconds())\n}\n\nfunc execRPC(wg *sync.WaitGroup) {\n\tdefer wg.Done()\n\t// 建立连接\n\thost := server + \":\" + port\n\tconn, err := grpc.Dial(host, grpc.WithInsecure())\n\tif err != nil {\n\t\tlog.Printf(\"Dial Err: %v\", err)\n\t\treturn\n\t}\n\tdefer conn.Close()\n\n\tclient := account.NewDataClient(conn)\n\t// 连续发起多次请求\n\tfor i := 0; i < int(times); i++ {\n\t\tgetUser(client)\n\t}\n}\n\nfunc getUser(client account.DataClient) {\n\tvar request account.UserRq\n\tr := rand.Intn(parallel)\n\trequest.Id = int32(r)\n\n\t// 调用远程方法\n\tresponse, _ := client.GetUser(context.Background(), &request)\n\t// 判断返回结果\n\tif id, _ := strconv.Atoi(strings.Split(response.Name, \":\")[0]); id != r {\n\t\tlog.Printf(\"Response error %#v\", response)\n\t} else {\n\t\tlog.Printf(\"Response ok %#v\", response)\n\t}\n}\n```\n","source":"_posts/golang/golang_gRPC.md","raw":"---\ntitle: '[golang]gRPC通信协议'\ndate: 2017-02-09 10:10:53\ntags: golang\n---\n\n#### 关于gRPC\ngRPC是google公司面向移动应用, 基于http2.0协议标准而设计, 基于Protocol Buffers而开发的一种开源RPC框架。<br>\nProtoBuf可以用于通讯协议、数据存储等一些语言/平台无关的数据序列化, 号称高性能, 通用性强, 具体可以看下这里的分析：\n[Google Protocol Buffer 的使用和原理](https://www.ibm.com/developerworks/cn/linux/l-cn-gpb/)\n<br>gRPC提供了一种相对简单的方法来精确地定义服务, 和为ios/andoird/后台服务自动生成可靠的数据结构功能库; 通过它可以节省带宽和CPU资源, 降低TCP连接次数, 和延长电池寿命。\n<!--more-->\n\n#### 1.安装protobuf与gRPC of go\n去到[Protocol Buffers](https://github.com/google/protobuf/releases)下载器最新版。 笔者当前获取的版本为3.0.0, 安装过程如下：\n```\ntar -zxf protobuf-cpp-3.0.0-beta-2.tar.gz\ncd protobuf-3.0.0-beta-2/\n./configure\nmake && sudo make install\ngo get -u github.com/golang/protobuf/protoc-gen-go   # proto for golang\ngo get -u google.golang.org/grpc                     # grpc for golang\n```\n#### 2.定义proto文件\n```protobuf\n//protobuf3 protocol\nsyntax = \"proto3\";\npackage account;\n\n// request struct\nmessage UserRq {\n    int32 id = 1;\n}\n\n// response struct\nmessage UserRp {\n    string name = 1;\n}\n\n// service\nservice Data {\n    rpc GetUser(UserRq) returns (UserRp);\n}\n```\n上面定义了一个服务Data，有一个API叫GetUser，接收参数类型UserRq, 返回参数类型UserRp。\n\n<br>在proto中, service可以定义server， 有四种实现方式:(参考http://www.jianshu.com/p/774b38306c30)\n\n- rpc GetFeature(Point) returns (Feature) {}\n  <br>类似普通的函数调用，客户端发送请求Point到服务器，服务器返回相应Feature.\n\n- rpc ListFeatures(Rectangle) returns (stream Feature) {}\n  <br>客户端发起一次请求，服务器端返回一个流式数据，比如一个数组中的逐个元素\n\n- rpc RecordRoute(stream Point) returns (RouteSummary) {}\n  <br>客户端发起的请求是一个流式的数据，比如数组中的逐个元素，服务器返回一个相应\n\n- rpc RouteChat(stream RouteNote) returns (stream RouteNote) {}\n  <br>客户端发起的请求是一个流式数据，比如数组中的逐个元素，二服务器返回的也是一个类似的数据结构\n\n上面的proto定义实现的是第一种方式。\n\n#### 3.使用protoc command生成go源文件\n```bash\nprotoc --go_out=plugins=grpc:. account.proto\nls\naccount.pb.go  account.proto\n```\n通过protoc生成了account.pb.go，其源码看起来是这样子的:\n```golang\n// Code generated by protoc-gen-go.\n// source: account.proto\n// DO NOT EDIT!\n\n/*\nPackage account is a generated protocol buffer package.\n\nIt is generated from these files:\n\taccount.proto\n\nIt has these top-level messages:\n\tUserRq\n\tUserRp\n*/\npackage account\n\nimport proto \"github.com/golang/protobuf/proto\"\nimport fmt \"fmt\"\nimport math \"math\"\n\nimport (\n\tcontext \"golang.org/x/net/context\"\n\tgrpc \"google.golang.org/grpc\"\n)\n\n// Reference imports to suppress errors if they are not otherwise used.\nvar _ = proto.Marshal\nvar _ = fmt.Errorf\nvar _ = math.Inf\n\n// This is a compile-time assertion to ensure that this generated file\n// is compatible with the proto package it is being compiled against.\nconst _ = proto.ProtoPackageIsVersion1\n\n// request struct\ntype UserRq struct {\n\tId int32 `protobuf:\"varint,1,opt,name=id\" json:\"id,omitempty\"`\n}\n\nfunc (m *UserRq) Reset()                    { *m = UserRq{} }\nfunc (m *UserRq) String() string            { return proto.CompactTextString(m) }\nfunc (*UserRq) ProtoMessage()               {}\nfunc (*UserRq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }\n\n// response struct\ntype UserRp struct {\n\tName string `protobuf:\"bytes,1,opt,name=name\" json:\"name,omitempty\"`\n}\n\nfunc (m *UserRp) Reset()                    { *m = UserRp{} }\nfunc (m *UserRp) String() string            { return proto.CompactTextString(m) }\nfunc (*UserRp) ProtoMessage()               {}\nfunc (*UserRp) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }\n\nfunc init() {\n\tproto.RegisterType((*UserRq)(nil), \"account.UserRq\")\n\tproto.RegisterType((*UserRp)(nil), \"account.UserRp\")\n}\n\n// Reference imports to suppress errors if they are not otherwise used.\nvar _ context.Context\nvar _ grpc.ClientConn\n\n// This is a compile-time assertion to ensure that this generated file\n// is compatible with the grpc package it is being compiled against.\nconst _ = grpc.SupportPackageIsVersion1\n\n// Client API for Data service\n\ntype DataClient interface {\n\tGetUser(ctx context.Context, in *UserRq, opts ...grpc.CallOption) (*UserRp, error)\n}\n\ntype dataClient struct {\n\tcc *grpc.ClientConn\n}\n\nfunc NewDataClient(cc *grpc.ClientConn) DataClient {\n\treturn &dataClient{cc}\n}\n\nfunc (c *dataClient) GetUser(ctx context.Context, in *UserRq, opts ...grpc.CallOption) (*UserRp, error) {\n\tout := new(UserRp)\n\terr := grpc.Invoke(ctx, \"/account.Data/GetUser\", in, out, c.cc, opts...)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\treturn out, nil\n}\n\n// Server API for Data service\n\ntype DataServer interface {\n\tGetUser(context.Context, *UserRq) (*UserRp, error)\n}\n\nfunc RegisterDataServer(s *grpc.Server, srv DataServer) {\n\ts.RegisterService(&_Data_serviceDesc, srv)\n}\n\nfunc _Data_GetUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error) (interface{}, error) {\n\tin := new(UserRq)\n\tif err := dec(in); err != nil {\n\t\treturn nil, err\n\t}\n\tout, err := srv.(DataServer).GetUser(ctx, in)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\treturn out, nil\n}\n\nvar _Data_serviceDesc = grpc.ServiceDesc{\n\tServiceName: \"account.Data\",\n\tHandlerType: (*DataServer)(nil),\n\tMethods: []grpc.MethodDesc{\n\t\t{\n\t\t\tMethodName: \"GetUser\",\n\t\t\tHandler:    _Data_GetUser_Handler,\n\t\t},\n\t},\n\tStreams: []grpc.StreamDesc{},\n}\n\nvar fileDescriptor0 = []byte{\n\t// 119 bytes of a gzipped FileDescriptorProto\n\t0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0xe2, 0xe2, 0x4d, 0x4c, 0x4e, 0xce,\n\t0x2f, 0xcd, 0x2b, 0xd1, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x62, 0x87, 0x72, 0x95, 0x24, 0xb8,\n\t0xd8, 0x42, 0x8b, 0x53, 0x8b, 0x82, 0x0a, 0x85, 0xf8, 0xb8, 0x98, 0x32, 0x53, 0x24, 0x18, 0x15,\n\t0x18, 0x35, 0x58, 0x83, 0x80, 0x2c, 0x25, 0x19, 0xa8, 0x4c, 0x81, 0x90, 0x10, 0x17, 0x4b, 0x5e,\n\t0x62, 0x6e, 0x2a, 0x58, 0x8e, 0x33, 0x08, 0xcc, 0x36, 0x32, 0xe6, 0x62, 0x71, 0x49, 0x2c, 0x49,\n\t0x14, 0xd2, 0xe6, 0x62, 0x77, 0x4f, 0x2d, 0x01, 0x29, 0x14, 0xe2, 0xd7, 0x83, 0xd9, 0x01, 0x31,\n\t0x51, 0x0a, 0x4d, 0xa0, 0x20, 0x89, 0x0d, 0x6c, 0xb9, 0x31, 0x20, 0x00, 0x00, 0xff, 0xff, 0xa6,\n\t0x63, 0xe9, 0x2f, 0x8d, 0x00, 0x00, 0x00,\n}\n```\n\n#### 4. 服务端svr.go\n```\npackage main\n\n// created by moguang(moxiaomomo@gmail.com)\n// created at 2016-01-10\n\nimport (\n\t\"account\"\n\t\"golang.org/x/net/context\"\n\t\"google.golang.org/grpc\"\n\t\"log\"\n\t\"net\"\n\t\"strconv\"\n)\n\ntype Data struct{}\n\nfunc main() {\n\thost := \"127.0.0.1:8080\"\n\t//listen on port\n\tlis, err := net.Listen(\"tcp\", host)\n\tif err != nil {\n\t\tlog.Fatalf(\"Failed to listen: %v\", err)\n\t}\n\ts := grpc.NewServer()\n\taccount.RegisterDataServer(s, &Data{})\n\t// accept message\n\tlog.Printf(\"Begin to serve on %v\", host)\n\ts.Serve(lis)\n\tlog.Println(\"Server is shutdown.\")\n}\n\n// 给Data类型定义方法\nfunc (t *Data) GetUser(ctx context.Context, request *account.UserRq) (response *account.UserRp, err error) {\n\tlog.Printf(\"To get user, request.Id: %v\", request.Id)\n\tresponse = &account.UserRp{\n\t\tName: strconv.Itoa(int(request.Id)) + \"_test\",\n\t}\n\treturn response, err\n}\n```\n\n#### 5. 客户端cli.go\n```golang\npackage main\n\n// created by moguang(moxiaomomo@gmail.com)\n// created at 2016-01-10\n\nimport (\n\t\"account\"\n\t\"golang.org/x/net/context\"\n\t\"google.golang.org/grpc\"\n\t\"log\"\n\t\"math/rand\"\n\t\"strconv\"\n\t\"strings\"\n\t\"sync\"\n\t\"time\"\n)\n\nvar (\n\twg sync.WaitGroup\n)\n\nconst (\n\tserver      = \"127.0.0.1\"\n\tport        = \"8080\"\n\tparallel    = 10 //连接并行数\n\ttimes       = 10 //每连接请求次数\n)\n\nfunc main() {\n\tbeginTime := time.Now()\n\t//结合WaitGroup, 实现并行请求\n\tfor i := 0; i < int(parallel); i++ {\n\t\twg.Add(1)\n\t\tgo execRPC(&wg)\n\t}\n\twg.Wait()\n\n\tendTime := time.Now()\n\tlog.Printf(\"Exec time secs: %.2f \", endTime.Sub(beginTime).Seconds())\n}\n\nfunc execRPC(wg *sync.WaitGroup) {\n\tdefer wg.Done()\n\t// 建立连接\n\thost := server + \":\" + port\n\tconn, err := grpc.Dial(host, grpc.WithInsecure())\n\tif err != nil {\n\t\tlog.Printf(\"Dial Err: %v\", err)\n\t\treturn\n\t}\n\tdefer conn.Close()\n\n\tclient := account.NewDataClient(conn)\n\t// 连续发起多次请求\n\tfor i := 0; i < int(times); i++ {\n\t\tgetUser(client)\n\t}\n}\n\nfunc getUser(client account.DataClient) {\n\tvar request account.UserRq\n\tr := rand.Intn(parallel)\n\trequest.Id = int32(r)\n\n\t// 调用远程方法\n\tresponse, _ := client.GetUser(context.Background(), &request)\n\t// 判断返回结果\n\tif id, _ := strconv.Atoi(strings.Split(response.Name, \":\")[0]); id != r {\n\t\tlog.Printf(\"Response error %#v\", response)\n\t} else {\n\t\tlog.Printf(\"Response ok %#v\", response)\n\t}\n}\n```\n","slug":"golang/golang_gRPC","published":1,"updated":"2017-08-07T05:47:10.146Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj84nao3k000s7v4dpaepx6de","content":"<h4 id=\"关于gRPC\"><a href=\"#关于gRPC\" class=\"headerlink\" title=\"关于gRPC\"></a>关于gRPC</h4><p>gRPC是google公司面向移动应用, 基于http2.0协议标准而设计, 基于Protocol Buffers而开发的一种开源RPC框架。<br><br>ProtoBuf可以用于通讯协议、数据存储等一些语言/平台无关的数据序列化, 号称高性能, 通用性强, 具体可以看下这里的分析：<br><a href=\"https://www.ibm.com/developerworks/cn/linux/l-cn-gpb/\" target=\"_blank\" rel=\"external\">Google Protocol Buffer 的使用和原理</a><br><br>gRPC提供了一种相对简单的方法来精确地定义服务, 和为ios/andoird/后台服务自动生成可靠的数据结构功能库; 通过它可以节省带宽和CPU资源, 降低TCP连接次数, 和延长电池寿命。<br><a id=\"more\"></a></p>\n<h4 id=\"1-安装protobuf与gRPC-of-go\"><a href=\"#1-安装protobuf与gRPC-of-go\" class=\"headerlink\" title=\"1.安装protobuf与gRPC of go\"></a>1.安装protobuf与gRPC of go</h4><p>去到<a href=\"https://github.com/google/protobuf/releases\" target=\"_blank\" rel=\"external\">Protocol Buffers</a>下载器最新版。 笔者当前获取的版本为3.0.0, 安装过程如下：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">tar -zxf protobuf-cpp-3.0.0-beta-2.tar.gz</div><div class=\"line\">cd protobuf-3.0.0-beta-2/</div><div class=\"line\">./configure</div><div class=\"line\">make &amp;&amp; sudo make install</div><div class=\"line\">go get -u github.com/golang/protobuf/protoc-gen-go   # proto for golang</div><div class=\"line\">go get -u google.golang.org/grpc                     # grpc for golang</div></pre></td></tr></table></figure></p>\n<h4 id=\"2-定义proto文件\"><a href=\"#2-定义proto文件\" class=\"headerlink\" title=\"2.定义proto文件\"></a>2.定义proto文件</h4><figure class=\"highlight protobuf\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\">//protobuf3 protocol</div><div class=\"line\">syntax = &quot;proto3&quot;;</div><div class=\"line\">package account;</div><div class=\"line\"></div><div class=\"line\">// request struct</div><div class=\"line\">message UserRq &#123;</div><div class=\"line\">    int32 id = 1;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">// response struct</div><div class=\"line\">message UserRp &#123;</div><div class=\"line\">    string name = 1;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">// service</div><div class=\"line\">service Data &#123;</div><div class=\"line\">    rpc GetUser(UserRq) returns (UserRp);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>上面定义了一个服务Data，有一个API叫GetUser，接收参数类型UserRq, 返回参数类型UserRp。</p>\n<p><br>在proto中, service可以定义server， 有四种实现方式:(参考<a href=\"http://www.jianshu.com/p/774b38306c30\" target=\"_blank\" rel=\"external\">http://www.jianshu.com/p/774b38306c30</a>)</p>\n<ul>\n<li><p>rpc GetFeature(Point) returns (Feature) {}<br><br>类似普通的函数调用，客户端发送请求Point到服务器，服务器返回相应Feature.</p>\n</li>\n<li><p>rpc ListFeatures(Rectangle) returns (stream Feature) {}<br><br>客户端发起一次请求，服务器端返回一个流式数据，比如一个数组中的逐个元素</p>\n</li>\n<li><p>rpc RecordRoute(stream Point) returns (RouteSummary) {}<br><br>客户端发起的请求是一个流式的数据，比如数组中的逐个元素，服务器返回一个相应</p>\n</li>\n<li><p>rpc RouteChat(stream RouteNote) returns (stream RouteNote) {}<br><br>客户端发起的请求是一个流式数据，比如数组中的逐个元素，二服务器返回的也是一个类似的数据结构</p>\n</li>\n</ul>\n<p>上面的proto定义实现的是第一种方式。</p>\n<h4 id=\"3-使用protoc-command生成go源文件\"><a href=\"#3-使用protoc-command生成go源文件\" class=\"headerlink\" title=\"3.使用protoc command生成go源文件\"></a>3.使用protoc command生成go源文件</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">protoc --go_out=plugins=grpc:. account.proto</div><div class=\"line\">ls</div><div class=\"line\">account.pb.go  account.proto</div></pre></td></tr></table></figure>\n<p>通过protoc生成了account.pb.go，其源码看起来是这样子的:<br><figure class=\"highlight golang\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div><div class=\"line\">94</div><div class=\"line\">95</div><div class=\"line\">96</div><div class=\"line\">97</div><div class=\"line\">98</div><div class=\"line\">99</div><div class=\"line\">100</div><div class=\"line\">101</div><div class=\"line\">102</div><div class=\"line\">103</div><div class=\"line\">104</div><div class=\"line\">105</div><div class=\"line\">106</div><div class=\"line\">107</div><div class=\"line\">108</div><div class=\"line\">109</div><div class=\"line\">110</div><div class=\"line\">111</div><div class=\"line\">112</div><div class=\"line\">113</div><div class=\"line\">114</div><div class=\"line\">115</div><div class=\"line\">116</div><div class=\"line\">117</div><div class=\"line\">118</div><div class=\"line\">119</div><div class=\"line\">120</div><div class=\"line\">121</div><div class=\"line\">122</div><div class=\"line\">123</div><div class=\"line\">124</div><div class=\"line\">125</div><div class=\"line\">126</div><div class=\"line\">127</div><div class=\"line\">128</div><div class=\"line\">129</div><div class=\"line\">130</div><div class=\"line\">131</div><div class=\"line\">132</div><div class=\"line\">133</div><div class=\"line\">134</div><div class=\"line\">135</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// Code generated by protoc-gen-go.</span></div><div class=\"line\"><span class=\"comment\">// source: account.proto</span></div><div class=\"line\"><span class=\"comment\">// DO NOT EDIT!</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/*</span></div><div class=\"line\">Package account is a generated protocol buffer package.</div><div class=\"line\"></div><div class=\"line\">It is generated from these files:</div><div class=\"line\">\taccount.proto</div><div class=\"line\"></div><div class=\"line\">It has these top-level messages:</div><div class=\"line\">\tUserRq</div><div class=\"line\">\tUserRp</div><div class=\"line\">*/</div><div class=\"line\"><span class=\"keyword\">package</span> account</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">import</span> proto <span class=\"string\">\"github.com/golang/protobuf/proto\"</span></div><div class=\"line\"><span class=\"keyword\">import</span> fmt <span class=\"string\">\"fmt\"</span></div><div class=\"line\"><span class=\"keyword\">import</span> math <span class=\"string\">\"math\"</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">import</span> (</div><div class=\"line\">\tcontext <span class=\"string\">\"golang.org/x/net/context\"</span></div><div class=\"line\">\tgrpc <span class=\"string\">\"google.golang.org/grpc\"</span></div><div class=\"line\">)</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// Reference imports to suppress errors if they are not otherwise used.</span></div><div class=\"line\"><span class=\"keyword\">var</span> _ = proto.Marshal</div><div class=\"line\"><span class=\"keyword\">var</span> _ = fmt.Errorf</div><div class=\"line\"><span class=\"keyword\">var</span> _ = math.Inf</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// This is a compile-time assertion to ensure that this generated file</span></div><div class=\"line\"><span class=\"comment\">// is compatible with the proto package it is being compiled against.</span></div><div class=\"line\"><span class=\"keyword\">const</span> _ = proto.ProtoPackageIsVersion1</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// request struct</span></div><div class=\"line\"><span class=\"keyword\">type</span> UserRq <span class=\"keyword\">struct</span> &#123;</div><div class=\"line\">\tId <span class=\"keyword\">int32</span> <span class=\"string\">`protobuf:\"varint,1,opt,name=id\" json:\"id,omitempty\"`</span></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(m *UserRq)</span> <span class=\"title\">Reset</span><span class=\"params\">()</span></span>                    &#123; *m = UserRq&#123;&#125; &#125;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(m *UserRq)</span> <span class=\"title\">String</span><span class=\"params\">()</span> <span class=\"title\">string</span></span>            &#123; <span class=\"keyword\">return</span> proto.CompactTextString(m) &#125;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(*UserRq)</span> <span class=\"title\">ProtoMessage</span><span class=\"params\">()</span></span>               &#123;&#125;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(*UserRq)</span> <span class=\"title\">Descriptor</span><span class=\"params\">()</span> <span class=\"params\">([]<span class=\"keyword\">byte</span>, []<span class=\"keyword\">int</span>)</span></span> &#123; <span class=\"keyword\">return</span> fileDescriptor0, []<span class=\"keyword\">int</span>&#123;<span class=\"number\">0</span>&#125; &#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// response struct</span></div><div class=\"line\"><span class=\"keyword\">type</span> UserRp <span class=\"keyword\">struct</span> &#123;</div><div class=\"line\">\tName <span class=\"keyword\">string</span> <span class=\"string\">`protobuf:\"bytes,1,opt,name=name\" json:\"name,omitempty\"`</span></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(m *UserRp)</span> <span class=\"title\">Reset</span><span class=\"params\">()</span></span>                    &#123; *m = UserRp&#123;&#125; &#125;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(m *UserRp)</span> <span class=\"title\">String</span><span class=\"params\">()</span> <span class=\"title\">string</span></span>            &#123; <span class=\"keyword\">return</span> proto.CompactTextString(m) &#125;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(*UserRp)</span> <span class=\"title\">ProtoMessage</span><span class=\"params\">()</span></span>               &#123;&#125;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(*UserRp)</span> <span class=\"title\">Descriptor</span><span class=\"params\">()</span> <span class=\"params\">([]<span class=\"keyword\">byte</span>, []<span class=\"keyword\">int</span>)</span></span> &#123; <span class=\"keyword\">return</span> fileDescriptor0, []<span class=\"keyword\">int</span>&#123;<span class=\"number\">1</span>&#125; &#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">init</span><span class=\"params\">()</span></span> &#123;</div><div class=\"line\">\tproto.RegisterType((*UserRq)(<span class=\"literal\">nil</span>), <span class=\"string\">\"account.UserRq\"</span>)</div><div class=\"line\">\tproto.RegisterType((*UserRp)(<span class=\"literal\">nil</span>), <span class=\"string\">\"account.UserRp\"</span>)</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// Reference imports to suppress errors if they are not otherwise used.</span></div><div class=\"line\"><span class=\"keyword\">var</span> _ context.Context</div><div class=\"line\"><span class=\"keyword\">var</span> _ grpc.ClientConn</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// This is a compile-time assertion to ensure that this generated file</span></div><div class=\"line\"><span class=\"comment\">// is compatible with the grpc package it is being compiled against.</span></div><div class=\"line\"><span class=\"keyword\">const</span> _ = grpc.SupportPackageIsVersion1</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// Client API for Data service</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">type</span> DataClient <span class=\"keyword\">interface</span> &#123;</div><div class=\"line\">\tGetUser(ctx context.Context, in *UserRq, opts ...grpc.CallOption) (*UserRp, error)</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">type</span> dataClient <span class=\"keyword\">struct</span> &#123;</div><div class=\"line\">\tcc *grpc.ClientConn</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">NewDataClient</span><span class=\"params\">(cc *grpc.ClientConn)</span> <span class=\"title\">DataClient</span></span> &#123;</div><div class=\"line\">\t<span class=\"keyword\">return</span> &amp;dataClient&#123;cc&#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(c *dataClient)</span> <span class=\"title\">GetUser</span><span class=\"params\">(ctx context.Context, in *UserRq, opts ...grpc.CallOption)</span> <span class=\"params\">(*UserRp, error)</span></span> &#123;</div><div class=\"line\">\tout := <span class=\"built_in\">new</span>(UserRp)</div><div class=\"line\">\terr := grpc.Invoke(ctx, <span class=\"string\">\"/account.Data/GetUser\"</span>, in, out, c.cc, opts...)</div><div class=\"line\">\t<span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"literal\">nil</span>, err</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t<span class=\"keyword\">return</span> out, <span class=\"literal\">nil</span></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// Server API for Data service</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">type</span> DataServer <span class=\"keyword\">interface</span> &#123;</div><div class=\"line\">\tGetUser(context.Context, *UserRq) (*UserRp, error)</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">RegisterDataServer</span><span class=\"params\">(s *grpc.Server, srv DataServer)</span></span> &#123;</div><div class=\"line\">\ts.RegisterService(&amp;_Data_serviceDesc, srv)</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> _<span class=\"title\">Data_GetUser_Handler</span><span class=\"params\">(srv <span class=\"keyword\">interface</span>&#123;&#125;, ctx context.Context, dec <span class=\"keyword\">func</span>(<span class=\"keyword\">interface</span>&#123;&#125;)</span> <span class=\"title\">error</span>) <span class=\"params\">(<span class=\"keyword\">interface</span>&#123;&#125;, error)</span></span> &#123;</div><div class=\"line\">\tin := <span class=\"built_in\">new</span>(UserRq)</div><div class=\"line\">\t<span class=\"keyword\">if</span> err := dec(in); err != <span class=\"literal\">nil</span> &#123;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"literal\">nil</span>, err</div><div class=\"line\">\t&#125;</div><div class=\"line\">\tout, err := srv.(DataServer).GetUser(ctx, in)</div><div class=\"line\">\t<span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"literal\">nil</span>, err</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t<span class=\"keyword\">return</span> out, <span class=\"literal\">nil</span></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> _Data_serviceDesc = grpc.ServiceDesc&#123;</div><div class=\"line\">\tServiceName: <span class=\"string\">\"account.Data\"</span>,</div><div class=\"line\">\tHandlerType: (*DataServer)(<span class=\"literal\">nil</span>),</div><div class=\"line\">\tMethods: []grpc.MethodDesc&#123;</div><div class=\"line\">\t\t&#123;</div><div class=\"line\">\t\t\tMethodName: <span class=\"string\">\"GetUser\"</span>,</div><div class=\"line\">\t\t\tHandler:    _Data_GetUser_Handler,</div><div class=\"line\">\t\t&#125;,</div><div class=\"line\">\t&#125;,</div><div class=\"line\">\tStreams: []grpc.StreamDesc&#123;&#125;,</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> fileDescriptor0 = []<span class=\"keyword\">byte</span>&#123;</div><div class=\"line\">\t<span class=\"comment\">// 119 bytes of a gzipped FileDescriptorProto</span></div><div class=\"line\">\t<span class=\"number\">0x1f</span>, <span class=\"number\">0x8b</span>, <span class=\"number\">0x08</span>, <span class=\"number\">0x00</span>, <span class=\"number\">0x00</span>, <span class=\"number\">0x09</span>, <span class=\"number\">0x6e</span>, <span class=\"number\">0x88</span>, <span class=\"number\">0x02</span>, <span class=\"number\">0xff</span>, <span class=\"number\">0xe2</span>, <span class=\"number\">0xe2</span>, <span class=\"number\">0x4d</span>, <span class=\"number\">0x4c</span>, <span class=\"number\">0x4e</span>, <span class=\"number\">0xce</span>,</div><div class=\"line\">\t<span class=\"number\">0x2f</span>, <span class=\"number\">0xcd</span>, <span class=\"number\">0x2b</span>, <span class=\"number\">0xd1</span>, <span class=\"number\">0x2b</span>, <span class=\"number\">0x28</span>, <span class=\"number\">0xca</span>, <span class=\"number\">0x2f</span>, <span class=\"number\">0xc9</span>, <span class=\"number\">0x17</span>, <span class=\"number\">0x62</span>, <span class=\"number\">0x87</span>, <span class=\"number\">0x72</span>, <span class=\"number\">0x95</span>, <span class=\"number\">0x24</span>, <span class=\"number\">0xb8</span>,</div><div class=\"line\">\t<span class=\"number\">0xd8</span>, <span class=\"number\">0x42</span>, <span class=\"number\">0x8b</span>, <span class=\"number\">0x53</span>, <span class=\"number\">0x8b</span>, <span class=\"number\">0x82</span>, <span class=\"number\">0x0a</span>, <span class=\"number\">0x85</span>, <span class=\"number\">0xf8</span>, <span class=\"number\">0xb8</span>, <span class=\"number\">0x98</span>, <span class=\"number\">0x32</span>, <span class=\"number\">0x53</span>, <span class=\"number\">0x24</span>, <span class=\"number\">0x18</span>, <span class=\"number\">0x15</span>,</div><div class=\"line\">\t<span class=\"number\">0x18</span>, <span class=\"number\">0x35</span>, <span class=\"number\">0x58</span>, <span class=\"number\">0x83</span>, <span class=\"number\">0x80</span>, <span class=\"number\">0x2c</span>, <span class=\"number\">0x25</span>, <span class=\"number\">0x19</span>, <span class=\"number\">0xa8</span>, <span class=\"number\">0x4c</span>, <span class=\"number\">0x81</span>, <span class=\"number\">0x90</span>, <span class=\"number\">0x10</span>, <span class=\"number\">0x17</span>, <span class=\"number\">0x4b</span>, <span class=\"number\">0x5e</span>,</div><div class=\"line\">\t<span class=\"number\">0x62</span>, <span class=\"number\">0x6e</span>, <span class=\"number\">0x2a</span>, <span class=\"number\">0x58</span>, <span class=\"number\">0x8e</span>, <span class=\"number\">0x33</span>, <span class=\"number\">0x08</span>, <span class=\"number\">0xcc</span>, <span class=\"number\">0x36</span>, <span class=\"number\">0x32</span>, <span class=\"number\">0xe6</span>, <span class=\"number\">0x62</span>, <span class=\"number\">0x71</span>, <span class=\"number\">0x49</span>, <span class=\"number\">0x2c</span>, <span class=\"number\">0x49</span>,</div><div class=\"line\">\t<span class=\"number\">0x14</span>, <span class=\"number\">0xd2</span>, <span class=\"number\">0xe6</span>, <span class=\"number\">0x62</span>, <span class=\"number\">0x77</span>, <span class=\"number\">0x4f</span>, <span class=\"number\">0x2d</span>, <span class=\"number\">0x01</span>, <span class=\"number\">0x29</span>, <span class=\"number\">0x14</span>, <span class=\"number\">0xe2</span>, <span class=\"number\">0xd7</span>, <span class=\"number\">0x83</span>, <span class=\"number\">0xd9</span>, <span class=\"number\">0x01</span>, <span class=\"number\">0x31</span>,</div><div class=\"line\">\t<span class=\"number\">0x51</span>, <span class=\"number\">0x0a</span>, <span class=\"number\">0x4d</span>, <span class=\"number\">0xa0</span>, <span class=\"number\">0x20</span>, <span class=\"number\">0x89</span>, <span class=\"number\">0x0d</span>, <span class=\"number\">0x6c</span>, <span class=\"number\">0xb9</span>, <span class=\"number\">0x31</span>, <span class=\"number\">0x20</span>, <span class=\"number\">0x00</span>, <span class=\"number\">0x00</span>, <span class=\"number\">0xff</span>, <span class=\"number\">0xff</span>, <span class=\"number\">0xa6</span>,</div><div class=\"line\">\t<span class=\"number\">0x63</span>, <span class=\"number\">0xe9</span>, <span class=\"number\">0x2f</span>, <span class=\"number\">0x8d</span>, <span class=\"number\">0x00</span>, <span class=\"number\">0x00</span>, <span class=\"number\">0x00</span>,</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<h4 id=\"4-服务端svr-go\"><a href=\"#4-服务端svr-go\" class=\"headerlink\" title=\"4. 服务端svr.go\"></a>4. 服务端svr.go</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div></pre></td><td class=\"code\"><pre><div class=\"line\">package main</div><div class=\"line\"></div><div class=\"line\">// created by moguang(moxiaomomo@gmail.com)</div><div class=\"line\">// created at 2016-01-10</div><div class=\"line\"></div><div class=\"line\">import (</div><div class=\"line\">\t&quot;account&quot;</div><div class=\"line\">\t&quot;golang.org/x/net/context&quot;</div><div class=\"line\">\t&quot;google.golang.org/grpc&quot;</div><div class=\"line\">\t&quot;log&quot;</div><div class=\"line\">\t&quot;net&quot;</div><div class=\"line\">\t&quot;strconv&quot;</div><div class=\"line\">)</div><div class=\"line\"></div><div class=\"line\">type Data struct&#123;&#125;</div><div class=\"line\"></div><div class=\"line\">func main() &#123;</div><div class=\"line\">\thost := &quot;127.0.0.1:8080&quot;</div><div class=\"line\">\t//listen on port</div><div class=\"line\">\tlis, err := net.Listen(&quot;tcp&quot;, host)</div><div class=\"line\">\tif err != nil &#123;</div><div class=\"line\">\t\tlog.Fatalf(&quot;Failed to listen: %v&quot;, err)</div><div class=\"line\">\t&#125;</div><div class=\"line\">\ts := grpc.NewServer()</div><div class=\"line\">\taccount.RegisterDataServer(s, &amp;Data&#123;&#125;)</div><div class=\"line\">\t// accept message</div><div class=\"line\">\tlog.Printf(&quot;Begin to serve on %v&quot;, host)</div><div class=\"line\">\ts.Serve(lis)</div><div class=\"line\">\tlog.Println(&quot;Server is shutdown.&quot;)</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">// 给Data类型定义方法</div><div class=\"line\">func (t *Data) GetUser(ctx context.Context, request *account.UserRq) (response *account.UserRp, err error) &#123;</div><div class=\"line\">\tlog.Printf(&quot;To get user, request.Id: %v&quot;, request.Id)</div><div class=\"line\">\tresponse = &amp;account.UserRp&#123;</div><div class=\"line\">\t\tName: strconv.Itoa(int(request.Id)) + &quot;_test&quot;,</div><div class=\"line\">\t&#125;</div><div class=\"line\">\treturn response, err</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h4 id=\"5-客户端cli-go\"><a href=\"#5-客户端cli-go\" class=\"headerlink\" title=\"5. 客户端cli.go\"></a>5. 客户端cli.go</h4><figure class=\"highlight golang\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">package</span> main</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// created by moguang(moxiaomomo@gmail.com)</span></div><div class=\"line\"><span class=\"comment\">// created at 2016-01-10</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">import</span> (</div><div class=\"line\">\t<span class=\"string\">\"account\"</span></div><div class=\"line\">\t<span class=\"string\">\"golang.org/x/net/context\"</span></div><div class=\"line\">\t<span class=\"string\">\"google.golang.org/grpc\"</span></div><div class=\"line\">\t<span class=\"string\">\"log\"</span></div><div class=\"line\">\t<span class=\"string\">\"math/rand\"</span></div><div class=\"line\">\t<span class=\"string\">\"strconv\"</span></div><div class=\"line\">\t<span class=\"string\">\"strings\"</span></div><div class=\"line\">\t<span class=\"string\">\"sync\"</span></div><div class=\"line\">\t<span class=\"string\">\"time\"</span></div><div class=\"line\">)</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> (</div><div class=\"line\">\twg sync.WaitGroup</div><div class=\"line\">)</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">const</span> (</div><div class=\"line\">\tserver      = <span class=\"string\">\"127.0.0.1\"</span></div><div class=\"line\">\tport        = <span class=\"string\">\"8080\"</span></div><div class=\"line\">\tparallel    = <span class=\"number\">10</span> <span class=\"comment\">//连接并行数</span></div><div class=\"line\">\ttimes       = <span class=\"number\">10</span> <span class=\"comment\">//每连接请求次数</span></div><div class=\"line\">)</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</div><div class=\"line\">\tbeginTime := time.Now()</div><div class=\"line\">\t<span class=\"comment\">//结合WaitGroup, 实现并行请求</span></div><div class=\"line\">\t<span class=\"keyword\">for</span> i := <span class=\"number\">0</span>; i &lt; <span class=\"keyword\">int</span>(parallel); i++ &#123;</div><div class=\"line\">\t\twg.Add(<span class=\"number\">1</span>)</div><div class=\"line\">\t\t<span class=\"keyword\">go</span> execRPC(&amp;wg)</div><div class=\"line\">\t&#125;</div><div class=\"line\">\twg.Wait()</div><div class=\"line\"></div><div class=\"line\">\tendTime := time.Now()</div><div class=\"line\">\tlog.Printf(<span class=\"string\">\"Exec time secs: %.2f \"</span>, endTime.Sub(beginTime).Seconds())</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">execRPC</span><span class=\"params\">(wg *sync.WaitGroup)</span></span> &#123;</div><div class=\"line\">\t<span class=\"keyword\">defer</span> wg.Done()</div><div class=\"line\">\t<span class=\"comment\">// 建立连接</span></div><div class=\"line\">\thost := server + <span class=\"string\">\":\"</span> + port</div><div class=\"line\">\tconn, err := grpc.Dial(host, grpc.WithInsecure())</div><div class=\"line\">\t<span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</div><div class=\"line\">\t\tlog.Printf(<span class=\"string\">\"Dial Err: %v\"</span>, err)</div><div class=\"line\">\t\t<span class=\"keyword\">return</span></div><div class=\"line\">\t&#125;</div><div class=\"line\">\t<span class=\"keyword\">defer</span> conn.Close()</div><div class=\"line\"></div><div class=\"line\">\tclient := account.NewDataClient(conn)</div><div class=\"line\">\t<span class=\"comment\">// 连续发起多次请求</span></div><div class=\"line\">\t<span class=\"keyword\">for</span> i := <span class=\"number\">0</span>; i &lt; <span class=\"keyword\">int</span>(times); i++ &#123;</div><div class=\"line\">\t\tgetUser(client)</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">getUser</span><span class=\"params\">(client account.DataClient)</span></span> &#123;</div><div class=\"line\">\t<span class=\"keyword\">var</span> request account.UserRq</div><div class=\"line\">\tr := rand.Intn(parallel)</div><div class=\"line\">\trequest.Id = <span class=\"keyword\">int32</span>(r)</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"comment\">// 调用远程方法</span></div><div class=\"line\">\tresponse, _ := client.GetUser(context.Background(), &amp;request)</div><div class=\"line\">\t<span class=\"comment\">// 判断返回结果</span></div><div class=\"line\">\t<span class=\"keyword\">if</span> id, _ := strconv.Atoi(strings.Split(response.Name, <span class=\"string\">\":\"</span>)[<span class=\"number\">0</span>]); id != r &#123;</div><div class=\"line\">\t\tlog.Printf(<span class=\"string\">\"Response error %#v\"</span>, response)</div><div class=\"line\">\t&#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">\t\tlog.Printf(<span class=\"string\">\"Response ok %#v\"</span>, response)</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"<h4 id=\"关于gRPC\"><a href=\"#关于gRPC\" class=\"headerlink\" title=\"关于gRPC\"></a>关于gRPC</h4><p>gRPC是google公司面向移动应用, 基于http2.0协议标准而设计, 基于Protocol Buffers而开发的一种开源RPC框架。<br><br>ProtoBuf可以用于通讯协议、数据存储等一些语言/平台无关的数据序列化, 号称高性能, 通用性强, 具体可以看下这里的分析：<br><a href=\"https://www.ibm.com/developerworks/cn/linux/l-cn-gpb/\" target=\"_blank\" rel=\"external\">Google Protocol Buffer 的使用和原理</a><br><br>gRPC提供了一种相对简单的方法来精确地定义服务, 和为ios/andoird/后台服务自动生成可靠的数据结构功能库; 通过它可以节省带宽和CPU资源, 降低TCP连接次数, 和延长电池寿命。<br>","more":"</p>\n<h4 id=\"1-安装protobuf与gRPC-of-go\"><a href=\"#1-安装protobuf与gRPC-of-go\" class=\"headerlink\" title=\"1.安装protobuf与gRPC of go\"></a>1.安装protobuf与gRPC of go</h4><p>去到<a href=\"https://github.com/google/protobuf/releases\" target=\"_blank\" rel=\"external\">Protocol Buffers</a>下载器最新版。 笔者当前获取的版本为3.0.0, 安装过程如下：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">tar -zxf protobuf-cpp-3.0.0-beta-2.tar.gz</div><div class=\"line\">cd protobuf-3.0.0-beta-2/</div><div class=\"line\">./configure</div><div class=\"line\">make &amp;&amp; sudo make install</div><div class=\"line\">go get -u github.com/golang/protobuf/protoc-gen-go   # proto for golang</div><div class=\"line\">go get -u google.golang.org/grpc                     # grpc for golang</div></pre></td></tr></table></figure></p>\n<h4 id=\"2-定义proto文件\"><a href=\"#2-定义proto文件\" class=\"headerlink\" title=\"2.定义proto文件\"></a>2.定义proto文件</h4><figure class=\"highlight protobuf\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\">//protobuf3 protocol</div><div class=\"line\">syntax = &quot;proto3&quot;;</div><div class=\"line\">package account;</div><div class=\"line\"></div><div class=\"line\">// request struct</div><div class=\"line\">message UserRq &#123;</div><div class=\"line\">    int32 id = 1;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">// response struct</div><div class=\"line\">message UserRp &#123;</div><div class=\"line\">    string name = 1;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">// service</div><div class=\"line\">service Data &#123;</div><div class=\"line\">    rpc GetUser(UserRq) returns (UserRp);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>上面定义了一个服务Data，有一个API叫GetUser，接收参数类型UserRq, 返回参数类型UserRp。</p>\n<p><br>在proto中, service可以定义server， 有四种实现方式:(参考<a href=\"http://www.jianshu.com/p/774b38306c30\" target=\"_blank\" rel=\"external\">http://www.jianshu.com/p/774b38306c30</a>)</p>\n<ul>\n<li><p>rpc GetFeature(Point) returns (Feature) {}<br><br>类似普通的函数调用，客户端发送请求Point到服务器，服务器返回相应Feature.</p>\n</li>\n<li><p>rpc ListFeatures(Rectangle) returns (stream Feature) {}<br><br>客户端发起一次请求，服务器端返回一个流式数据，比如一个数组中的逐个元素</p>\n</li>\n<li><p>rpc RecordRoute(stream Point) returns (RouteSummary) {}<br><br>客户端发起的请求是一个流式的数据，比如数组中的逐个元素，服务器返回一个相应</p>\n</li>\n<li><p>rpc RouteChat(stream RouteNote) returns (stream RouteNote) {}<br><br>客户端发起的请求是一个流式数据，比如数组中的逐个元素，二服务器返回的也是一个类似的数据结构</p>\n</li>\n</ul>\n<p>上面的proto定义实现的是第一种方式。</p>\n<h4 id=\"3-使用protoc-command生成go源文件\"><a href=\"#3-使用protoc-command生成go源文件\" class=\"headerlink\" title=\"3.使用protoc command生成go源文件\"></a>3.使用protoc command生成go源文件</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">protoc --go_out=plugins=grpc:. account.proto</div><div class=\"line\">ls</div><div class=\"line\">account.pb.go  account.proto</div></pre></td></tr></table></figure>\n<p>通过protoc生成了account.pb.go，其源码看起来是这样子的:<br><figure class=\"highlight golang\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div><div class=\"line\">94</div><div class=\"line\">95</div><div class=\"line\">96</div><div class=\"line\">97</div><div class=\"line\">98</div><div class=\"line\">99</div><div class=\"line\">100</div><div class=\"line\">101</div><div class=\"line\">102</div><div class=\"line\">103</div><div class=\"line\">104</div><div class=\"line\">105</div><div class=\"line\">106</div><div class=\"line\">107</div><div class=\"line\">108</div><div class=\"line\">109</div><div class=\"line\">110</div><div class=\"line\">111</div><div class=\"line\">112</div><div class=\"line\">113</div><div class=\"line\">114</div><div class=\"line\">115</div><div class=\"line\">116</div><div class=\"line\">117</div><div class=\"line\">118</div><div class=\"line\">119</div><div class=\"line\">120</div><div class=\"line\">121</div><div class=\"line\">122</div><div class=\"line\">123</div><div class=\"line\">124</div><div class=\"line\">125</div><div class=\"line\">126</div><div class=\"line\">127</div><div class=\"line\">128</div><div class=\"line\">129</div><div class=\"line\">130</div><div class=\"line\">131</div><div class=\"line\">132</div><div class=\"line\">133</div><div class=\"line\">134</div><div class=\"line\">135</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// Code generated by protoc-gen-go.</span></div><div class=\"line\"><span class=\"comment\">// source: account.proto</span></div><div class=\"line\"><span class=\"comment\">// DO NOT EDIT!</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/*</span></div><div class=\"line\">Package account is a generated protocol buffer package.</div><div class=\"line\"></div><div class=\"line\">It is generated from these files:</div><div class=\"line\">\taccount.proto</div><div class=\"line\"></div><div class=\"line\">It has these top-level messages:</div><div class=\"line\">\tUserRq</div><div class=\"line\">\tUserRp</div><div class=\"line\">*/</div><div class=\"line\"><span class=\"keyword\">package</span> account</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">import</span> proto <span class=\"string\">\"github.com/golang/protobuf/proto\"</span></div><div class=\"line\"><span class=\"keyword\">import</span> fmt <span class=\"string\">\"fmt\"</span></div><div class=\"line\"><span class=\"keyword\">import</span> math <span class=\"string\">\"math\"</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">import</span> (</div><div class=\"line\">\tcontext <span class=\"string\">\"golang.org/x/net/context\"</span></div><div class=\"line\">\tgrpc <span class=\"string\">\"google.golang.org/grpc\"</span></div><div class=\"line\">)</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// Reference imports to suppress errors if they are not otherwise used.</span></div><div class=\"line\"><span class=\"keyword\">var</span> _ = proto.Marshal</div><div class=\"line\"><span class=\"keyword\">var</span> _ = fmt.Errorf</div><div class=\"line\"><span class=\"keyword\">var</span> _ = math.Inf</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// This is a compile-time assertion to ensure that this generated file</span></div><div class=\"line\"><span class=\"comment\">// is compatible with the proto package it is being compiled against.</span></div><div class=\"line\"><span class=\"keyword\">const</span> _ = proto.ProtoPackageIsVersion1</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// request struct</span></div><div class=\"line\"><span class=\"keyword\">type</span> UserRq <span class=\"keyword\">struct</span> &#123;</div><div class=\"line\">\tId <span class=\"keyword\">int32</span> <span class=\"string\">`protobuf:\"varint,1,opt,name=id\" json:\"id,omitempty\"`</span></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(m *UserRq)</span> <span class=\"title\">Reset</span><span class=\"params\">()</span></span>                    &#123; *m = UserRq&#123;&#125; &#125;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(m *UserRq)</span> <span class=\"title\">String</span><span class=\"params\">()</span> <span class=\"title\">string</span></span>            &#123; <span class=\"keyword\">return</span> proto.CompactTextString(m) &#125;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(*UserRq)</span> <span class=\"title\">ProtoMessage</span><span class=\"params\">()</span></span>               &#123;&#125;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(*UserRq)</span> <span class=\"title\">Descriptor</span><span class=\"params\">()</span> <span class=\"params\">([]<span class=\"keyword\">byte</span>, []<span class=\"keyword\">int</span>)</span></span> &#123; <span class=\"keyword\">return</span> fileDescriptor0, []<span class=\"keyword\">int</span>&#123;<span class=\"number\">0</span>&#125; &#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// response struct</span></div><div class=\"line\"><span class=\"keyword\">type</span> UserRp <span class=\"keyword\">struct</span> &#123;</div><div class=\"line\">\tName <span class=\"keyword\">string</span> <span class=\"string\">`protobuf:\"bytes,1,opt,name=name\" json:\"name,omitempty\"`</span></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(m *UserRp)</span> <span class=\"title\">Reset</span><span class=\"params\">()</span></span>                    &#123; *m = UserRp&#123;&#125; &#125;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(m *UserRp)</span> <span class=\"title\">String</span><span class=\"params\">()</span> <span class=\"title\">string</span></span>            &#123; <span class=\"keyword\">return</span> proto.CompactTextString(m) &#125;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(*UserRp)</span> <span class=\"title\">ProtoMessage</span><span class=\"params\">()</span></span>               &#123;&#125;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(*UserRp)</span> <span class=\"title\">Descriptor</span><span class=\"params\">()</span> <span class=\"params\">([]<span class=\"keyword\">byte</span>, []<span class=\"keyword\">int</span>)</span></span> &#123; <span class=\"keyword\">return</span> fileDescriptor0, []<span class=\"keyword\">int</span>&#123;<span class=\"number\">1</span>&#125; &#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">init</span><span class=\"params\">()</span></span> &#123;</div><div class=\"line\">\tproto.RegisterType((*UserRq)(<span class=\"literal\">nil</span>), <span class=\"string\">\"account.UserRq\"</span>)</div><div class=\"line\">\tproto.RegisterType((*UserRp)(<span class=\"literal\">nil</span>), <span class=\"string\">\"account.UserRp\"</span>)</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// Reference imports to suppress errors if they are not otherwise used.</span></div><div class=\"line\"><span class=\"keyword\">var</span> _ context.Context</div><div class=\"line\"><span class=\"keyword\">var</span> _ grpc.ClientConn</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// This is a compile-time assertion to ensure that this generated file</span></div><div class=\"line\"><span class=\"comment\">// is compatible with the grpc package it is being compiled against.</span></div><div class=\"line\"><span class=\"keyword\">const</span> _ = grpc.SupportPackageIsVersion1</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// Client API for Data service</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">type</span> DataClient <span class=\"keyword\">interface</span> &#123;</div><div class=\"line\">\tGetUser(ctx context.Context, in *UserRq, opts ...grpc.CallOption) (*UserRp, error)</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">type</span> dataClient <span class=\"keyword\">struct</span> &#123;</div><div class=\"line\">\tcc *grpc.ClientConn</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">NewDataClient</span><span class=\"params\">(cc *grpc.ClientConn)</span> <span class=\"title\">DataClient</span></span> &#123;</div><div class=\"line\">\t<span class=\"keyword\">return</span> &amp;dataClient&#123;cc&#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(c *dataClient)</span> <span class=\"title\">GetUser</span><span class=\"params\">(ctx context.Context, in *UserRq, opts ...grpc.CallOption)</span> <span class=\"params\">(*UserRp, error)</span></span> &#123;</div><div class=\"line\">\tout := <span class=\"built_in\">new</span>(UserRp)</div><div class=\"line\">\terr := grpc.Invoke(ctx, <span class=\"string\">\"/account.Data/GetUser\"</span>, in, out, c.cc, opts...)</div><div class=\"line\">\t<span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"literal\">nil</span>, err</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t<span class=\"keyword\">return</span> out, <span class=\"literal\">nil</span></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// Server API for Data service</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">type</span> DataServer <span class=\"keyword\">interface</span> &#123;</div><div class=\"line\">\tGetUser(context.Context, *UserRq) (*UserRp, error)</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">RegisterDataServer</span><span class=\"params\">(s *grpc.Server, srv DataServer)</span></span> &#123;</div><div class=\"line\">\ts.RegisterService(&amp;_Data_serviceDesc, srv)</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> _<span class=\"title\">Data_GetUser_Handler</span><span class=\"params\">(srv <span class=\"keyword\">interface</span>&#123;&#125;, ctx context.Context, dec <span class=\"keyword\">func</span>(<span class=\"keyword\">interface</span>&#123;&#125;)</span> <span class=\"title\">error</span>) <span class=\"params\">(<span class=\"keyword\">interface</span>&#123;&#125;, error)</span></span> &#123;</div><div class=\"line\">\tin := <span class=\"built_in\">new</span>(UserRq)</div><div class=\"line\">\t<span class=\"keyword\">if</span> err := dec(in); err != <span class=\"literal\">nil</span> &#123;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"literal\">nil</span>, err</div><div class=\"line\">\t&#125;</div><div class=\"line\">\tout, err := srv.(DataServer).GetUser(ctx, in)</div><div class=\"line\">\t<span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"literal\">nil</span>, err</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t<span class=\"keyword\">return</span> out, <span class=\"literal\">nil</span></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> _Data_serviceDesc = grpc.ServiceDesc&#123;</div><div class=\"line\">\tServiceName: <span class=\"string\">\"account.Data\"</span>,</div><div class=\"line\">\tHandlerType: (*DataServer)(<span class=\"literal\">nil</span>),</div><div class=\"line\">\tMethods: []grpc.MethodDesc&#123;</div><div class=\"line\">\t\t&#123;</div><div class=\"line\">\t\t\tMethodName: <span class=\"string\">\"GetUser\"</span>,</div><div class=\"line\">\t\t\tHandler:    _Data_GetUser_Handler,</div><div class=\"line\">\t\t&#125;,</div><div class=\"line\">\t&#125;,</div><div class=\"line\">\tStreams: []grpc.StreamDesc&#123;&#125;,</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> fileDescriptor0 = []<span class=\"keyword\">byte</span>&#123;</div><div class=\"line\">\t<span class=\"comment\">// 119 bytes of a gzipped FileDescriptorProto</span></div><div class=\"line\">\t<span class=\"number\">0x1f</span>, <span class=\"number\">0x8b</span>, <span class=\"number\">0x08</span>, <span class=\"number\">0x00</span>, <span class=\"number\">0x00</span>, <span class=\"number\">0x09</span>, <span class=\"number\">0x6e</span>, <span class=\"number\">0x88</span>, <span class=\"number\">0x02</span>, <span class=\"number\">0xff</span>, <span class=\"number\">0xe2</span>, <span class=\"number\">0xe2</span>, <span class=\"number\">0x4d</span>, <span class=\"number\">0x4c</span>, <span class=\"number\">0x4e</span>, <span class=\"number\">0xce</span>,</div><div class=\"line\">\t<span class=\"number\">0x2f</span>, <span class=\"number\">0xcd</span>, <span class=\"number\">0x2b</span>, <span class=\"number\">0xd1</span>, <span class=\"number\">0x2b</span>, <span class=\"number\">0x28</span>, <span class=\"number\">0xca</span>, <span class=\"number\">0x2f</span>, <span class=\"number\">0xc9</span>, <span class=\"number\">0x17</span>, <span class=\"number\">0x62</span>, <span class=\"number\">0x87</span>, <span class=\"number\">0x72</span>, <span class=\"number\">0x95</span>, <span class=\"number\">0x24</span>, <span class=\"number\">0xb8</span>,</div><div class=\"line\">\t<span class=\"number\">0xd8</span>, <span class=\"number\">0x42</span>, <span class=\"number\">0x8b</span>, <span class=\"number\">0x53</span>, <span class=\"number\">0x8b</span>, <span class=\"number\">0x82</span>, <span class=\"number\">0x0a</span>, <span class=\"number\">0x85</span>, <span class=\"number\">0xf8</span>, <span class=\"number\">0xb8</span>, <span class=\"number\">0x98</span>, <span class=\"number\">0x32</span>, <span class=\"number\">0x53</span>, <span class=\"number\">0x24</span>, <span class=\"number\">0x18</span>, <span class=\"number\">0x15</span>,</div><div class=\"line\">\t<span class=\"number\">0x18</span>, <span class=\"number\">0x35</span>, <span class=\"number\">0x58</span>, <span class=\"number\">0x83</span>, <span class=\"number\">0x80</span>, <span class=\"number\">0x2c</span>, <span class=\"number\">0x25</span>, <span class=\"number\">0x19</span>, <span class=\"number\">0xa8</span>, <span class=\"number\">0x4c</span>, <span class=\"number\">0x81</span>, <span class=\"number\">0x90</span>, <span class=\"number\">0x10</span>, <span class=\"number\">0x17</span>, <span class=\"number\">0x4b</span>, <span class=\"number\">0x5e</span>,</div><div class=\"line\">\t<span class=\"number\">0x62</span>, <span class=\"number\">0x6e</span>, <span class=\"number\">0x2a</span>, <span class=\"number\">0x58</span>, <span class=\"number\">0x8e</span>, <span class=\"number\">0x33</span>, <span class=\"number\">0x08</span>, <span class=\"number\">0xcc</span>, <span class=\"number\">0x36</span>, <span class=\"number\">0x32</span>, <span class=\"number\">0xe6</span>, <span class=\"number\">0x62</span>, <span class=\"number\">0x71</span>, <span class=\"number\">0x49</span>, <span class=\"number\">0x2c</span>, <span class=\"number\">0x49</span>,</div><div class=\"line\">\t<span class=\"number\">0x14</span>, <span class=\"number\">0xd2</span>, <span class=\"number\">0xe6</span>, <span class=\"number\">0x62</span>, <span class=\"number\">0x77</span>, <span class=\"number\">0x4f</span>, <span class=\"number\">0x2d</span>, <span class=\"number\">0x01</span>, <span class=\"number\">0x29</span>, <span class=\"number\">0x14</span>, <span class=\"number\">0xe2</span>, <span class=\"number\">0xd7</span>, <span class=\"number\">0x83</span>, <span class=\"number\">0xd9</span>, <span class=\"number\">0x01</span>, <span class=\"number\">0x31</span>,</div><div class=\"line\">\t<span class=\"number\">0x51</span>, <span class=\"number\">0x0a</span>, <span class=\"number\">0x4d</span>, <span class=\"number\">0xa0</span>, <span class=\"number\">0x20</span>, <span class=\"number\">0x89</span>, <span class=\"number\">0x0d</span>, <span class=\"number\">0x6c</span>, <span class=\"number\">0xb9</span>, <span class=\"number\">0x31</span>, <span class=\"number\">0x20</span>, <span class=\"number\">0x00</span>, <span class=\"number\">0x00</span>, <span class=\"number\">0xff</span>, <span class=\"number\">0xff</span>, <span class=\"number\">0xa6</span>,</div><div class=\"line\">\t<span class=\"number\">0x63</span>, <span class=\"number\">0xe9</span>, <span class=\"number\">0x2f</span>, <span class=\"number\">0x8d</span>, <span class=\"number\">0x00</span>, <span class=\"number\">0x00</span>, <span class=\"number\">0x00</span>,</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<h4 id=\"4-服务端svr-go\"><a href=\"#4-服务端svr-go\" class=\"headerlink\" title=\"4. 服务端svr.go\"></a>4. 服务端svr.go</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div></pre></td><td class=\"code\"><pre><div class=\"line\">package main</div><div class=\"line\"></div><div class=\"line\">// created by moguang(moxiaomomo@gmail.com)</div><div class=\"line\">// created at 2016-01-10</div><div class=\"line\"></div><div class=\"line\">import (</div><div class=\"line\">\t&quot;account&quot;</div><div class=\"line\">\t&quot;golang.org/x/net/context&quot;</div><div class=\"line\">\t&quot;google.golang.org/grpc&quot;</div><div class=\"line\">\t&quot;log&quot;</div><div class=\"line\">\t&quot;net&quot;</div><div class=\"line\">\t&quot;strconv&quot;</div><div class=\"line\">)</div><div class=\"line\"></div><div class=\"line\">type Data struct&#123;&#125;</div><div class=\"line\"></div><div class=\"line\">func main() &#123;</div><div class=\"line\">\thost := &quot;127.0.0.1:8080&quot;</div><div class=\"line\">\t//listen on port</div><div class=\"line\">\tlis, err := net.Listen(&quot;tcp&quot;, host)</div><div class=\"line\">\tif err != nil &#123;</div><div class=\"line\">\t\tlog.Fatalf(&quot;Failed to listen: %v&quot;, err)</div><div class=\"line\">\t&#125;</div><div class=\"line\">\ts := grpc.NewServer()</div><div class=\"line\">\taccount.RegisterDataServer(s, &amp;Data&#123;&#125;)</div><div class=\"line\">\t// accept message</div><div class=\"line\">\tlog.Printf(&quot;Begin to serve on %v&quot;, host)</div><div class=\"line\">\ts.Serve(lis)</div><div class=\"line\">\tlog.Println(&quot;Server is shutdown.&quot;)</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">// 给Data类型定义方法</div><div class=\"line\">func (t *Data) GetUser(ctx context.Context, request *account.UserRq) (response *account.UserRp, err error) &#123;</div><div class=\"line\">\tlog.Printf(&quot;To get user, request.Id: %v&quot;, request.Id)</div><div class=\"line\">\tresponse = &amp;account.UserRp&#123;</div><div class=\"line\">\t\tName: strconv.Itoa(int(request.Id)) + &quot;_test&quot;,</div><div class=\"line\">\t&#125;</div><div class=\"line\">\treturn response, err</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h4 id=\"5-客户端cli-go\"><a href=\"#5-客户端cli-go\" class=\"headerlink\" title=\"5. 客户端cli.go\"></a>5. 客户端cli.go</h4><figure class=\"highlight golang\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">package</span> main</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// created by moguang(moxiaomomo@gmail.com)</span></div><div class=\"line\"><span class=\"comment\">// created at 2016-01-10</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">import</span> (</div><div class=\"line\">\t<span class=\"string\">\"account\"</span></div><div class=\"line\">\t<span class=\"string\">\"golang.org/x/net/context\"</span></div><div class=\"line\">\t<span class=\"string\">\"google.golang.org/grpc\"</span></div><div class=\"line\">\t<span class=\"string\">\"log\"</span></div><div class=\"line\">\t<span class=\"string\">\"math/rand\"</span></div><div class=\"line\">\t<span class=\"string\">\"strconv\"</span></div><div class=\"line\">\t<span class=\"string\">\"strings\"</span></div><div class=\"line\">\t<span class=\"string\">\"sync\"</span></div><div class=\"line\">\t<span class=\"string\">\"time\"</span></div><div class=\"line\">)</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> (</div><div class=\"line\">\twg sync.WaitGroup</div><div class=\"line\">)</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">const</span> (</div><div class=\"line\">\tserver      = <span class=\"string\">\"127.0.0.1\"</span></div><div class=\"line\">\tport        = <span class=\"string\">\"8080\"</span></div><div class=\"line\">\tparallel    = <span class=\"number\">10</span> <span class=\"comment\">//连接并行数</span></div><div class=\"line\">\ttimes       = <span class=\"number\">10</span> <span class=\"comment\">//每连接请求次数</span></div><div class=\"line\">)</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</div><div class=\"line\">\tbeginTime := time.Now()</div><div class=\"line\">\t<span class=\"comment\">//结合WaitGroup, 实现并行请求</span></div><div class=\"line\">\t<span class=\"keyword\">for</span> i := <span class=\"number\">0</span>; i &lt; <span class=\"keyword\">int</span>(parallel); i++ &#123;</div><div class=\"line\">\t\twg.Add(<span class=\"number\">1</span>)</div><div class=\"line\">\t\t<span class=\"keyword\">go</span> execRPC(&amp;wg)</div><div class=\"line\">\t&#125;</div><div class=\"line\">\twg.Wait()</div><div class=\"line\"></div><div class=\"line\">\tendTime := time.Now()</div><div class=\"line\">\tlog.Printf(<span class=\"string\">\"Exec time secs: %.2f \"</span>, endTime.Sub(beginTime).Seconds())</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">execRPC</span><span class=\"params\">(wg *sync.WaitGroup)</span></span> &#123;</div><div class=\"line\">\t<span class=\"keyword\">defer</span> wg.Done()</div><div class=\"line\">\t<span class=\"comment\">// 建立连接</span></div><div class=\"line\">\thost := server + <span class=\"string\">\":\"</span> + port</div><div class=\"line\">\tconn, err := grpc.Dial(host, grpc.WithInsecure())</div><div class=\"line\">\t<span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</div><div class=\"line\">\t\tlog.Printf(<span class=\"string\">\"Dial Err: %v\"</span>, err)</div><div class=\"line\">\t\t<span class=\"keyword\">return</span></div><div class=\"line\">\t&#125;</div><div class=\"line\">\t<span class=\"keyword\">defer</span> conn.Close()</div><div class=\"line\"></div><div class=\"line\">\tclient := account.NewDataClient(conn)</div><div class=\"line\">\t<span class=\"comment\">// 连续发起多次请求</span></div><div class=\"line\">\t<span class=\"keyword\">for</span> i := <span class=\"number\">0</span>; i &lt; <span class=\"keyword\">int</span>(times); i++ &#123;</div><div class=\"line\">\t\tgetUser(client)</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">getUser</span><span class=\"params\">(client account.DataClient)</span></span> &#123;</div><div class=\"line\">\t<span class=\"keyword\">var</span> request account.UserRq</div><div class=\"line\">\tr := rand.Intn(parallel)</div><div class=\"line\">\trequest.Id = <span class=\"keyword\">int32</span>(r)</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"comment\">// 调用远程方法</span></div><div class=\"line\">\tresponse, _ := client.GetUser(context.Background(), &amp;request)</div><div class=\"line\">\t<span class=\"comment\">// 判断返回结果</span></div><div class=\"line\">\t<span class=\"keyword\">if</span> id, _ := strconv.Atoi(strings.Split(response.Name, <span class=\"string\">\":\"</span>)[<span class=\"number\">0</span>]); id != r &#123;</div><div class=\"line\">\t\tlog.Printf(<span class=\"string\">\"Response error %#v\"</span>, response)</div><div class=\"line\">\t&#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">\t\tlog.Printf(<span class=\"string\">\"Response ok %#v\"</span>, response)</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>"},{"title":"[golang]goroutine学习小结","date":"2016-03-03T01:34:55.000Z","_content":"\n关于gorountine的特性, 我还是借鉴以下这篇文章来学习和总结一下, 至于一些用法在下一节channel再进行小结。\n\n源地址:\n[goroutine背后的系统知识](http://www.infoq.com/cn/articles/knowledge-behind-goroutine \"goroutine\")\n\n节选(goroutine的特性):\n\n>1.Go语言通过goroutine提供了目前为止所有(我所了解的)语言里对于并发编程的最清晰最直接的支持，Go语言的文档里对其特性也描述的非常全面甚至超过了，在这里，基于我们上面的系统知识介绍，列举一下goroutine的特性，算是小结：\n<!--more-->\n\n>2.goroutine是Go语言运行库的功能，不是操作系统提供的功能，goroutine不是用线程实现的。具体可参见Go语言源码里的pkg/runtime/proc.c\n\n>3.goroutine就是一段代码，一个函数入口，以及在堆上为其分配的一个堆栈。所以它非常廉价，我们可以很轻松的创建上万个goroutine，但它们并不是被操作系统所调度执行\n\n>4.除了被系统调用阻塞的线程外，Go运行库最多会启动$GOMAXPROCS个线程来运行goroutine\n\n>5.goroutine是协作式调度的，如果goroutine会执行很长时间，而且不是通过等待读取或写入channel的数据来同步的话，就需要主动调用Gosched()来让出CPU\n\n>6.和所有其他并发框架里的协程一样，goroutine里所谓“无锁”的优点只在单线程下有效，如果$GOMAXPROCS > 1并且协程间需要通信，Go运行库会负责加锁保护数据，这也是为什么sieve.go这样的例子在多CPU多线程时反而更慢的原因\n\n>7.Web等服务端程序要处理的请求从本质上来讲是并行处理的问题，每个请求基本独立，互不依赖，几乎没有数据交互，这不是一个并发编程的模型，而并发编程框架只是解决了其语义表述的复杂性，并不是从根本上提高处理的效率，也许是并发连接和并发编程的英文都是concurrent吧，很容易产生“并发编程框架和coroutine可以高效处理大量并发连接”的误解。\n\n>8.Go语言运行库封装了异步IO，所以可以写出貌似并发数很多的服务端，可即使我们通过调整$GOMAXPROCS来充分利用多核CPU并行处理，其效率也不如我们利用IO事件驱动设计的、按照事务类型划分好合适比例的线程池。在响应时间上，协作式调度是硬伤。\n\n>9.goroutine最大的价值是其实现了并发协程和实际并行执行的线程的映射以及动态扩展，随着其运行库的不断发展和完善，其性能一定会越来越好，尤其是在CPU核数越来越多的未来，终有一天我们会为了代码的简洁和可维护性而放弃那一点点性能的差别。\n","source":"_posts/golang/golang_goroutine.md","raw":"---\ntitle: '[golang]goroutine学习小结'\ndate: 2016-03-03 09:34:55\ntags: golang\n---\n\n关于gorountine的特性, 我还是借鉴以下这篇文章来学习和总结一下, 至于一些用法在下一节channel再进行小结。\n\n源地址:\n[goroutine背后的系统知识](http://www.infoq.com/cn/articles/knowledge-behind-goroutine \"goroutine\")\n\n节选(goroutine的特性):\n\n>1.Go语言通过goroutine提供了目前为止所有(我所了解的)语言里对于并发编程的最清晰最直接的支持，Go语言的文档里对其特性也描述的非常全面甚至超过了，在这里，基于我们上面的系统知识介绍，列举一下goroutine的特性，算是小结：\n<!--more-->\n\n>2.goroutine是Go语言运行库的功能，不是操作系统提供的功能，goroutine不是用线程实现的。具体可参见Go语言源码里的pkg/runtime/proc.c\n\n>3.goroutine就是一段代码，一个函数入口，以及在堆上为其分配的一个堆栈。所以它非常廉价，我们可以很轻松的创建上万个goroutine，但它们并不是被操作系统所调度执行\n\n>4.除了被系统调用阻塞的线程外，Go运行库最多会启动$GOMAXPROCS个线程来运行goroutine\n\n>5.goroutine是协作式调度的，如果goroutine会执行很长时间，而且不是通过等待读取或写入channel的数据来同步的话，就需要主动调用Gosched()来让出CPU\n\n>6.和所有其他并发框架里的协程一样，goroutine里所谓“无锁”的优点只在单线程下有效，如果$GOMAXPROCS > 1并且协程间需要通信，Go运行库会负责加锁保护数据，这也是为什么sieve.go这样的例子在多CPU多线程时反而更慢的原因\n\n>7.Web等服务端程序要处理的请求从本质上来讲是并行处理的问题，每个请求基本独立，互不依赖，几乎没有数据交互，这不是一个并发编程的模型，而并发编程框架只是解决了其语义表述的复杂性，并不是从根本上提高处理的效率，也许是并发连接和并发编程的英文都是concurrent吧，很容易产生“并发编程框架和coroutine可以高效处理大量并发连接”的误解。\n\n>8.Go语言运行库封装了异步IO，所以可以写出貌似并发数很多的服务端，可即使我们通过调整$GOMAXPROCS来充分利用多核CPU并行处理，其效率也不如我们利用IO事件驱动设计的、按照事务类型划分好合适比例的线程池。在响应时间上，协作式调度是硬伤。\n\n>9.goroutine最大的价值是其实现了并发协程和实际并行执行的线程的映射以及动态扩展，随着其运行库的不断发展和完善，其性能一定会越来越好，尤其是在CPU核数越来越多的未来，终有一天我们会为了代码的简洁和可维护性而放弃那一点点性能的差别。\n","slug":"golang/golang_goroutine","published":1,"updated":"2017-08-07T05:47:10.146Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj84nao3m000u7v4d93fgldyn","content":"<p>关于gorountine的特性, 我还是借鉴以下这篇文章来学习和总结一下, 至于一些用法在下一节channel再进行小结。</p>\n<p>源地址:<br><a href=\"http://www.infoq.com/cn/articles/knowledge-behind-goroutine\" title=\"goroutine\" target=\"_blank\" rel=\"external\">goroutine背后的系统知识</a></p>\n<p>节选(goroutine的特性):</p>\n<blockquote>\n<p>1.Go语言通过goroutine提供了目前为止所有(我所了解的)语言里对于并发编程的最清晰最直接的支持，Go语言的文档里对其特性也描述的非常全面甚至超过了，在这里，基于我们上面的系统知识介绍，列举一下goroutine的特性，算是小结：<br><a id=\"more\"></a></p>\n<p>2.goroutine是Go语言运行库的功能，不是操作系统提供的功能，goroutine不是用线程实现的。具体可参见Go语言源码里的pkg/runtime/proc.c</p>\n<p>3.goroutine就是一段代码，一个函数入口，以及在堆上为其分配的一个堆栈。所以它非常廉价，我们可以很轻松的创建上万个goroutine，但它们并不是被操作系统所调度执行</p>\n<p>4.除了被系统调用阻塞的线程外，Go运行库最多会启动$GOMAXPROCS个线程来运行goroutine</p>\n<p>5.goroutine是协作式调度的，如果goroutine会执行很长时间，而且不是通过等待读取或写入channel的数据来同步的话，就需要主动调用Gosched()来让出CPU</p>\n<p>6.和所有其他并发框架里的协程一样，goroutine里所谓“无锁”的优点只在单线程下有效，如果$GOMAXPROCS &gt; 1并且协程间需要通信，Go运行库会负责加锁保护数据，这也是为什么sieve.go这样的例子在多CPU多线程时反而更慢的原因</p>\n<p>7.Web等服务端程序要处理的请求从本质上来讲是并行处理的问题，每个请求基本独立，互不依赖，几乎没有数据交互，这不是一个并发编程的模型，而并发编程框架只是解决了其语义表述的复杂性，并不是从根本上提高处理的效率，也许是并发连接和并发编程的英文都是concurrent吧，很容易产生“并发编程框架和coroutine可以高效处理大量并发连接”的误解。</p>\n<p>8.Go语言运行库封装了异步IO，所以可以写出貌似并发数很多的服务端，可即使我们通过调整$GOMAXPROCS来充分利用多核CPU并行处理，其效率也不如我们利用IO事件驱动设计的、按照事务类型划分好合适比例的线程池。在响应时间上，协作式调度是硬伤。</p>\n<p>9.goroutine最大的价值是其实现了并发协程和实际并行执行的线程的映射以及动态扩展，随着其运行库的不断发展和完善，其性能一定会越来越好，尤其是在CPU核数越来越多的未来，终有一天我们会为了代码的简洁和可维护性而放弃那一点点性能的差别。</p>\n</blockquote>\n","site":{"data":{}},"excerpt":"<p>关于gorountine的特性, 我还是借鉴以下这篇文章来学习和总结一下, 至于一些用法在下一节channel再进行小结。</p>\n<p>源地址:<br><a href=\"http://www.infoq.com/cn/articles/knowledge-behind-goroutine\" title=\"goroutine\" target=\"_blank\" rel=\"external\">goroutine背后的系统知识</a></p>\n<p>节选(goroutine的特性):</p>\n<blockquote>\n<p>1.Go语言通过goroutine提供了目前为止所有(我所了解的)语言里对于并发编程的最清晰最直接的支持，Go语言的文档里对其特性也描述的非常全面甚至超过了，在这里，基于我们上面的系统知识介绍，列举一下goroutine的特性，算是小结：<br>","more":"</p>\n<p>2.goroutine是Go语言运行库的功能，不是操作系统提供的功能，goroutine不是用线程实现的。具体可参见Go语言源码里的pkg/runtime/proc.c</p>\n<p>3.goroutine就是一段代码，一个函数入口，以及在堆上为其分配的一个堆栈。所以它非常廉价，我们可以很轻松的创建上万个goroutine，但它们并不是被操作系统所调度执行</p>\n<p>4.除了被系统调用阻塞的线程外，Go运行库最多会启动$GOMAXPROCS个线程来运行goroutine</p>\n<p>5.goroutine是协作式调度的，如果goroutine会执行很长时间，而且不是通过等待读取或写入channel的数据来同步的话，就需要主动调用Gosched()来让出CPU</p>\n<p>6.和所有其他并发框架里的协程一样，goroutine里所谓“无锁”的优点只在单线程下有效，如果$GOMAXPROCS &gt; 1并且协程间需要通信，Go运行库会负责加锁保护数据，这也是为什么sieve.go这样的例子在多CPU多线程时反而更慢的原因</p>\n<p>7.Web等服务端程序要处理的请求从本质上来讲是并行处理的问题，每个请求基本独立，互不依赖，几乎没有数据交互，这不是一个并发编程的模型，而并发编程框架只是解决了其语义表述的复杂性，并不是从根本上提高处理的效率，也许是并发连接和并发编程的英文都是concurrent吧，很容易产生“并发编程框架和coroutine可以高效处理大量并发连接”的误解。</p>\n<p>8.Go语言运行库封装了异步IO，所以可以写出貌似并发数很多的服务端，可即使我们通过调整$GOMAXPROCS来充分利用多核CPU并行处理，其效率也不如我们利用IO事件驱动设计的、按照事务类型划分好合适比例的线程池。在响应时间上，协作式调度是硬伤。</p>\n<p>9.goroutine最大的价值是其实现了并发协程和实际并行执行的线程的映射以及动态扩展，随着其运行库的不断发展和完善，其性能一定会越来越好，尤其是在CPU核数越来越多的未来，终有一天我们会为了代码的简洁和可维护性而放弃那一点点性能的差别。</p>\n</blockquote>"},{"title":"[golang]异常处理","date":"2016-03-10T05:53:30.000Z","_content":"\n### 关于异常处理\n\ngolang并不支持try-catch-finally机制，而是通过panic和defer函数来处理运行时异常。<br>\n一般情况下，golang中使用多值来返回错误；个别情况下才需要用到Exception异常处理: defer, panic, recover。\n\n<!--more-->\n示例:\n```golang\npackage main\n\nimport (\n    \"fmt\"\n)\n\n// 一个函数可以声明多个defer, 按FILO规则执行\nfunc SimpleExceptionSample() {\n    defer func() {\n        // recover()可以获取panic的参数\n        if err := recover(); err != nil {\n            fmt.Println(\"panic_1 msg: \", err)\n        }\n    }()\n\n    defer func() {\n        fmt.Println(\"panic_2.\")\n    }()\n\n    defer func() {\n        fmt.Println(\"panic_3.\")\n    }()\n\n    panic(\"something wrong.\")\n}\n\nfunc main() {\n    SimpleExceptionSample()\n}\n```\n运行结果:\n```bash\nroot@XIAOMO:~/gopro# go build excep.go\nroot@XIAOMO:~/gopro# ./excep\npanic_3.\npanic_2.\npanic_1 msg:  something wrong.\n```\n\n### defer的三个特性\ndefer在函数返回之前执行, 其有三个明显特性:\n\n+ defer表达式中参数变量的值在定义时就已经确定\n```golang\nfunc a() {\n    i := 1\n    defer fmt.Println(\"i=\", i)\n    i = i+1\n    return\n}\n```\n这样会输出 i=1而非i=2\n\n+ defer表达式的执行顺序遵循FILO(参考第一个示例)\n+ defer表达式能修改函数中的命名返回参数值\n```golang\nfunc c() (i int) {\n    defer func() { i++ }()\n    return i\n}\n```\n这样返回值为1而非0(命名返回参数的默认值为0)。\n\n","source":"_posts/golang/golang-异常处理.md","raw":"---\ntitle: '[golang]异常处理'\ndate: 2016-03-10 13:53:30\ntags: golang\n---\n\n### 关于异常处理\n\ngolang并不支持try-catch-finally机制，而是通过panic和defer函数来处理运行时异常。<br>\n一般情况下，golang中使用多值来返回错误；个别情况下才需要用到Exception异常处理: defer, panic, recover。\n\n<!--more-->\n示例:\n```golang\npackage main\n\nimport (\n    \"fmt\"\n)\n\n// 一个函数可以声明多个defer, 按FILO规则执行\nfunc SimpleExceptionSample() {\n    defer func() {\n        // recover()可以获取panic的参数\n        if err := recover(); err != nil {\n            fmt.Println(\"panic_1 msg: \", err)\n        }\n    }()\n\n    defer func() {\n        fmt.Println(\"panic_2.\")\n    }()\n\n    defer func() {\n        fmt.Println(\"panic_3.\")\n    }()\n\n    panic(\"something wrong.\")\n}\n\nfunc main() {\n    SimpleExceptionSample()\n}\n```\n运行结果:\n```bash\nroot@XIAOMO:~/gopro# go build excep.go\nroot@XIAOMO:~/gopro# ./excep\npanic_3.\npanic_2.\npanic_1 msg:  something wrong.\n```\n\n### defer的三个特性\ndefer在函数返回之前执行, 其有三个明显特性:\n\n+ defer表达式中参数变量的值在定义时就已经确定\n```golang\nfunc a() {\n    i := 1\n    defer fmt.Println(\"i=\", i)\n    i = i+1\n    return\n}\n```\n这样会输出 i=1而非i=2\n\n+ defer表达式的执行顺序遵循FILO(参考第一个示例)\n+ defer表达式能修改函数中的命名返回参数值\n```golang\nfunc c() (i int) {\n    defer func() { i++ }()\n    return i\n}\n```\n这样返回值为1而非0(命名返回参数的默认值为0)。\n\n","slug":"golang/golang-异常处理","published":1,"updated":"2017-08-10T05:57:53.396Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj84nao3q000w7v4dgk3w4770","content":"<h3 id=\"关于异常处理\"><a href=\"#关于异常处理\" class=\"headerlink\" title=\"关于异常处理\"></a>关于异常处理</h3><p>golang并不支持try-catch-finally机制，而是通过panic和defer函数来处理运行时异常。<br><br>一般情况下，golang中使用多值来返回错误；个别情况下才需要用到Exception异常处理: defer, panic, recover。</p>\n<a id=\"more\"></a>\n<p>示例:<br><figure class=\"highlight golang\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">package</span> main</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">import</span> (</div><div class=\"line\">    <span class=\"string\">\"fmt\"</span></div><div class=\"line\">)</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 一个函数可以声明多个defer, 按FILO规则执行</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">SimpleExceptionSample</span><span class=\"params\">()</span></span> &#123;</div><div class=\"line\">    <span class=\"keyword\">defer</span> <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">()</span></span> &#123;</div><div class=\"line\">        <span class=\"comment\">// recover()可以获取panic的参数</span></div><div class=\"line\">        <span class=\"keyword\">if</span> err := <span class=\"built_in\">recover</span>(); err != <span class=\"literal\">nil</span> &#123;</div><div class=\"line\">            fmt.Println(<span class=\"string\">\"panic_1 msg: \"</span>, err)</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;()</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">defer</span> <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">()</span></span> &#123;</div><div class=\"line\">        fmt.Println(<span class=\"string\">\"panic_2.\"</span>)</div><div class=\"line\">    &#125;()</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">defer</span> <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">()</span></span> &#123;</div><div class=\"line\">        fmt.Println(<span class=\"string\">\"panic_3.\"</span>)</div><div class=\"line\">    &#125;()</div><div class=\"line\"></div><div class=\"line\">    <span class=\"built_in\">panic</span>(<span class=\"string\">\"something wrong.\"</span>)</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</div><div class=\"line\">    SimpleExceptionSample()</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>运行结果:<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">root@XIAOMO:~/gopro<span class=\"comment\"># go build excep.go</span></div><div class=\"line\">root@XIAOMO:~/gopro<span class=\"comment\"># ./excep</span></div><div class=\"line\">panic_3.</div><div class=\"line\">panic_2.</div><div class=\"line\">panic_1 msg:  something wrong.</div></pre></td></tr></table></figure></p>\n<h3 id=\"defer的三个特性\"><a href=\"#defer的三个特性\" class=\"headerlink\" title=\"defer的三个特性\"></a>defer的三个特性</h3><p>defer在函数返回之前执行, 其有三个明显特性:</p>\n<ul>\n<li>defer表达式中参数变量的值在定义时就已经确定<figure class=\"highlight golang\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">a</span><span class=\"params\">()</span></span> &#123;</div><div class=\"line\">    i := <span class=\"number\">1</span></div><div class=\"line\">    <span class=\"keyword\">defer</span> fmt.Println(<span class=\"string\">\"i=\"</span>, i)</div><div class=\"line\">    i = i+<span class=\"number\">1</span></div><div class=\"line\">    <span class=\"keyword\">return</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>这样会输出 i=1而非i=2</p>\n<ul>\n<li>defer表达式的执行顺序遵循FILO(参考第一个示例)</li>\n<li>defer表达式能修改函数中的命名返回参数值<figure class=\"highlight golang\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">c</span><span class=\"params\">()</span> <span class=\"params\">(i <span class=\"keyword\">int</span>)</span></span> &#123;</div><div class=\"line\">    <span class=\"keyword\">defer</span> <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">()</span></span> &#123; i++ &#125;()</div><div class=\"line\">    <span class=\"keyword\">return</span> i</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>这样返回值为1而非0(命名返回参数的默认值为0)。</p>\n","site":{"data":{}},"excerpt":"<h3 id=\"关于异常处理\"><a href=\"#关于异常处理\" class=\"headerlink\" title=\"关于异常处理\"></a>关于异常处理</h3><p>golang并不支持try-catch-finally机制，而是通过panic和defer函数来处理运行时异常。<br><br>一般情况下，golang中使用多值来返回错误；个别情况下才需要用到Exception异常处理: defer, panic, recover。</p>","more":"<p>示例:<br><figure class=\"highlight golang\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">package</span> main</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">import</span> (</div><div class=\"line\">    <span class=\"string\">\"fmt\"</span></div><div class=\"line\">)</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 一个函数可以声明多个defer, 按FILO规则执行</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">SimpleExceptionSample</span><span class=\"params\">()</span></span> &#123;</div><div class=\"line\">    <span class=\"keyword\">defer</span> <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">()</span></span> &#123;</div><div class=\"line\">        <span class=\"comment\">// recover()可以获取panic的参数</span></div><div class=\"line\">        <span class=\"keyword\">if</span> err := <span class=\"built_in\">recover</span>(); err != <span class=\"literal\">nil</span> &#123;</div><div class=\"line\">            fmt.Println(<span class=\"string\">\"panic_1 msg: \"</span>, err)</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;()</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">defer</span> <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">()</span></span> &#123;</div><div class=\"line\">        fmt.Println(<span class=\"string\">\"panic_2.\"</span>)</div><div class=\"line\">    &#125;()</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">defer</span> <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">()</span></span> &#123;</div><div class=\"line\">        fmt.Println(<span class=\"string\">\"panic_3.\"</span>)</div><div class=\"line\">    &#125;()</div><div class=\"line\"></div><div class=\"line\">    <span class=\"built_in\">panic</span>(<span class=\"string\">\"something wrong.\"</span>)</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</div><div class=\"line\">    SimpleExceptionSample()</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>运行结果:<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">root@XIAOMO:~/gopro<span class=\"comment\"># go build excep.go</span></div><div class=\"line\">root@XIAOMO:~/gopro<span class=\"comment\"># ./excep</span></div><div class=\"line\">panic_3.</div><div class=\"line\">panic_2.</div><div class=\"line\">panic_1 msg:  something wrong.</div></pre></td></tr></table></figure></p>\n<h3 id=\"defer的三个特性\"><a href=\"#defer的三个特性\" class=\"headerlink\" title=\"defer的三个特性\"></a>defer的三个特性</h3><p>defer在函数返回之前执行, 其有三个明显特性:</p>\n<ul>\n<li>defer表达式中参数变量的值在定义时就已经确定<figure class=\"highlight golang\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">a</span><span class=\"params\">()</span></span> &#123;</div><div class=\"line\">    i := <span class=\"number\">1</span></div><div class=\"line\">    <span class=\"keyword\">defer</span> fmt.Println(<span class=\"string\">\"i=\"</span>, i)</div><div class=\"line\">    i = i+<span class=\"number\">1</span></div><div class=\"line\">    <span class=\"keyword\">return</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>这样会输出 i=1而非i=2</p>\n<ul>\n<li>defer表达式的执行顺序遵循FILO(参考第一个示例)</li>\n<li>defer表达式能修改函数中的命名返回参数值<figure class=\"highlight golang\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">c</span><span class=\"params\">()</span> <span class=\"params\">(i <span class=\"keyword\">int</span>)</span></span> &#123;</div><div class=\"line\">    <span class=\"keyword\">defer</span> <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">()</span></span> &#123; i++ &#125;()</div><div class=\"line\">    <span class=\"keyword\">return</span> i</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>这样返回值为1而非0(命名返回参数的默认值为0)。</p>"},{"title":"[golang]HTTP webserver","date":"2016-12-03T06:11:45.000Z","_content":"\n### 简单示例\ngolang对http网络模块有比较完备的标准库支持, 如下示例:\n\n<!--more-->\n\n```golang\npackage main\n\nimport (\n    \"io\"\n    \"net/http\"\n    \"log\"\n)\n\n\nfunc LogicServer(w http.ResponseWriter, req *http.Request) {\n    io.WriteString(w, \"I'm logic server.\")\n}\n\n\nfunc main() {\n    http.HandleFunc(\"/test\", LogicServer)\n    err := http.ListenAndServe(\":8888\", nil)\n    if err != nil {\n        log.Fatal(\"ListenAndServe Err:\", err)\n    }\n}\n```\n运行效果:\n```bash\nxiaomo@XIAOMO:~$ curl \"http://127.0.0.1:8888/test\"\nI'm logic server.xiaomo\n```\n\n### golang http包的执行流程\n参考:[Go如何使得Web工作](https://astaxie.gitbooks.io/build-web-application-with-golang/content/zh/03.3.html \"http\")\n![http包运行机制](/img/golang_http.png)\n\n### 结合goroutine处理并发\n在golang中, 为了实现高并发与高性能, 处理连接的读写事件使用了goroutine机制。因此, 对于每个请求都能保持独立性, 相互没有阻塞, 能高效响应网络请求事件。\n\n","source":"_posts/golang/golang_http-server.md","raw":"---\ntitle: '[golang]HTTP webserver'\ndate: 2016-12-03 14:11:45\ntags: golang\n---\n\n### 简单示例\ngolang对http网络模块有比较完备的标准库支持, 如下示例:\n\n<!--more-->\n\n```golang\npackage main\n\nimport (\n    \"io\"\n    \"net/http\"\n    \"log\"\n)\n\n\nfunc LogicServer(w http.ResponseWriter, req *http.Request) {\n    io.WriteString(w, \"I'm logic server.\")\n}\n\n\nfunc main() {\n    http.HandleFunc(\"/test\", LogicServer)\n    err := http.ListenAndServe(\":8888\", nil)\n    if err != nil {\n        log.Fatal(\"ListenAndServe Err:\", err)\n    }\n}\n```\n运行效果:\n```bash\nxiaomo@XIAOMO:~$ curl \"http://127.0.0.1:8888/test\"\nI'm logic server.xiaomo\n```\n\n### golang http包的执行流程\n参考:[Go如何使得Web工作](https://astaxie.gitbooks.io/build-web-application-with-golang/content/zh/03.3.html \"http\")\n![http包运行机制](/img/golang_http.png)\n\n### 结合goroutine处理并发\n在golang中, 为了实现高并发与高性能, 处理连接的读写事件使用了goroutine机制。因此, 对于每个请求都能保持独立性, 相互没有阻塞, 能高效响应网络请求事件。\n\n","slug":"golang/golang_http-server","published":1,"updated":"2017-08-07T05:47:10.146Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj84nao3t000y7v4doi63qo1d","content":"<h3 id=\"简单示例\"><a href=\"#简单示例\" class=\"headerlink\" title=\"简单示例\"></a>简单示例</h3><p>golang对http网络模块有比较完备的标准库支持, 如下示例:</p>\n<a id=\"more\"></a>\n<figure class=\"highlight golang\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">package</span> main</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">import</span> (</div><div class=\"line\">    <span class=\"string\">\"io\"</span></div><div class=\"line\">    <span class=\"string\">\"net/http\"</span></div><div class=\"line\">    <span class=\"string\">\"log\"</span></div><div class=\"line\">)</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">LogicServer</span><span class=\"params\">(w http.ResponseWriter, req *http.Request)</span></span> &#123;</div><div class=\"line\">    io.WriteString(w, <span class=\"string\">\"I'm logic server.\"</span>)</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</div><div class=\"line\">    http.HandleFunc(<span class=\"string\">\"/test\"</span>, LogicServer)</div><div class=\"line\">    err := http.ListenAndServe(<span class=\"string\">\":8888\"</span>, <span class=\"literal\">nil</span>)</div><div class=\"line\">    <span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</div><div class=\"line\">        log.Fatal(<span class=\"string\">\"ListenAndServe Err:\"</span>, err)</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>运行效果:<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">xiaomo@XIAOMO:~$ curl <span class=\"string\">\"http://127.0.0.1:8888/test\"</span></div><div class=\"line\">I<span class=\"string\">'m logic server.xiaomo</span></div></pre></td></tr></table></figure></p>\n<h3 id=\"golang-http包的执行流程\"><a href=\"#golang-http包的执行流程\" class=\"headerlink\" title=\"golang http包的执行流程\"></a>golang http包的执行流程</h3><p>参考:<a href=\"https://astaxie.gitbooks.io/build-web-application-with-golang/content/zh/03.3.html\" title=\"http\" target=\"_blank\" rel=\"external\">Go如何使得Web工作</a><br><img src=\"/img/golang_http.png\" alt=\"http包运行机制\"></p>\n<h3 id=\"结合goroutine处理并发\"><a href=\"#结合goroutine处理并发\" class=\"headerlink\" title=\"结合goroutine处理并发\"></a>结合goroutine处理并发</h3><p>在golang中, 为了实现高并发与高性能, 处理连接的读写事件使用了goroutine机制。因此, 对于每个请求都能保持独立性, 相互没有阻塞, 能高效响应网络请求事件。</p>\n","site":{"data":{}},"excerpt":"<h3 id=\"简单示例\"><a href=\"#简单示例\" class=\"headerlink\" title=\"简单示例\"></a>简单示例</h3><p>golang对http网络模块有比较完备的标准库支持, 如下示例:</p>","more":"<figure class=\"highlight golang\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">package</span> main</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">import</span> (</div><div class=\"line\">    <span class=\"string\">\"io\"</span></div><div class=\"line\">    <span class=\"string\">\"net/http\"</span></div><div class=\"line\">    <span class=\"string\">\"log\"</span></div><div class=\"line\">)</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">LogicServer</span><span class=\"params\">(w http.ResponseWriter, req *http.Request)</span></span> &#123;</div><div class=\"line\">    io.WriteString(w, <span class=\"string\">\"I'm logic server.\"</span>)</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</div><div class=\"line\">    http.HandleFunc(<span class=\"string\">\"/test\"</span>, LogicServer)</div><div class=\"line\">    err := http.ListenAndServe(<span class=\"string\">\":8888\"</span>, <span class=\"literal\">nil</span>)</div><div class=\"line\">    <span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</div><div class=\"line\">        log.Fatal(<span class=\"string\">\"ListenAndServe Err:\"</span>, err)</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>运行效果:<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">xiaomo@XIAOMO:~$ curl <span class=\"string\">\"http://127.0.0.1:8888/test\"</span></div><div class=\"line\">I<span class=\"string\">'m logic server.xiaomo</span></div></pre></td></tr></table></figure></p>\n<h3 id=\"golang-http包的执行流程\"><a href=\"#golang-http包的执行流程\" class=\"headerlink\" title=\"golang http包的执行流程\"></a>golang http包的执行流程</h3><p>参考:<a href=\"https://astaxie.gitbooks.io/build-web-application-with-golang/content/zh/03.3.html\" title=\"http\" target=\"_blank\" rel=\"external\">Go如何使得Web工作</a><br><img src=\"/img/golang_http.png\" alt=\"http包运行机制\"></p>\n<h3 id=\"结合goroutine处理并发\"><a href=\"#结合goroutine处理并发\" class=\"headerlink\" title=\"结合goroutine处理并发\"></a>结合goroutine处理并发</h3><p>在golang中, 为了实现高并发与高性能, 处理连接的读写事件使用了goroutine机制。因此, 对于每个请求都能保持独立性, 相互没有阻塞, 能高效响应网络请求事件。</p>"},{"title":"[golang]map/set类型","date":"2017-02-01T11:13:13.000Z","_content":"\n### map类型\n#### 1. 基础特性\n- map是一种无序的键值对的集合; 所以可以类似数组/slice一样进行迭代\n- map的值可以使内建类型, 也可以是struct类型\n- 内部使用hash表实现, map的hash表包含了一个collection of buckets（桶集合）\n\n<!--more-->\n\n#### 2. 声明与初始化\n```golang\npackage main\n\nimport (\n    \"fmt\"\n)\n\n// map[keyType]valueType\nfunc initMap() {\n    // 通过make方法创建\n    dict := make(map[string]int)\n    dict[\"age\"] = 18\n\n    // 直接创建\n    dict2 := map[string]string{\"name\":\"xiaoming\", \"phone\":\"135xxx\"}\n    dict2[\"addr\"] = \"Guangzhou\"\n\n    fmt.Printf(\"%v\\n\", dict2)\n}\n\n\nfunc main() {\n    initMap()\n}\n```\n\n#### 3. 元素访问\n```golang\npackage main\n\nimport (\n    \"fmt\"\n)\n\ntype Student struct {\n    name string\n    grade int\n}\n\nfunc useMap() {\n    //使用前应该先初始化, 否则panic报错\n    // var map1 map[string]string\n    // map1[\"a\"] = \"b\" // will panic\n\n    map1 := make(map[string]Student)\n    map1[\"s1\"] = Student{name:\"xiaomo\", grade:1}\n    fmt.Printf(\"%v\\n\", map1)\n}\n\nfunc main() {\n    useMap()\n}\n\n```\n\n#### 4. 在函数中传递map\n\n在函数间传递map对象, 是传递引用而不是拷贝; 因此在函数中对map进行了修改, 引用到它的地方也会相应修改\n```golang\npackage main\n\nimport (\n    \"fmt\"\n)\n\ntype Student struct {\n    name string\n    grade int\n}\n\nfunc useMap() {\n    map1 := make(map[string]Student)\n    map1[\"s1\"] = Student{name:\"xiaomo\", grade:1}\n    // 作为函数参数传递\n    printMap(map1)\n}\n\nfunc printMap(m map[string]Student) {\n    fmt.Printf(\"currentMap: %v\\n\", m)\n}\n\nfunc main() {\n    useMap()\n}\n\n```\n\n### Set类型\n\ngolang没有内置Set类型, 可以自定义实现。\n\n","source":"_posts/golang/golang_map-set.md","raw":"---\ntitle: '[golang]map/set类型'\ndate: 2017-02-01 19:13:13\ntags: golang\n---\n\n### map类型\n#### 1. 基础特性\n- map是一种无序的键值对的集合; 所以可以类似数组/slice一样进行迭代\n- map的值可以使内建类型, 也可以是struct类型\n- 内部使用hash表实现, map的hash表包含了一个collection of buckets（桶集合）\n\n<!--more-->\n\n#### 2. 声明与初始化\n```golang\npackage main\n\nimport (\n    \"fmt\"\n)\n\n// map[keyType]valueType\nfunc initMap() {\n    // 通过make方法创建\n    dict := make(map[string]int)\n    dict[\"age\"] = 18\n\n    // 直接创建\n    dict2 := map[string]string{\"name\":\"xiaoming\", \"phone\":\"135xxx\"}\n    dict2[\"addr\"] = \"Guangzhou\"\n\n    fmt.Printf(\"%v\\n\", dict2)\n}\n\n\nfunc main() {\n    initMap()\n}\n```\n\n#### 3. 元素访问\n```golang\npackage main\n\nimport (\n    \"fmt\"\n)\n\ntype Student struct {\n    name string\n    grade int\n}\n\nfunc useMap() {\n    //使用前应该先初始化, 否则panic报错\n    // var map1 map[string]string\n    // map1[\"a\"] = \"b\" // will panic\n\n    map1 := make(map[string]Student)\n    map1[\"s1\"] = Student{name:\"xiaomo\", grade:1}\n    fmt.Printf(\"%v\\n\", map1)\n}\n\nfunc main() {\n    useMap()\n}\n\n```\n\n#### 4. 在函数中传递map\n\n在函数间传递map对象, 是传递引用而不是拷贝; 因此在函数中对map进行了修改, 引用到它的地方也会相应修改\n```golang\npackage main\n\nimport (\n    \"fmt\"\n)\n\ntype Student struct {\n    name string\n    grade int\n}\n\nfunc useMap() {\n    map1 := make(map[string]Student)\n    map1[\"s1\"] = Student{name:\"xiaomo\", grade:1}\n    // 作为函数参数传递\n    printMap(map1)\n}\n\nfunc printMap(m map[string]Student) {\n    fmt.Printf(\"currentMap: %v\\n\", m)\n}\n\nfunc main() {\n    useMap()\n}\n\n```\n\n### Set类型\n\ngolang没有内置Set类型, 可以自定义实现。\n\n","slug":"golang/golang_map-set","published":1,"updated":"2017-08-07T05:47:10.147Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj84nao3x00107v4db73mymdg","content":"<h3 id=\"map类型\"><a href=\"#map类型\" class=\"headerlink\" title=\"map类型\"></a>map类型</h3><h4 id=\"1-基础特性\"><a href=\"#1-基础特性\" class=\"headerlink\" title=\"1. 基础特性\"></a>1. 基础特性</h4><ul>\n<li>map是一种无序的键值对的集合; 所以可以类似数组/slice一样进行迭代</li>\n<li>map的值可以使内建类型, 也可以是struct类型</li>\n<li>内部使用hash表实现, map的hash表包含了一个collection of buckets（桶集合）</li>\n</ul>\n<a id=\"more\"></a>\n<h4 id=\"2-声明与初始化\"><a href=\"#2-声明与初始化\" class=\"headerlink\" title=\"2. 声明与初始化\"></a>2. 声明与初始化</h4><figure class=\"highlight golang\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">package</span> main</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">import</span> (</div><div class=\"line\">    <span class=\"string\">\"fmt\"</span></div><div class=\"line\">)</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// map[keyType]valueType</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">initMap</span><span class=\"params\">()</span></span> &#123;</div><div class=\"line\">    <span class=\"comment\">// 通过make方法创建</span></div><div class=\"line\">    dict := <span class=\"built_in\">make</span>(<span class=\"keyword\">map</span>[<span class=\"keyword\">string</span>]<span class=\"keyword\">int</span>)</div><div class=\"line\">    dict[<span class=\"string\">\"age\"</span>] = <span class=\"number\">18</span></div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// 直接创建</span></div><div class=\"line\">    dict2 := <span class=\"keyword\">map</span>[<span class=\"keyword\">string</span>]<span class=\"keyword\">string</span>&#123;<span class=\"string\">\"name\"</span>:<span class=\"string\">\"xiaoming\"</span>, <span class=\"string\">\"phone\"</span>:<span class=\"string\">\"135xxx\"</span>&#125;</div><div class=\"line\">    dict2[<span class=\"string\">\"addr\"</span>] = <span class=\"string\">\"Guangzhou\"</span></div><div class=\"line\"></div><div class=\"line\">    fmt.Printf(<span class=\"string\">\"%v\\n\"</span>, dict2)</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</div><div class=\"line\">    initMap()</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h4 id=\"3-元素访问\"><a href=\"#3-元素访问\" class=\"headerlink\" title=\"3. 元素访问\"></a>3. 元素访问</h4><figure class=\"highlight golang\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">package</span> main</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">import</span> (</div><div class=\"line\">    <span class=\"string\">\"fmt\"</span></div><div class=\"line\">)</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">type</span> Student <span class=\"keyword\">struct</span> &#123;</div><div class=\"line\">    name <span class=\"keyword\">string</span></div><div class=\"line\">    grade <span class=\"keyword\">int</span></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">useMap</span><span class=\"params\">()</span></span> &#123;</div><div class=\"line\">    <span class=\"comment\">//使用前应该先初始化, 否则panic报错</span></div><div class=\"line\">    <span class=\"comment\">// var map1 map[string]string</span></div><div class=\"line\">    <span class=\"comment\">// map1[\"a\"] = \"b\" // will panic</span></div><div class=\"line\"></div><div class=\"line\">    map1 := <span class=\"built_in\">make</span>(<span class=\"keyword\">map</span>[<span class=\"keyword\">string</span>]Student)</div><div class=\"line\">    map1[<span class=\"string\">\"s1\"</span>] = Student&#123;name:<span class=\"string\">\"xiaomo\"</span>, grade:<span class=\"number\">1</span>&#125;</div><div class=\"line\">    fmt.Printf(<span class=\"string\">\"%v\\n\"</span>, map1)</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</div><div class=\"line\">    useMap()</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h4 id=\"4-在函数中传递map\"><a href=\"#4-在函数中传递map\" class=\"headerlink\" title=\"4. 在函数中传递map\"></a>4. 在函数中传递map</h4><p>在函数间传递map对象, 是传递引用而不是拷贝; 因此在函数中对map进行了修改, 引用到它的地方也会相应修改<br><figure class=\"highlight golang\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">package</span> main</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">import</span> (</div><div class=\"line\">    <span class=\"string\">\"fmt\"</span></div><div class=\"line\">)</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">type</span> Student <span class=\"keyword\">struct</span> &#123;</div><div class=\"line\">    name <span class=\"keyword\">string</span></div><div class=\"line\">    grade <span class=\"keyword\">int</span></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">useMap</span><span class=\"params\">()</span></span> &#123;</div><div class=\"line\">    map1 := <span class=\"built_in\">make</span>(<span class=\"keyword\">map</span>[<span class=\"keyword\">string</span>]Student)</div><div class=\"line\">    map1[<span class=\"string\">\"s1\"</span>] = Student&#123;name:<span class=\"string\">\"xiaomo\"</span>, grade:<span class=\"number\">1</span>&#125;</div><div class=\"line\">    <span class=\"comment\">// 作为函数参数传递</span></div><div class=\"line\">    printMap(map1)</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">printMap</span><span class=\"params\">(m <span class=\"keyword\">map</span>[<span class=\"keyword\">string</span>]Student)</span></span> &#123;</div><div class=\"line\">    fmt.Printf(<span class=\"string\">\"currentMap: %v\\n\"</span>, m)</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</div><div class=\"line\">    useMap()</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<h3 id=\"Set类型\"><a href=\"#Set类型\" class=\"headerlink\" title=\"Set类型\"></a>Set类型</h3><p>golang没有内置Set类型, 可以自定义实现。</p>\n","site":{"data":{}},"excerpt":"<h3 id=\"map类型\"><a href=\"#map类型\" class=\"headerlink\" title=\"map类型\"></a>map类型</h3><h4 id=\"1-基础特性\"><a href=\"#1-基础特性\" class=\"headerlink\" title=\"1. 基础特性\"></a>1. 基础特性</h4><ul>\n<li>map是一种无序的键值对的集合; 所以可以类似数组/slice一样进行迭代</li>\n<li>map的值可以使内建类型, 也可以是struct类型</li>\n<li>内部使用hash表实现, map的hash表包含了一个collection of buckets（桶集合）</li>\n</ul>","more":"<h4 id=\"2-声明与初始化\"><a href=\"#2-声明与初始化\" class=\"headerlink\" title=\"2. 声明与初始化\"></a>2. 声明与初始化</h4><figure class=\"highlight golang\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">package</span> main</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">import</span> (</div><div class=\"line\">    <span class=\"string\">\"fmt\"</span></div><div class=\"line\">)</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// map[keyType]valueType</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">initMap</span><span class=\"params\">()</span></span> &#123;</div><div class=\"line\">    <span class=\"comment\">// 通过make方法创建</span></div><div class=\"line\">    dict := <span class=\"built_in\">make</span>(<span class=\"keyword\">map</span>[<span class=\"keyword\">string</span>]<span class=\"keyword\">int</span>)</div><div class=\"line\">    dict[<span class=\"string\">\"age\"</span>] = <span class=\"number\">18</span></div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// 直接创建</span></div><div class=\"line\">    dict2 := <span class=\"keyword\">map</span>[<span class=\"keyword\">string</span>]<span class=\"keyword\">string</span>&#123;<span class=\"string\">\"name\"</span>:<span class=\"string\">\"xiaoming\"</span>, <span class=\"string\">\"phone\"</span>:<span class=\"string\">\"135xxx\"</span>&#125;</div><div class=\"line\">    dict2[<span class=\"string\">\"addr\"</span>] = <span class=\"string\">\"Guangzhou\"</span></div><div class=\"line\"></div><div class=\"line\">    fmt.Printf(<span class=\"string\">\"%v\\n\"</span>, dict2)</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</div><div class=\"line\">    initMap()</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h4 id=\"3-元素访问\"><a href=\"#3-元素访问\" class=\"headerlink\" title=\"3. 元素访问\"></a>3. 元素访问</h4><figure class=\"highlight golang\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">package</span> main</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">import</span> (</div><div class=\"line\">    <span class=\"string\">\"fmt\"</span></div><div class=\"line\">)</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">type</span> Student <span class=\"keyword\">struct</span> &#123;</div><div class=\"line\">    name <span class=\"keyword\">string</span></div><div class=\"line\">    grade <span class=\"keyword\">int</span></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">useMap</span><span class=\"params\">()</span></span> &#123;</div><div class=\"line\">    <span class=\"comment\">//使用前应该先初始化, 否则panic报错</span></div><div class=\"line\">    <span class=\"comment\">// var map1 map[string]string</span></div><div class=\"line\">    <span class=\"comment\">// map1[\"a\"] = \"b\" // will panic</span></div><div class=\"line\"></div><div class=\"line\">    map1 := <span class=\"built_in\">make</span>(<span class=\"keyword\">map</span>[<span class=\"keyword\">string</span>]Student)</div><div class=\"line\">    map1[<span class=\"string\">\"s1\"</span>] = Student&#123;name:<span class=\"string\">\"xiaomo\"</span>, grade:<span class=\"number\">1</span>&#125;</div><div class=\"line\">    fmt.Printf(<span class=\"string\">\"%v\\n\"</span>, map1)</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</div><div class=\"line\">    useMap()</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h4 id=\"4-在函数中传递map\"><a href=\"#4-在函数中传递map\" class=\"headerlink\" title=\"4. 在函数中传递map\"></a>4. 在函数中传递map</h4><p>在函数间传递map对象, 是传递引用而不是拷贝; 因此在函数中对map进行了修改, 引用到它的地方也会相应修改<br><figure class=\"highlight golang\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">package</span> main</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">import</span> (</div><div class=\"line\">    <span class=\"string\">\"fmt\"</span></div><div class=\"line\">)</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">type</span> Student <span class=\"keyword\">struct</span> &#123;</div><div class=\"line\">    name <span class=\"keyword\">string</span></div><div class=\"line\">    grade <span class=\"keyword\">int</span></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">useMap</span><span class=\"params\">()</span></span> &#123;</div><div class=\"line\">    map1 := <span class=\"built_in\">make</span>(<span class=\"keyword\">map</span>[<span class=\"keyword\">string</span>]Student)</div><div class=\"line\">    map1[<span class=\"string\">\"s1\"</span>] = Student&#123;name:<span class=\"string\">\"xiaomo\"</span>, grade:<span class=\"number\">1</span>&#125;</div><div class=\"line\">    <span class=\"comment\">// 作为函数参数传递</span></div><div class=\"line\">    printMap(map1)</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">printMap</span><span class=\"params\">(m <span class=\"keyword\">map</span>[<span class=\"keyword\">string</span>]Student)</span></span> &#123;</div><div class=\"line\">    fmt.Printf(<span class=\"string\">\"currentMap: %v\\n\"</span>, m)</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</div><div class=\"line\">    useMap()</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<h3 id=\"Set类型\"><a href=\"#Set类型\" class=\"headerlink\" title=\"Set类型\"></a>Set类型</h3><p>golang没有内置Set类型, 可以自定义实现。</p>"},{"title":"[golang]interface","date":"2016-01-02T07:22:43.000Z","_content":"\n\n第一次接触golang, 应该是2013那年在某沙龙听许大神在介绍golang特性。<br>\n那时候据说interface可以说是golang中最具特色、设计精妙的特性之一。<br>\n现在计划写个demo， 重新学习一下interface的设计模式。\n\n### 什么是interface\n- 在golang中, interface简单可认为是一组函数的组合, 通过interface可以定义对象的一组行为。\n- interface定义了一组方法, 如果某个对象实现了某个interface的所有方法， 则我们可以认为这个对象实现了这个接口。\n- 由此可见, 不像C++、java， golang实现接口并不需要显式的implements。。。\n\n<!--more-->\n\n### interface的一些基础特性\n- interface类型不包含任何的成员变量, 只有方法;\n- interface类型进行类型转换时, 默认返回的是对象拷贝; 如果需要修改源对象, 需使用指针;\n- interface类型可以嵌套, 但不支持两个对象互相嵌套.\n\n\n### 接口的定义与实现\n一个例子\n```golang\npackage main\n\nimport (\n    \"fmt\"\n)\n\ntype Human interface {\n    GetName() string\n    GetAge() int\n    GetGender() string\n}\n\n// 定义struct Employee\ntype Employee struct {\n    name   string\n    age    int\n    salary int\n    gender string\n}\n\n// 定义struct Employee 的方法\nfunc (self *Employee) GetName() string {\n    return self.name\n}\n\nfunc (self *Employee) GetAge() int {\n    return self.age\n}\n\nfunc (self *Employee) GetGender() string{\n    return self.gender\n}\n\nfunc (self *Employee) GetSalary() int {\n    return self.salary\n}\n\n// 参数为Human类型\nfunc printName(p Human) {\n    name := p.GetName()\n    fmt.Printf(\"name:%v\\n\", name)\n}\n\nfunc main() {\n    varEmployee := Employee{\n        name:   \"xiaomo\",\n        age:    30,\n        salary: 10000000,\n        gender: \"Male\",\n    }\n    // 访问GetSalary方法\n    s := varEmployee.GetSalary()\n    fmt.Printf(\"salary:%v\\n\", s)\n\n    // 子集转为超集类型Human, 作为参数传入函数中\n    var p Human = &varEmployee\n    printName(p)\n}\n```\n演示效果:\n```bash\nroot@XIAOMO:~/gopro# go build interface.go\nroot@XIAOMO:~/gopro# ./interface\nsalary:10000000\nname:xiaomo\n```\n上例中, 定义了接口Human, 内部有三个方法: GetName(), GetAge(), GetGender(); <br>\n结构Employee除了实现这三个方法外, 还实现了GetSalary()方法。 因此, 对象Employee实现Human接口。\n\nEmployee可以转换为Human类型, 作为形参传入printName()函数; 实现了多态调用。\n\n### 接口的嵌套\n一个接口可以嵌套另一个接口，根据上面的代码再修改一下， 修改部分如下:\n```golang\n// 嵌套接口Human, 那么User除了有PrintInfo()外， 也拥有了Human的所有方法\ntype User interface {\n    Human\n    PrintInfo()\n}\n\n// 实现PrintInfo()方法\nfunc (self * Employee) PrintInfo() {\n    fmt.Printf(\"name:%v age:%v salary:%v gender:%v\\n\",\n        self.name, self.age, self.salary, self.gender)\n}\n\nfunc main() {\n    varEmployee := Employee{\n        name:   \"xiaomo\",\n        age:    50,\n        salary: 100000000,\n        gender: \"Male\",\n    }\n    // 访问GetSalary方法\n    s := varEmployee.GetSalary()\n    fmt.Printf(\"salary:%v\\n\", s)\n\n    // 子集转为超集类型Human, 作为参数传入函数中\n    var p Human = &varEmployee\n    printName(p)\n\n    // Employee转换为User类型\n    var u User = &varEmployee\n    // 这时可以调用User的GetName()方法\n    fmt.Printf(\"user_name:%v\\n\", u.GetName())\n    // 调用User的PrintInfo()方法\n    u.PrintInfo()\n}\n```\n### 空接口(Any类型)\ngolang中所有对象都满足空接口interface{}, 因此interface{}可以指向任何类型的对象。\n\n```golang\nvar i1 interface{} = 100      // 将int类型赋值给interface{}\nvar i2 interface{} = \"ok\"     // 将string类型赋值给interface{}\nvar i3 interface{} = &i2      // 将*interface{}类型赋值给interface{}\nvar i4 interface{} = struct{ X int }{1}   // 将struct类型赋值给interface{}\nvar i5 interface{} = &struct{ X int }{1}  // 将*struct类型赋值给interfae{}\n```\n当一个方法需要接受任意类型的对象时, 我们将其参数声明为interface{}空类型。如fmt库中的各种print方法就使用了这种方式:\n```golang\nfunc Printf(fmt string, args ...interface{})\nfunc Println(args ...interface{})\n```\n\n### 总结\ngolang的接口和其他语言的接口区别还是比较大, 显得别具一格。\n其他大部分语言的接口是侵入式的， 需要显式的implement；而golang是非侵入式的, 实现某个接口并不需要从该接口继承，而只需要实现该接口的所有方法。\n","source":"_posts/golang/golang_interface.md","raw":"---\ntitle: '[golang]interface'\ndate: 2016-01-02 15:22:43\ntags: golang\n---\n\n\n第一次接触golang, 应该是2013那年在某沙龙听许大神在介绍golang特性。<br>\n那时候据说interface可以说是golang中最具特色、设计精妙的特性之一。<br>\n现在计划写个demo， 重新学习一下interface的设计模式。\n\n### 什么是interface\n- 在golang中, interface简单可认为是一组函数的组合, 通过interface可以定义对象的一组行为。\n- interface定义了一组方法, 如果某个对象实现了某个interface的所有方法， 则我们可以认为这个对象实现了这个接口。\n- 由此可见, 不像C++、java， golang实现接口并不需要显式的implements。。。\n\n<!--more-->\n\n### interface的一些基础特性\n- interface类型不包含任何的成员变量, 只有方法;\n- interface类型进行类型转换时, 默认返回的是对象拷贝; 如果需要修改源对象, 需使用指针;\n- interface类型可以嵌套, 但不支持两个对象互相嵌套.\n\n\n### 接口的定义与实现\n一个例子\n```golang\npackage main\n\nimport (\n    \"fmt\"\n)\n\ntype Human interface {\n    GetName() string\n    GetAge() int\n    GetGender() string\n}\n\n// 定义struct Employee\ntype Employee struct {\n    name   string\n    age    int\n    salary int\n    gender string\n}\n\n// 定义struct Employee 的方法\nfunc (self *Employee) GetName() string {\n    return self.name\n}\n\nfunc (self *Employee) GetAge() int {\n    return self.age\n}\n\nfunc (self *Employee) GetGender() string{\n    return self.gender\n}\n\nfunc (self *Employee) GetSalary() int {\n    return self.salary\n}\n\n// 参数为Human类型\nfunc printName(p Human) {\n    name := p.GetName()\n    fmt.Printf(\"name:%v\\n\", name)\n}\n\nfunc main() {\n    varEmployee := Employee{\n        name:   \"xiaomo\",\n        age:    30,\n        salary: 10000000,\n        gender: \"Male\",\n    }\n    // 访问GetSalary方法\n    s := varEmployee.GetSalary()\n    fmt.Printf(\"salary:%v\\n\", s)\n\n    // 子集转为超集类型Human, 作为参数传入函数中\n    var p Human = &varEmployee\n    printName(p)\n}\n```\n演示效果:\n```bash\nroot@XIAOMO:~/gopro# go build interface.go\nroot@XIAOMO:~/gopro# ./interface\nsalary:10000000\nname:xiaomo\n```\n上例中, 定义了接口Human, 内部有三个方法: GetName(), GetAge(), GetGender(); <br>\n结构Employee除了实现这三个方法外, 还实现了GetSalary()方法。 因此, 对象Employee实现Human接口。\n\nEmployee可以转换为Human类型, 作为形参传入printName()函数; 实现了多态调用。\n\n### 接口的嵌套\n一个接口可以嵌套另一个接口，根据上面的代码再修改一下， 修改部分如下:\n```golang\n// 嵌套接口Human, 那么User除了有PrintInfo()外， 也拥有了Human的所有方法\ntype User interface {\n    Human\n    PrintInfo()\n}\n\n// 实现PrintInfo()方法\nfunc (self * Employee) PrintInfo() {\n    fmt.Printf(\"name:%v age:%v salary:%v gender:%v\\n\",\n        self.name, self.age, self.salary, self.gender)\n}\n\nfunc main() {\n    varEmployee := Employee{\n        name:   \"xiaomo\",\n        age:    50,\n        salary: 100000000,\n        gender: \"Male\",\n    }\n    // 访问GetSalary方法\n    s := varEmployee.GetSalary()\n    fmt.Printf(\"salary:%v\\n\", s)\n\n    // 子集转为超集类型Human, 作为参数传入函数中\n    var p Human = &varEmployee\n    printName(p)\n\n    // Employee转换为User类型\n    var u User = &varEmployee\n    // 这时可以调用User的GetName()方法\n    fmt.Printf(\"user_name:%v\\n\", u.GetName())\n    // 调用User的PrintInfo()方法\n    u.PrintInfo()\n}\n```\n### 空接口(Any类型)\ngolang中所有对象都满足空接口interface{}, 因此interface{}可以指向任何类型的对象。\n\n```golang\nvar i1 interface{} = 100      // 将int类型赋值给interface{}\nvar i2 interface{} = \"ok\"     // 将string类型赋值给interface{}\nvar i3 interface{} = &i2      // 将*interface{}类型赋值给interface{}\nvar i4 interface{} = struct{ X int }{1}   // 将struct类型赋值给interface{}\nvar i5 interface{} = &struct{ X int }{1}  // 将*struct类型赋值给interfae{}\n```\n当一个方法需要接受任意类型的对象时, 我们将其参数声明为interface{}空类型。如fmt库中的各种print方法就使用了这种方式:\n```golang\nfunc Printf(fmt string, args ...interface{})\nfunc Println(args ...interface{})\n```\n\n### 总结\ngolang的接口和其他语言的接口区别还是比较大, 显得别具一格。\n其他大部分语言的接口是侵入式的， 需要显式的implement；而golang是非侵入式的, 实现某个接口并不需要从该接口继承，而只需要实现该接口的所有方法。\n","slug":"golang/golang_interface","published":1,"updated":"2017-08-07T05:47:10.146Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj84nao4000127v4d2fjbq6h5","content":"<p>第一次接触golang, 应该是2013那年在某沙龙听许大神在介绍golang特性。<br><br>那时候据说interface可以说是golang中最具特色、设计精妙的特性之一。<br><br>现在计划写个demo， 重新学习一下interface的设计模式。</p>\n<h3 id=\"什么是interface\"><a href=\"#什么是interface\" class=\"headerlink\" title=\"什么是interface\"></a>什么是interface</h3><ul>\n<li>在golang中, interface简单可认为是一组函数的组合, 通过interface可以定义对象的一组行为。</li>\n<li>interface定义了一组方法, 如果某个对象实现了某个interface的所有方法， 则我们可以认为这个对象实现了这个接口。</li>\n<li>由此可见, 不像C++、java， golang实现接口并不需要显式的implements。。。</li>\n</ul>\n<a id=\"more\"></a>\n<h3 id=\"interface的一些基础特性\"><a href=\"#interface的一些基础特性\" class=\"headerlink\" title=\"interface的一些基础特性\"></a>interface的一些基础特性</h3><ul>\n<li>interface类型不包含任何的成员变量, 只有方法;</li>\n<li>interface类型进行类型转换时, 默认返回的是对象拷贝; 如果需要修改源对象, 需使用指针;</li>\n<li>interface类型可以嵌套, 但不支持两个对象互相嵌套.</li>\n</ul>\n<h3 id=\"接口的定义与实现\"><a href=\"#接口的定义与实现\" class=\"headerlink\" title=\"接口的定义与实现\"></a>接口的定义与实现</h3><p>一个例子<br><figure class=\"highlight golang\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">package</span> main</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">import</span> (</div><div class=\"line\">    <span class=\"string\">\"fmt\"</span></div><div class=\"line\">)</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">type</span> Human <span class=\"keyword\">interface</span> &#123;</div><div class=\"line\">    GetName() <span class=\"keyword\">string</span></div><div class=\"line\">    GetAge() <span class=\"keyword\">int</span></div><div class=\"line\">    GetGender() <span class=\"keyword\">string</span></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 定义struct Employee</span></div><div class=\"line\"><span class=\"keyword\">type</span> Employee <span class=\"keyword\">struct</span> &#123;</div><div class=\"line\">    name   <span class=\"keyword\">string</span></div><div class=\"line\">    age    <span class=\"keyword\">int</span></div><div class=\"line\">    salary <span class=\"keyword\">int</span></div><div class=\"line\">    gender <span class=\"keyword\">string</span></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 定义struct Employee 的方法</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(self *Employee)</span> <span class=\"title\">GetName</span><span class=\"params\">()</span> <span class=\"title\">string</span></span> &#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> self.name</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(self *Employee)</span> <span class=\"title\">GetAge</span><span class=\"params\">()</span> <span class=\"title\">int</span></span> &#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> self.age</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(self *Employee)</span> <span class=\"title\">GetGender</span><span class=\"params\">()</span> <span class=\"title\">string</span></span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> self.gender</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(self *Employee)</span> <span class=\"title\">GetSalary</span><span class=\"params\">()</span> <span class=\"title\">int</span></span> &#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> self.salary</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 参数为Human类型</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">printName</span><span class=\"params\">(p Human)</span></span> &#123;</div><div class=\"line\">    name := p.GetName()</div><div class=\"line\">    fmt.Printf(<span class=\"string\">\"name:%v\\n\"</span>, name)</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</div><div class=\"line\">    varEmployee := Employee&#123;</div><div class=\"line\">        name:   <span class=\"string\">\"xiaomo\"</span>,</div><div class=\"line\">        age:    <span class=\"number\">30</span>,</div><div class=\"line\">        salary: <span class=\"number\">10000000</span>,</div><div class=\"line\">        gender: <span class=\"string\">\"Male\"</span>,</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"comment\">// 访问GetSalary方法</span></div><div class=\"line\">    s := varEmployee.GetSalary()</div><div class=\"line\">    fmt.Printf(<span class=\"string\">\"salary:%v\\n\"</span>, s)</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// 子集转为超集类型Human, 作为参数传入函数中</span></div><div class=\"line\">    <span class=\"keyword\">var</span> p Human = &amp;varEmployee</div><div class=\"line\">    printName(p)</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>演示效果:<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">root@XIAOMO:~/gopro<span class=\"comment\"># go build interface.go</span></div><div class=\"line\">root@XIAOMO:~/gopro<span class=\"comment\"># ./interface</span></div><div class=\"line\">salary:10000000</div><div class=\"line\">name:xiaomo</div></pre></td></tr></table></figure></p>\n<p>上例中, 定义了接口Human, 内部有三个方法: GetName(), GetAge(), GetGender(); <br><br>结构Employee除了实现这三个方法外, 还实现了GetSalary()方法。 因此, 对象Employee实现Human接口。</p>\n<p>Employee可以转换为Human类型, 作为形参传入printName()函数; 实现了多态调用。</p>\n<h3 id=\"接口的嵌套\"><a href=\"#接口的嵌套\" class=\"headerlink\" title=\"接口的嵌套\"></a>接口的嵌套</h3><p>一个接口可以嵌套另一个接口，根据上面的代码再修改一下， 修改部分如下:<br><figure class=\"highlight golang\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 嵌套接口Human, 那么User除了有PrintInfo()外， 也拥有了Human的所有方法</span></div><div class=\"line\"><span class=\"keyword\">type</span> User <span class=\"keyword\">interface</span> &#123;</div><div class=\"line\">    Human</div><div class=\"line\">    PrintInfo()</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 实现PrintInfo()方法</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(self * Employee)</span> <span class=\"title\">PrintInfo</span><span class=\"params\">()</span></span> &#123;</div><div class=\"line\">    fmt.Printf(<span class=\"string\">\"name:%v age:%v salary:%v gender:%v\\n\"</span>,</div><div class=\"line\">        self.name, self.age, self.salary, self.gender)</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</div><div class=\"line\">    varEmployee := Employee&#123;</div><div class=\"line\">        name:   <span class=\"string\">\"xiaomo\"</span>,</div><div class=\"line\">        age:    <span class=\"number\">50</span>,</div><div class=\"line\">        salary: <span class=\"number\">100000000</span>,</div><div class=\"line\">        gender: <span class=\"string\">\"Male\"</span>,</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"comment\">// 访问GetSalary方法</span></div><div class=\"line\">    s := varEmployee.GetSalary()</div><div class=\"line\">    fmt.Printf(<span class=\"string\">\"salary:%v\\n\"</span>, s)</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// 子集转为超集类型Human, 作为参数传入函数中</span></div><div class=\"line\">    <span class=\"keyword\">var</span> p Human = &amp;varEmployee</div><div class=\"line\">    printName(p)</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// Employee转换为User类型</span></div><div class=\"line\">    <span class=\"keyword\">var</span> u User = &amp;varEmployee</div><div class=\"line\">    <span class=\"comment\">// 这时可以调用User的GetName()方法</span></div><div class=\"line\">    fmt.Printf(<span class=\"string\">\"user_name:%v\\n\"</span>, u.GetName())</div><div class=\"line\">    <span class=\"comment\">// 调用User的PrintInfo()方法</span></div><div class=\"line\">    u.PrintInfo()</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<h3 id=\"空接口-Any类型\"><a href=\"#空接口-Any类型\" class=\"headerlink\" title=\"空接口(Any类型)\"></a>空接口(Any类型)</h3><p>golang中所有对象都满足空接口interface{}, 因此interface{}可以指向任何类型的对象。</p>\n<figure class=\"highlight golang\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> i1 <span class=\"keyword\">interface</span>&#123;&#125; = <span class=\"number\">100</span>      <span class=\"comment\">// 将int类型赋值给interface&#123;&#125;</span></div><div class=\"line\"><span class=\"keyword\">var</span> i2 <span class=\"keyword\">interface</span>&#123;&#125; = <span class=\"string\">\"ok\"</span>     <span class=\"comment\">// 将string类型赋值给interface&#123;&#125;</span></div><div class=\"line\"><span class=\"keyword\">var</span> i3 <span class=\"keyword\">interface</span>&#123;&#125; = &amp;i2      <span class=\"comment\">// 将*interface&#123;&#125;类型赋值给interface&#123;&#125;</span></div><div class=\"line\"><span class=\"keyword\">var</span> i4 <span class=\"keyword\">interface</span>&#123;&#125; = <span class=\"keyword\">struct</span>&#123; X <span class=\"keyword\">int</span> &#125;&#123;<span class=\"number\">1</span>&#125;   <span class=\"comment\">// 将struct类型赋值给interface&#123;&#125;</span></div><div class=\"line\"><span class=\"keyword\">var</span> i5 <span class=\"keyword\">interface</span>&#123;&#125; = &amp;<span class=\"keyword\">struct</span>&#123; X <span class=\"keyword\">int</span> &#125;&#123;<span class=\"number\">1</span>&#125;  <span class=\"comment\">// 将*struct类型赋值给interfae&#123;&#125;</span></div></pre></td></tr></table></figure>\n<p>当一个方法需要接受任意类型的对象时, 我们将其参数声明为interface{}空类型。如fmt库中的各种print方法就使用了这种方式:<br><figure class=\"highlight golang\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">Printf</span><span class=\"params\">(fmt <span class=\"keyword\">string</span>, args ...<span class=\"keyword\">interface</span>&#123;&#125;)</span></span></div><div class=\"line\"><span class=\"title\">func</span> <span class=\"title\">Println</span><span class=\"params\">(args ...<span class=\"keyword\">interface</span>&#123;&#125;)</span></div></pre></td></tr></table></figure></p>\n<h3 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h3><p>golang的接口和其他语言的接口区别还是比较大, 显得别具一格。<br>其他大部分语言的接口是侵入式的， 需要显式的implement；而golang是非侵入式的, 实现某个接口并不需要从该接口继承，而只需要实现该接口的所有方法。</p>\n","site":{"data":{}},"excerpt":"<p>第一次接触golang, 应该是2013那年在某沙龙听许大神在介绍golang特性。<br><br>那时候据说interface可以说是golang中最具特色、设计精妙的特性之一。<br><br>现在计划写个demo， 重新学习一下interface的设计模式。</p>\n<h3 id=\"什么是interface\"><a href=\"#什么是interface\" class=\"headerlink\" title=\"什么是interface\"></a>什么是interface</h3><ul>\n<li>在golang中, interface简单可认为是一组函数的组合, 通过interface可以定义对象的一组行为。</li>\n<li>interface定义了一组方法, 如果某个对象实现了某个interface的所有方法， 则我们可以认为这个对象实现了这个接口。</li>\n<li>由此可见, 不像C++、java， golang实现接口并不需要显式的implements。。。</li>\n</ul>","more":"<h3 id=\"interface的一些基础特性\"><a href=\"#interface的一些基础特性\" class=\"headerlink\" title=\"interface的一些基础特性\"></a>interface的一些基础特性</h3><ul>\n<li>interface类型不包含任何的成员变量, 只有方法;</li>\n<li>interface类型进行类型转换时, 默认返回的是对象拷贝; 如果需要修改源对象, 需使用指针;</li>\n<li>interface类型可以嵌套, 但不支持两个对象互相嵌套.</li>\n</ul>\n<h3 id=\"接口的定义与实现\"><a href=\"#接口的定义与实现\" class=\"headerlink\" title=\"接口的定义与实现\"></a>接口的定义与实现</h3><p>一个例子<br><figure class=\"highlight golang\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">package</span> main</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">import</span> (</div><div class=\"line\">    <span class=\"string\">\"fmt\"</span></div><div class=\"line\">)</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">type</span> Human <span class=\"keyword\">interface</span> &#123;</div><div class=\"line\">    GetName() <span class=\"keyword\">string</span></div><div class=\"line\">    GetAge() <span class=\"keyword\">int</span></div><div class=\"line\">    GetGender() <span class=\"keyword\">string</span></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 定义struct Employee</span></div><div class=\"line\"><span class=\"keyword\">type</span> Employee <span class=\"keyword\">struct</span> &#123;</div><div class=\"line\">    name   <span class=\"keyword\">string</span></div><div class=\"line\">    age    <span class=\"keyword\">int</span></div><div class=\"line\">    salary <span class=\"keyword\">int</span></div><div class=\"line\">    gender <span class=\"keyword\">string</span></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 定义struct Employee 的方法</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(self *Employee)</span> <span class=\"title\">GetName</span><span class=\"params\">()</span> <span class=\"title\">string</span></span> &#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> self.name</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(self *Employee)</span> <span class=\"title\">GetAge</span><span class=\"params\">()</span> <span class=\"title\">int</span></span> &#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> self.age</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(self *Employee)</span> <span class=\"title\">GetGender</span><span class=\"params\">()</span> <span class=\"title\">string</span></span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> self.gender</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(self *Employee)</span> <span class=\"title\">GetSalary</span><span class=\"params\">()</span> <span class=\"title\">int</span></span> &#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> self.salary</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 参数为Human类型</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">printName</span><span class=\"params\">(p Human)</span></span> &#123;</div><div class=\"line\">    name := p.GetName()</div><div class=\"line\">    fmt.Printf(<span class=\"string\">\"name:%v\\n\"</span>, name)</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</div><div class=\"line\">    varEmployee := Employee&#123;</div><div class=\"line\">        name:   <span class=\"string\">\"xiaomo\"</span>,</div><div class=\"line\">        age:    <span class=\"number\">30</span>,</div><div class=\"line\">        salary: <span class=\"number\">10000000</span>,</div><div class=\"line\">        gender: <span class=\"string\">\"Male\"</span>,</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"comment\">// 访问GetSalary方法</span></div><div class=\"line\">    s := varEmployee.GetSalary()</div><div class=\"line\">    fmt.Printf(<span class=\"string\">\"salary:%v\\n\"</span>, s)</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// 子集转为超集类型Human, 作为参数传入函数中</span></div><div class=\"line\">    <span class=\"keyword\">var</span> p Human = &amp;varEmployee</div><div class=\"line\">    printName(p)</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>演示效果:<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">root@XIAOMO:~/gopro<span class=\"comment\"># go build interface.go</span></div><div class=\"line\">root@XIAOMO:~/gopro<span class=\"comment\"># ./interface</span></div><div class=\"line\">salary:10000000</div><div class=\"line\">name:xiaomo</div></pre></td></tr></table></figure></p>\n<p>上例中, 定义了接口Human, 内部有三个方法: GetName(), GetAge(), GetGender(); <br><br>结构Employee除了实现这三个方法外, 还实现了GetSalary()方法。 因此, 对象Employee实现Human接口。</p>\n<p>Employee可以转换为Human类型, 作为形参传入printName()函数; 实现了多态调用。</p>\n<h3 id=\"接口的嵌套\"><a href=\"#接口的嵌套\" class=\"headerlink\" title=\"接口的嵌套\"></a>接口的嵌套</h3><p>一个接口可以嵌套另一个接口，根据上面的代码再修改一下， 修改部分如下:<br><figure class=\"highlight golang\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 嵌套接口Human, 那么User除了有PrintInfo()外， 也拥有了Human的所有方法</span></div><div class=\"line\"><span class=\"keyword\">type</span> User <span class=\"keyword\">interface</span> &#123;</div><div class=\"line\">    Human</div><div class=\"line\">    PrintInfo()</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 实现PrintInfo()方法</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(self * Employee)</span> <span class=\"title\">PrintInfo</span><span class=\"params\">()</span></span> &#123;</div><div class=\"line\">    fmt.Printf(<span class=\"string\">\"name:%v age:%v salary:%v gender:%v\\n\"</span>,</div><div class=\"line\">        self.name, self.age, self.salary, self.gender)</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</div><div class=\"line\">    varEmployee := Employee&#123;</div><div class=\"line\">        name:   <span class=\"string\">\"xiaomo\"</span>,</div><div class=\"line\">        age:    <span class=\"number\">50</span>,</div><div class=\"line\">        salary: <span class=\"number\">100000000</span>,</div><div class=\"line\">        gender: <span class=\"string\">\"Male\"</span>,</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"comment\">// 访问GetSalary方法</span></div><div class=\"line\">    s := varEmployee.GetSalary()</div><div class=\"line\">    fmt.Printf(<span class=\"string\">\"salary:%v\\n\"</span>, s)</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// 子集转为超集类型Human, 作为参数传入函数中</span></div><div class=\"line\">    <span class=\"keyword\">var</span> p Human = &amp;varEmployee</div><div class=\"line\">    printName(p)</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// Employee转换为User类型</span></div><div class=\"line\">    <span class=\"keyword\">var</span> u User = &amp;varEmployee</div><div class=\"line\">    <span class=\"comment\">// 这时可以调用User的GetName()方法</span></div><div class=\"line\">    fmt.Printf(<span class=\"string\">\"user_name:%v\\n\"</span>, u.GetName())</div><div class=\"line\">    <span class=\"comment\">// 调用User的PrintInfo()方法</span></div><div class=\"line\">    u.PrintInfo()</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<h3 id=\"空接口-Any类型\"><a href=\"#空接口-Any类型\" class=\"headerlink\" title=\"空接口(Any类型)\"></a>空接口(Any类型)</h3><p>golang中所有对象都满足空接口interface{}, 因此interface{}可以指向任何类型的对象。</p>\n<figure class=\"highlight golang\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> i1 <span class=\"keyword\">interface</span>&#123;&#125; = <span class=\"number\">100</span>      <span class=\"comment\">// 将int类型赋值给interface&#123;&#125;</span></div><div class=\"line\"><span class=\"keyword\">var</span> i2 <span class=\"keyword\">interface</span>&#123;&#125; = <span class=\"string\">\"ok\"</span>     <span class=\"comment\">// 将string类型赋值给interface&#123;&#125;</span></div><div class=\"line\"><span class=\"keyword\">var</span> i3 <span class=\"keyword\">interface</span>&#123;&#125; = &amp;i2      <span class=\"comment\">// 将*interface&#123;&#125;类型赋值给interface&#123;&#125;</span></div><div class=\"line\"><span class=\"keyword\">var</span> i4 <span class=\"keyword\">interface</span>&#123;&#125; = <span class=\"keyword\">struct</span>&#123; X <span class=\"keyword\">int</span> &#125;&#123;<span class=\"number\">1</span>&#125;   <span class=\"comment\">// 将struct类型赋值给interface&#123;&#125;</span></div><div class=\"line\"><span class=\"keyword\">var</span> i5 <span class=\"keyword\">interface</span>&#123;&#125; = &amp;<span class=\"keyword\">struct</span>&#123; X <span class=\"keyword\">int</span> &#125;&#123;<span class=\"number\">1</span>&#125;  <span class=\"comment\">// 将*struct类型赋值给interfae&#123;&#125;</span></div></pre></td></tr></table></figure>\n<p>当一个方法需要接受任意类型的对象时, 我们将其参数声明为interface{}空类型。如fmt库中的各种print方法就使用了这种方式:<br><figure class=\"highlight golang\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">Printf</span><span class=\"params\">(fmt <span class=\"keyword\">string</span>, args ...<span class=\"keyword\">interface</span>&#123;&#125;)</span></span></div><div class=\"line\"><span class=\"title\">func</span> <span class=\"title\">Println</span><span class=\"params\">(args ...<span class=\"keyword\">interface</span>&#123;&#125;)</span></div></pre></td></tr></table></figure></p>\n<h3 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h3><p>golang的接口和其他语言的接口区别还是比较大, 显得别具一格。<br>其他大部分语言的接口是侵入式的， 需要显式的implement；而golang是非侵入式的, 实现某个接口并不需要从该接口继承，而只需要实现该接口的所有方法。</p>"},{"title":"[mysql]python3并发访问分布式mysql表","date":"2017-08-06T07:22:43.000Z","_content":"\n### 场景说明\n假设有一个mysql表被水平切分，分散到多个host中，每个host拥有n个切分表。\n如果需要并发去访问这些表，快速得到查询结果， 应该怎么做呢？\n这里提供一种方案，利用python3的asyncio异步io库及aiomysql异步库去实现这个需求。\n<!--more-->\n\n### 代码演示\n```python\nimport logging\nimport random\nimport asyncio\nfrom aiomysql import create_pool\n\n# 假设mysql表分散在8个host, 每个host有16张子表\nTBLES = {\n    \"192.168.1.01\": \"table_000-015\", # 000-015表示该ip下的表明从table_000一直连续到table_015\n    \"192.168.1.02\": \"table_016-031\",\n    \"192.168.1.03\": \"table_032-047\",\n    \"192.168.1.04\": \"table_048-063\",\n    \"192.168.1.05\": \"table_064-079\",\n    \"192.168.1.06\": \"table_080-095\",\n    \"192.168.1.07\": \"table_096-0111\",\n    \"192.168.1.08\": \"table_112-0127\",\n}\nUSER = \"xxx\"\nPASSWD = \"xxxx\"\n\n# wrapper函数，用于捕捉异常\ndef query_wrapper(func):\n    async def wrapper(*args, **kwargs):\n        try:\n            await func(*args, **kwargs)\n        except Exception as e:\n            print(e)\n    return wrapper\n\n\n# 实际的sql访问处理函数，通过aiomysql实现异步非阻塞请求\n@query_wrapper\nasync def query_do_something(ip, db, table):\n    async with create_pool(host=ip, db=db, user=USER, password=PASSWD) as pool:\n        async with pool.get() as conn:\n            async with conn.cursor() as cur:\n                sql = (\"select xxx from {} where xxxx\")\n                await cur.execute(sql.format(table))\n                res = await cur.fetchall()\n                # then do something...\n\n\n# 生成sql访问队列, 队列的每个元素包含要对某个表进行访问的函数及参数\ndef gen_tasks():\n    tasks = []\n    for ip, tbls in TBLES.items():\n        cols = re.split('_|-', tbls)\n        tblpre = \"_\".join(cols[:-2])\n        min_num = int(cols[-2])\n        max_num = int(cols[-1])\n        for num in range(min_num, max_num+1):\n            tasks.append(\n               (query_do_something, ip, 'your_dbname', '{}_{}'.format(tblpre, num))\n            )\n\n    random.shuffle(tasks)\n    return tasks\n\n# 按批量运行sql访问请求队列\ndef run_tasks(tasks, batch_len):\n    try:\n        for idx in range(0, len(tasks), batch_len):\n            batch_tasks = tasks[idx:idx+batch_len]\n            logging.info(\"current batch, start_idx:%s len:%s\" % (idx, len(batch_tasks)))\n            for i in range(0, len(batch_tasks)):\n                l = batch_tasks[i]\n                batch_tasks[i] = asyncio.ensure_future(\n                    l[0](*l[1:])\n                )\n            loop.run_until_complete(asyncio.gather(*batch_tasks))\n    except Exception as e:\n        logging.warn(e)\n\n# main方法, 通过asyncio实现函数异步调用\ndef main():\n    loop = asyncio.get_event_loop()\n\n    tasks = gen_tasks()\n    batch_len = len(TBLES.keys()) * 5   # all up to you\n    run_tasks(tasks, batch_len)\n\n    loop.close()\n```","source":"_posts/mysql/mysql_concurrent_query.md","raw":"\n---\ntitle: '[mysql]python3并发访问分布式mysql表'\ndate: 2017-08-06 15:22:43\ntags: mysql\n---\n\n### 场景说明\n假设有一个mysql表被水平切分，分散到多个host中，每个host拥有n个切分表。\n如果需要并发去访问这些表，快速得到查询结果， 应该怎么做呢？\n这里提供一种方案，利用python3的asyncio异步io库及aiomysql异步库去实现这个需求。\n<!--more-->\n\n### 代码演示\n```python\nimport logging\nimport random\nimport asyncio\nfrom aiomysql import create_pool\n\n# 假设mysql表分散在8个host, 每个host有16张子表\nTBLES = {\n    \"192.168.1.01\": \"table_000-015\", # 000-015表示该ip下的表明从table_000一直连续到table_015\n    \"192.168.1.02\": \"table_016-031\",\n    \"192.168.1.03\": \"table_032-047\",\n    \"192.168.1.04\": \"table_048-063\",\n    \"192.168.1.05\": \"table_064-079\",\n    \"192.168.1.06\": \"table_080-095\",\n    \"192.168.1.07\": \"table_096-0111\",\n    \"192.168.1.08\": \"table_112-0127\",\n}\nUSER = \"xxx\"\nPASSWD = \"xxxx\"\n\n# wrapper函数，用于捕捉异常\ndef query_wrapper(func):\n    async def wrapper(*args, **kwargs):\n        try:\n            await func(*args, **kwargs)\n        except Exception as e:\n            print(e)\n    return wrapper\n\n\n# 实际的sql访问处理函数，通过aiomysql实现异步非阻塞请求\n@query_wrapper\nasync def query_do_something(ip, db, table):\n    async with create_pool(host=ip, db=db, user=USER, password=PASSWD) as pool:\n        async with pool.get() as conn:\n            async with conn.cursor() as cur:\n                sql = (\"select xxx from {} where xxxx\")\n                await cur.execute(sql.format(table))\n                res = await cur.fetchall()\n                # then do something...\n\n\n# 生成sql访问队列, 队列的每个元素包含要对某个表进行访问的函数及参数\ndef gen_tasks():\n    tasks = []\n    for ip, tbls in TBLES.items():\n        cols = re.split('_|-', tbls)\n        tblpre = \"_\".join(cols[:-2])\n        min_num = int(cols[-2])\n        max_num = int(cols[-1])\n        for num in range(min_num, max_num+1):\n            tasks.append(\n               (query_do_something, ip, 'your_dbname', '{}_{}'.format(tblpre, num))\n            )\n\n    random.shuffle(tasks)\n    return tasks\n\n# 按批量运行sql访问请求队列\ndef run_tasks(tasks, batch_len):\n    try:\n        for idx in range(0, len(tasks), batch_len):\n            batch_tasks = tasks[idx:idx+batch_len]\n            logging.info(\"current batch, start_idx:%s len:%s\" % (idx, len(batch_tasks)))\n            for i in range(0, len(batch_tasks)):\n                l = batch_tasks[i]\n                batch_tasks[i] = asyncio.ensure_future(\n                    l[0](*l[1:])\n                )\n            loop.run_until_complete(asyncio.gather(*batch_tasks))\n    except Exception as e:\n        logging.warn(e)\n\n# main方法, 通过asyncio实现函数异步调用\ndef main():\n    loop = asyncio.get_event_loop()\n\n    tasks = gen_tasks()\n    batch_len = len(TBLES.keys()) * 5   # all up to you\n    run_tasks(tasks, batch_len)\n\n    loop.close()\n```","slug":"mysql/mysql_concurrent_query","published":1,"updated":"2017-08-07T05:47:10.147Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj84nao4200147v4d6gcke568","content":"<h3 id=\"场景说明\"><a href=\"#场景说明\" class=\"headerlink\" title=\"场景说明\"></a>场景说明</h3><p>假设有一个mysql表被水平切分，分散到多个host中，每个host拥有n个切分表。<br>如果需要并发去访问这些表，快速得到查询结果， 应该怎么做呢？<br>这里提供一种方案，利用python3的asyncio异步io库及aiomysql异步库去实现这个需求。<br><a id=\"more\"></a></p>\n<h3 id=\"代码演示\"><a href=\"#代码演示\" class=\"headerlink\" title=\"代码演示\"></a>代码演示</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> logging</div><div class=\"line\"><span class=\"keyword\">import</span> random</div><div class=\"line\"><span class=\"keyword\">import</span> asyncio</div><div class=\"line\"><span class=\"keyword\">from</span> aiomysql <span class=\"keyword\">import</span> create_pool</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># 假设mysql表分散在8个host, 每个host有16张子表</span></div><div class=\"line\">TBLES = &#123;</div><div class=\"line\">    <span class=\"string\">\"192.168.1.01\"</span>: <span class=\"string\">\"table_000-015\"</span>, <span class=\"comment\"># 000-015表示该ip下的表明从table_000一直连续到table_015</span></div><div class=\"line\">    <span class=\"string\">\"192.168.1.02\"</span>: <span class=\"string\">\"table_016-031\"</span>,</div><div class=\"line\">    <span class=\"string\">\"192.168.1.03\"</span>: <span class=\"string\">\"table_032-047\"</span>,</div><div class=\"line\">    <span class=\"string\">\"192.168.1.04\"</span>: <span class=\"string\">\"table_048-063\"</span>,</div><div class=\"line\">    <span class=\"string\">\"192.168.1.05\"</span>: <span class=\"string\">\"table_064-079\"</span>,</div><div class=\"line\">    <span class=\"string\">\"192.168.1.06\"</span>: <span class=\"string\">\"table_080-095\"</span>,</div><div class=\"line\">    <span class=\"string\">\"192.168.1.07\"</span>: <span class=\"string\">\"table_096-0111\"</span>,</div><div class=\"line\">    <span class=\"string\">\"192.168.1.08\"</span>: <span class=\"string\">\"table_112-0127\"</span>,</div><div class=\"line\">&#125;</div><div class=\"line\">USER = <span class=\"string\">\"xxx\"</span></div><div class=\"line\">PASSWD = <span class=\"string\">\"xxxx\"</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># wrapper函数，用于捕捉异常</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">query_wrapper</span><span class=\"params\">(func)</span>:</span></div><div class=\"line\">    <span class=\"keyword\">async</span> <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">wrapper</span><span class=\"params\">(*args, **kwargs)</span>:</span></div><div class=\"line\">        <span class=\"keyword\">try</span>:</div><div class=\"line\">            <span class=\"keyword\">await</span> func(*args, **kwargs)</div><div class=\"line\">        <span class=\"keyword\">except</span> Exception <span class=\"keyword\">as</span> e:</div><div class=\"line\">            print(e)</div><div class=\"line\">    <span class=\"keyword\">return</span> wrapper</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># 实际的sql访问处理函数，通过aiomysql实现异步非阻塞请求</span></div><div class=\"line\"><span class=\"meta\">@query_wrapper</span></div><div class=\"line\"><span class=\"keyword\">async</span> <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">query_do_something</span><span class=\"params\">(ip, db, table)</span>:</span></div><div class=\"line\">    <span class=\"keyword\">async</span> <span class=\"keyword\">with</span> create_pool(host=ip, db=db, user=USER, password=PASSWD) <span class=\"keyword\">as</span> pool:</div><div class=\"line\">        <span class=\"keyword\">async</span> <span class=\"keyword\">with</span> pool.get() <span class=\"keyword\">as</span> conn:</div><div class=\"line\">            <span class=\"keyword\">async</span> <span class=\"keyword\">with</span> conn.cursor() <span class=\"keyword\">as</span> cur:</div><div class=\"line\">                sql = (<span class=\"string\">\"select xxx from &#123;&#125; where xxxx\"</span>)</div><div class=\"line\">                <span class=\"keyword\">await</span> cur.execute(sql.format(table))</div><div class=\"line\">                res = <span class=\"keyword\">await</span> cur.fetchall()</div><div class=\"line\">                <span class=\"comment\"># then do something...</span></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># 生成sql访问队列, 队列的每个元素包含要对某个表进行访问的函数及参数</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">gen_tasks</span><span class=\"params\">()</span>:</span></div><div class=\"line\">    tasks = []</div><div class=\"line\">    <span class=\"keyword\">for</span> ip, tbls <span class=\"keyword\">in</span> TBLES.items():</div><div class=\"line\">        cols = re.split(<span class=\"string\">'_|-'</span>, tbls)</div><div class=\"line\">        tblpre = <span class=\"string\">\"_\"</span>.join(cols[:<span class=\"number\">-2</span>])</div><div class=\"line\">        min_num = int(cols[<span class=\"number\">-2</span>])</div><div class=\"line\">        max_num = int(cols[<span class=\"number\">-1</span>])</div><div class=\"line\">        <span class=\"keyword\">for</span> num <span class=\"keyword\">in</span> range(min_num, max_num+<span class=\"number\">1</span>):</div><div class=\"line\">            tasks.append(</div><div class=\"line\">               (query_do_something, ip, <span class=\"string\">'your_dbname'</span>, <span class=\"string\">'&#123;&#125;_&#123;&#125;'</span>.format(tblpre, num))</div><div class=\"line\">            )</div><div class=\"line\"></div><div class=\"line\">    random.shuffle(tasks)</div><div class=\"line\">    <span class=\"keyword\">return</span> tasks</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># 按批量运行sql访问请求队列</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">run_tasks</span><span class=\"params\">(tasks, batch_len)</span>:</span></div><div class=\"line\">    <span class=\"keyword\">try</span>:</div><div class=\"line\">        <span class=\"keyword\">for</span> idx <span class=\"keyword\">in</span> range(<span class=\"number\">0</span>, len(tasks), batch_len):</div><div class=\"line\">            batch_tasks = tasks[idx:idx+batch_len]</div><div class=\"line\">            logging.info(<span class=\"string\">\"current batch, start_idx:%s len:%s\"</span> % (idx, len(batch_tasks)))</div><div class=\"line\">            <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(<span class=\"number\">0</span>, len(batch_tasks)):</div><div class=\"line\">                l = batch_tasks[i]</div><div class=\"line\">                batch_tasks[i] = asyncio.ensure_future(</div><div class=\"line\">                    l[<span class=\"number\">0</span>](*l[<span class=\"number\">1</span>:])</div><div class=\"line\">                )</div><div class=\"line\">            loop.run_until_complete(asyncio.gather(*batch_tasks))</div><div class=\"line\">    <span class=\"keyword\">except</span> Exception <span class=\"keyword\">as</span> e:</div><div class=\"line\">        logging.warn(e)</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># main方法, 通过asyncio实现函数异步调用</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">main</span><span class=\"params\">()</span>:</span></div><div class=\"line\">    loop = asyncio.get_event_loop()</div><div class=\"line\"></div><div class=\"line\">    tasks = gen_tasks()</div><div class=\"line\">    batch_len = len(TBLES.keys()) * <span class=\"number\">5</span>   <span class=\"comment\"># all up to you</span></div><div class=\"line\">    run_tasks(tasks, batch_len)</div><div class=\"line\"></div><div class=\"line\">    loop.close()</div></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"<h3 id=\"场景说明\"><a href=\"#场景说明\" class=\"headerlink\" title=\"场景说明\"></a>场景说明</h3><p>假设有一个mysql表被水平切分，分散到多个host中，每个host拥有n个切分表。<br>如果需要并发去访问这些表，快速得到查询结果， 应该怎么做呢？<br>这里提供一种方案，利用python3的asyncio异步io库及aiomysql异步库去实现这个需求。<br>","more":"</p>\n<h3 id=\"代码演示\"><a href=\"#代码演示\" class=\"headerlink\" title=\"代码演示\"></a>代码演示</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> logging</div><div class=\"line\"><span class=\"keyword\">import</span> random</div><div class=\"line\"><span class=\"keyword\">import</span> asyncio</div><div class=\"line\"><span class=\"keyword\">from</span> aiomysql <span class=\"keyword\">import</span> create_pool</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># 假设mysql表分散在8个host, 每个host有16张子表</span></div><div class=\"line\">TBLES = &#123;</div><div class=\"line\">    <span class=\"string\">\"192.168.1.01\"</span>: <span class=\"string\">\"table_000-015\"</span>, <span class=\"comment\"># 000-015表示该ip下的表明从table_000一直连续到table_015</span></div><div class=\"line\">    <span class=\"string\">\"192.168.1.02\"</span>: <span class=\"string\">\"table_016-031\"</span>,</div><div class=\"line\">    <span class=\"string\">\"192.168.1.03\"</span>: <span class=\"string\">\"table_032-047\"</span>,</div><div class=\"line\">    <span class=\"string\">\"192.168.1.04\"</span>: <span class=\"string\">\"table_048-063\"</span>,</div><div class=\"line\">    <span class=\"string\">\"192.168.1.05\"</span>: <span class=\"string\">\"table_064-079\"</span>,</div><div class=\"line\">    <span class=\"string\">\"192.168.1.06\"</span>: <span class=\"string\">\"table_080-095\"</span>,</div><div class=\"line\">    <span class=\"string\">\"192.168.1.07\"</span>: <span class=\"string\">\"table_096-0111\"</span>,</div><div class=\"line\">    <span class=\"string\">\"192.168.1.08\"</span>: <span class=\"string\">\"table_112-0127\"</span>,</div><div class=\"line\">&#125;</div><div class=\"line\">USER = <span class=\"string\">\"xxx\"</span></div><div class=\"line\">PASSWD = <span class=\"string\">\"xxxx\"</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># wrapper函数，用于捕捉异常</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">query_wrapper</span><span class=\"params\">(func)</span>:</span></div><div class=\"line\">    <span class=\"keyword\">async</span> <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">wrapper</span><span class=\"params\">(*args, **kwargs)</span>:</span></div><div class=\"line\">        <span class=\"keyword\">try</span>:</div><div class=\"line\">            <span class=\"keyword\">await</span> func(*args, **kwargs)</div><div class=\"line\">        <span class=\"keyword\">except</span> Exception <span class=\"keyword\">as</span> e:</div><div class=\"line\">            print(e)</div><div class=\"line\">    <span class=\"keyword\">return</span> wrapper</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># 实际的sql访问处理函数，通过aiomysql实现异步非阻塞请求</span></div><div class=\"line\"><span class=\"meta\">@query_wrapper</span></div><div class=\"line\"><span class=\"keyword\">async</span> <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">query_do_something</span><span class=\"params\">(ip, db, table)</span>:</span></div><div class=\"line\">    <span class=\"keyword\">async</span> <span class=\"keyword\">with</span> create_pool(host=ip, db=db, user=USER, password=PASSWD) <span class=\"keyword\">as</span> pool:</div><div class=\"line\">        <span class=\"keyword\">async</span> <span class=\"keyword\">with</span> pool.get() <span class=\"keyword\">as</span> conn:</div><div class=\"line\">            <span class=\"keyword\">async</span> <span class=\"keyword\">with</span> conn.cursor() <span class=\"keyword\">as</span> cur:</div><div class=\"line\">                sql = (<span class=\"string\">\"select xxx from &#123;&#125; where xxxx\"</span>)</div><div class=\"line\">                <span class=\"keyword\">await</span> cur.execute(sql.format(table))</div><div class=\"line\">                res = <span class=\"keyword\">await</span> cur.fetchall()</div><div class=\"line\">                <span class=\"comment\"># then do something...</span></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># 生成sql访问队列, 队列的每个元素包含要对某个表进行访问的函数及参数</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">gen_tasks</span><span class=\"params\">()</span>:</span></div><div class=\"line\">    tasks = []</div><div class=\"line\">    <span class=\"keyword\">for</span> ip, tbls <span class=\"keyword\">in</span> TBLES.items():</div><div class=\"line\">        cols = re.split(<span class=\"string\">'_|-'</span>, tbls)</div><div class=\"line\">        tblpre = <span class=\"string\">\"_\"</span>.join(cols[:<span class=\"number\">-2</span>])</div><div class=\"line\">        min_num = int(cols[<span class=\"number\">-2</span>])</div><div class=\"line\">        max_num = int(cols[<span class=\"number\">-1</span>])</div><div class=\"line\">        <span class=\"keyword\">for</span> num <span class=\"keyword\">in</span> range(min_num, max_num+<span class=\"number\">1</span>):</div><div class=\"line\">            tasks.append(</div><div class=\"line\">               (query_do_something, ip, <span class=\"string\">'your_dbname'</span>, <span class=\"string\">'&#123;&#125;_&#123;&#125;'</span>.format(tblpre, num))</div><div class=\"line\">            )</div><div class=\"line\"></div><div class=\"line\">    random.shuffle(tasks)</div><div class=\"line\">    <span class=\"keyword\">return</span> tasks</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># 按批量运行sql访问请求队列</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">run_tasks</span><span class=\"params\">(tasks, batch_len)</span>:</span></div><div class=\"line\">    <span class=\"keyword\">try</span>:</div><div class=\"line\">        <span class=\"keyword\">for</span> idx <span class=\"keyword\">in</span> range(<span class=\"number\">0</span>, len(tasks), batch_len):</div><div class=\"line\">            batch_tasks = tasks[idx:idx+batch_len]</div><div class=\"line\">            logging.info(<span class=\"string\">\"current batch, start_idx:%s len:%s\"</span> % (idx, len(batch_tasks)))</div><div class=\"line\">            <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(<span class=\"number\">0</span>, len(batch_tasks)):</div><div class=\"line\">                l = batch_tasks[i]</div><div class=\"line\">                batch_tasks[i] = asyncio.ensure_future(</div><div class=\"line\">                    l[<span class=\"number\">0</span>](*l[<span class=\"number\">1</span>:])</div><div class=\"line\">                )</div><div class=\"line\">            loop.run_until_complete(asyncio.gather(*batch_tasks))</div><div class=\"line\">    <span class=\"keyword\">except</span> Exception <span class=\"keyword\">as</span> e:</div><div class=\"line\">        logging.warn(e)</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># main方法, 通过asyncio实现函数异步调用</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">main</span><span class=\"params\">()</span>:</span></div><div class=\"line\">    loop = asyncio.get_event_loop()</div><div class=\"line\"></div><div class=\"line\">    tasks = gen_tasks()</div><div class=\"line\">    batch_len = len(TBLES.keys()) * <span class=\"number\">5</span>   <span class=\"comment\"># all up to you</span></div><div class=\"line\">    run_tasks(tasks, batch_len)</div><div class=\"line\"></div><div class=\"line\">    loop.close()</div></pre></td></tr></table></figure>"},{"title":"[golang]指针类型","date":"2016-04-05T11:35:16.000Z","_content":"\n### 关于golang指针类型\nGolang保留了指针类型,支持指针操作。<br>\n可以使用操作符&取变量地址，使用操作符*通过指针变量间接访问目标对象。<br>\nunsafe.Pointer可以与任意指针类型转换, 可以将unsafe.Pointer转换为uintptr,然后做指针运算。<br>\nuintptr类型可以转换为整数。\n<!--more-->\n### 指针使用示例\n\n```golang\npackage main\n\nimport (\n    \"fmt\"\n    \"unsafe\"\n)\n\ntype User struct {\n    Id int\n    Name string\n}\n\nfunc main(){\n    i := 10\n    var p *int = &i  //取地址\n    fmt.Println(*p) // 取值\n\n    user := &User{1, \"xiaomo\"}\n    user.Id = 100  //直接对指针对象的成员赋值\n    fmt.Println(user)\n\n    user2 := *user  //拷贝对象\n    user2.Id = 200\n    user2.Name = \"xiaomomo\"\n    fmt.Println(user, user2)\n\n    up := unsafe.Pointer(p)  // 转为通用指针类型\n    uptr := uintptr(up)      // 转为uintptr指针类型\n    fmt.Println(up, uptr)\n}\n```\n\n###运行效果如下:\n```bash\nroot@XIAOMO:~/gopro# go build main.go\nroot@XIAOMO:~/gopro# ./main\n10\n&{100 xiaomo}\n&{100 xiaomo} {200 xiaomomo}\n0xc210000070 833492090992\n```\n","source":"_posts/golang/golang_pointer.md","raw":"---\ntitle: '[golang]指针类型'\ndate: 2016-04-05 19:35:16\ntags: golang\n---\n\n### 关于golang指针类型\nGolang保留了指针类型,支持指针操作。<br>\n可以使用操作符&取变量地址，使用操作符*通过指针变量间接访问目标对象。<br>\nunsafe.Pointer可以与任意指针类型转换, 可以将unsafe.Pointer转换为uintptr,然后做指针运算。<br>\nuintptr类型可以转换为整数。\n<!--more-->\n### 指针使用示例\n\n```golang\npackage main\n\nimport (\n    \"fmt\"\n    \"unsafe\"\n)\n\ntype User struct {\n    Id int\n    Name string\n}\n\nfunc main(){\n    i := 10\n    var p *int = &i  //取地址\n    fmt.Println(*p) // 取值\n\n    user := &User{1, \"xiaomo\"}\n    user.Id = 100  //直接对指针对象的成员赋值\n    fmt.Println(user)\n\n    user2 := *user  //拷贝对象\n    user2.Id = 200\n    user2.Name = \"xiaomomo\"\n    fmt.Println(user, user2)\n\n    up := unsafe.Pointer(p)  // 转为通用指针类型\n    uptr := uintptr(up)      // 转为uintptr指针类型\n    fmt.Println(up, uptr)\n}\n```\n\n###运行效果如下:\n```bash\nroot@XIAOMO:~/gopro# go build main.go\nroot@XIAOMO:~/gopro# ./main\n10\n&{100 xiaomo}\n&{100 xiaomo} {200 xiaomomo}\n0xc210000070 833492090992\n```\n","slug":"golang/golang_pointer","published":1,"updated":"2017-08-07T02:58:37.447Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj84nao4400167v4dbyjl4cod","content":"<h3 id=\"关于golang指针类型\"><a href=\"#关于golang指针类型\" class=\"headerlink\" title=\"关于golang指针类型\"></a>关于golang指针类型</h3><p>Golang保留了指针类型,支持指针操作。<br><br>可以使用操作符&amp;取变量地址，使用操作符*通过指针变量间接访问目标对象。<br><br>unsafe.Pointer可以与任意指针类型转换, 可以将unsafe.Pointer转换为uintptr,然后做指针运算。<br><br>uintptr类型可以转换为整数。<br><a id=\"more\"></a></p>\n<h3 id=\"指针使用示例\"><a href=\"#指针使用示例\" class=\"headerlink\" title=\"指针使用示例\"></a>指针使用示例</h3><figure class=\"highlight golang\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">package</span> main</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">import</span> (</div><div class=\"line\">    <span class=\"string\">\"fmt\"</span></div><div class=\"line\">    <span class=\"string\">\"unsafe\"</span></div><div class=\"line\">)</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">type</span> User <span class=\"keyword\">struct</span> &#123;</div><div class=\"line\">    Id <span class=\"keyword\">int</span></div><div class=\"line\">    Name <span class=\"keyword\">string</span></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">    i := <span class=\"number\">10</span></div><div class=\"line\">    <span class=\"keyword\">var</span> p *<span class=\"keyword\">int</span> = &amp;i  <span class=\"comment\">//取地址</span></div><div class=\"line\">    fmt.Println(*p) <span class=\"comment\">// 取值</span></div><div class=\"line\"></div><div class=\"line\">    user := &amp;User&#123;<span class=\"number\">1</span>, <span class=\"string\">\"xiaomo\"</span>&#125;</div><div class=\"line\">    user.Id = <span class=\"number\">100</span>  <span class=\"comment\">//直接对指针对象的成员赋值</span></div><div class=\"line\">    fmt.Println(user)</div><div class=\"line\"></div><div class=\"line\">    user2 := *user  <span class=\"comment\">//拷贝对象</span></div><div class=\"line\">    user2.Id = <span class=\"number\">200</span></div><div class=\"line\">    user2.Name = <span class=\"string\">\"xiaomomo\"</span></div><div class=\"line\">    fmt.Println(user, user2)</div><div class=\"line\"></div><div class=\"line\">    up := unsafe.Pointer(p)  <span class=\"comment\">// 转为通用指针类型</span></div><div class=\"line\">    uptr := <span class=\"keyword\">uintptr</span>(up)      <span class=\"comment\">// 转为uintptr指针类型</span></div><div class=\"line\">    fmt.Println(up, uptr)</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>###运行效果如下:<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">root@XIAOMO:~/gopro<span class=\"comment\"># go build main.go</span></div><div class=\"line\">root@XIAOMO:~/gopro<span class=\"comment\"># ./main</span></div><div class=\"line\">10</div><div class=\"line\">&amp;&#123;100 xiaomo&#125;</div><div class=\"line\">&amp;&#123;100 xiaomo&#125; &#123;200 xiaomomo&#125;</div><div class=\"line\">0xc210000070 833492090992</div></pre></td></tr></table></figure></p>\n","site":{"data":{}},"excerpt":"<h3 id=\"关于golang指针类型\"><a href=\"#关于golang指针类型\" class=\"headerlink\" title=\"关于golang指针类型\"></a>关于golang指针类型</h3><p>Golang保留了指针类型,支持指针操作。<br><br>可以使用操作符&amp;取变量地址，使用操作符*通过指针变量间接访问目标对象。<br><br>unsafe.Pointer可以与任意指针类型转换, 可以将unsafe.Pointer转换为uintptr,然后做指针运算。<br><br>uintptr类型可以转换为整数。<br>","more":"</p>\n<h3 id=\"指针使用示例\"><a href=\"#指针使用示例\" class=\"headerlink\" title=\"指针使用示例\"></a>指针使用示例</h3><figure class=\"highlight golang\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">package</span> main</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">import</span> (</div><div class=\"line\">    <span class=\"string\">\"fmt\"</span></div><div class=\"line\">    <span class=\"string\">\"unsafe\"</span></div><div class=\"line\">)</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">type</span> User <span class=\"keyword\">struct</span> &#123;</div><div class=\"line\">    Id <span class=\"keyword\">int</span></div><div class=\"line\">    Name <span class=\"keyword\">string</span></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">    i := <span class=\"number\">10</span></div><div class=\"line\">    <span class=\"keyword\">var</span> p *<span class=\"keyword\">int</span> = &amp;i  <span class=\"comment\">//取地址</span></div><div class=\"line\">    fmt.Println(*p) <span class=\"comment\">// 取值</span></div><div class=\"line\"></div><div class=\"line\">    user := &amp;User&#123;<span class=\"number\">1</span>, <span class=\"string\">\"xiaomo\"</span>&#125;</div><div class=\"line\">    user.Id = <span class=\"number\">100</span>  <span class=\"comment\">//直接对指针对象的成员赋值</span></div><div class=\"line\">    fmt.Println(user)</div><div class=\"line\"></div><div class=\"line\">    user2 := *user  <span class=\"comment\">//拷贝对象</span></div><div class=\"line\">    user2.Id = <span class=\"number\">200</span></div><div class=\"line\">    user2.Name = <span class=\"string\">\"xiaomomo\"</span></div><div class=\"line\">    fmt.Println(user, user2)</div><div class=\"line\"></div><div class=\"line\">    up := unsafe.Pointer(p)  <span class=\"comment\">// 转为通用指针类型</span></div><div class=\"line\">    uptr := <span class=\"keyword\">uintptr</span>(up)      <span class=\"comment\">// 转为uintptr指针类型</span></div><div class=\"line\">    fmt.Println(up, uptr)</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>###运行效果如下:<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">root@XIAOMO:~/gopro<span class=\"comment\"># go build main.go</span></div><div class=\"line\">root@XIAOMO:~/gopro<span class=\"comment\"># ./main</span></div><div class=\"line\">10</div><div class=\"line\">&amp;&#123;100 xiaomo&#125;</div><div class=\"line\">&amp;&#123;100 xiaomo&#125; &#123;200 xiaomomo&#125;</div><div class=\"line\">0xc210000070 833492090992</div></pre></td></tr></table></figure></p>"},{"title":"[python]map function","date":"2016-04-05T15:19:29.000Z","_content":"\n### 1. 内建方法map\n内建map方法可以通过一个序列的方式来实现函数之间的映射, 并且串行执行。如:\n```python\nimport time\nfrom datetime import datetime\n\ndef add(x, y):\n    print datetime.now(), \"enter add func...\"\n    time.sleep(2)\n    print datetime.now(), \"leave add func...\"\n    return x+y\n\nmap(add, [1,2,3], [4,5,6])\n```\n运行效果:\n```bash\n2016-04-05 15:01:49.382314 enter add func...\n2016-04-05 15:01:51.383387 leave add func...\n2016-04-05 15:01:51.383471 enter add func...\n2016-04-05 15:01:53.385584 leave add func...\n2016-04-05 15:01:53.385676 enter add func...\n2016-04-05 15:01:55.387388 leave add func...\n[5, 7, 9]\n```\n由上可见, 调用map, 相当于顺序调用了add(1,4), add(2,5)， add(3,6)方法; 一行代码实现了方法的迭代调用, 简单快捷。<br>那如果再优化一下，实现并行调用add方法， 应该怎么做呢？在python里也好实现, 利用multiprocessing模块就可以。\n\n<!--more-->\n### 2. multiprocessing模块与map方法\n```python\nimport time\nfrom datetime import datetime\nfrom multiprocessing.dummy import Pool as ThreadPool\nfrom functools import partial\n\n\ndef add(x, y):\n    print datetime.now(), \"enter add func...\"\n    time.sleep(2)\n    print datetime.now(), \"leave add func...\"\n    return x+y\n\n\ndef add_wrap(args):\n    return add(*args)\n\n\nif __name__ == \"__main__\":\n    pool = ThreadPool(4) # 池的大小为4\n    print pool.map(add_wrap, [(1,2),(3,4),(5,6)])\n    #close the pool and wait for the work to finish\n    pool.close()\n    pool.join()\n```\n运行效果:\n```bash\n2016-04-05 15:10:23.690059 enter add func...\n2016-04-05 15:10:23.690406 enter add func...\n2016-04-05 15:10:23.690906 enter add func...\n2016-04-05 15:10:25.693250 leave add func...\n2016-04-05 15:10:25.693409 leave add func...\n2016-04-05 15:10:25.693458 leave add func...\n[3, 7, 11]\n```\n由上可以见， 我们已经实现了并行执行add方法\n\n### 3. 关于multiprocessing中pool的大小与性能\n```python\nfrom multiprocessing import Pool\nfrom multiprocessing.dummy import Pool as ThreadPool\n```\n以上Pool和ThreadPool模块, 一个基于进程工作, 一个基于线程工作。\n<br>一般来说, 使用进程池(multiprocessing pool)来执行CPU密集型的任务, 这样可以利用到多核的好处， 理论上(池越大)核越多速度越快; <br>使用线程池(threading)来处理IO型任务, 则有个最佳线程池大小, 要根据实际情况来调节这个池的size(线程过多时, 切换线程的开销将严重影响性能)。\n","source":"_posts/python/python-map-function.md","raw":"---\ntitle: '[python]map function'\ndate: 2016-04-05 23:19:29\ntags: python\n---\n\n### 1. 内建方法map\n内建map方法可以通过一个序列的方式来实现函数之间的映射, 并且串行执行。如:\n```python\nimport time\nfrom datetime import datetime\n\ndef add(x, y):\n    print datetime.now(), \"enter add func...\"\n    time.sleep(2)\n    print datetime.now(), \"leave add func...\"\n    return x+y\n\nmap(add, [1,2,3], [4,5,6])\n```\n运行效果:\n```bash\n2016-04-05 15:01:49.382314 enter add func...\n2016-04-05 15:01:51.383387 leave add func...\n2016-04-05 15:01:51.383471 enter add func...\n2016-04-05 15:01:53.385584 leave add func...\n2016-04-05 15:01:53.385676 enter add func...\n2016-04-05 15:01:55.387388 leave add func...\n[5, 7, 9]\n```\n由上可见, 调用map, 相当于顺序调用了add(1,4), add(2,5)， add(3,6)方法; 一行代码实现了方法的迭代调用, 简单快捷。<br>那如果再优化一下，实现并行调用add方法， 应该怎么做呢？在python里也好实现, 利用multiprocessing模块就可以。\n\n<!--more-->\n### 2. multiprocessing模块与map方法\n```python\nimport time\nfrom datetime import datetime\nfrom multiprocessing.dummy import Pool as ThreadPool\nfrom functools import partial\n\n\ndef add(x, y):\n    print datetime.now(), \"enter add func...\"\n    time.sleep(2)\n    print datetime.now(), \"leave add func...\"\n    return x+y\n\n\ndef add_wrap(args):\n    return add(*args)\n\n\nif __name__ == \"__main__\":\n    pool = ThreadPool(4) # 池的大小为4\n    print pool.map(add_wrap, [(1,2),(3,4),(5,6)])\n    #close the pool and wait for the work to finish\n    pool.close()\n    pool.join()\n```\n运行效果:\n```bash\n2016-04-05 15:10:23.690059 enter add func...\n2016-04-05 15:10:23.690406 enter add func...\n2016-04-05 15:10:23.690906 enter add func...\n2016-04-05 15:10:25.693250 leave add func...\n2016-04-05 15:10:25.693409 leave add func...\n2016-04-05 15:10:25.693458 leave add func...\n[3, 7, 11]\n```\n由上可以见， 我们已经实现了并行执行add方法\n\n### 3. 关于multiprocessing中pool的大小与性能\n```python\nfrom multiprocessing import Pool\nfrom multiprocessing.dummy import Pool as ThreadPool\n```\n以上Pool和ThreadPool模块, 一个基于进程工作, 一个基于线程工作。\n<br>一般来说, 使用进程池(multiprocessing pool)来执行CPU密集型的任务, 这样可以利用到多核的好处， 理论上(池越大)核越多速度越快; <br>使用线程池(threading)来处理IO型任务, 则有个最佳线程池大小, 要根据实际情况来调节这个池的size(线程过多时, 切换线程的开销将严重影响性能)。\n","slug":"python/python-map-function","published":1,"updated":"2017-08-10T15:23:45.225Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj84nao4900197v4dhurskvux","content":"<h3 id=\"1-内建方法map\"><a href=\"#1-内建方法map\" class=\"headerlink\" title=\"1. 内建方法map\"></a>1. 内建方法map</h3><p>内建map方法可以通过一个序列的方式来实现函数之间的映射, 并且串行执行。如:<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> time</div><div class=\"line\"><span class=\"keyword\">from</span> datetime <span class=\"keyword\">import</span> datetime</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">add</span><span class=\"params\">(x, y)</span>:</span></div><div class=\"line\">    <span class=\"keyword\">print</span> datetime.now(), <span class=\"string\">\"enter add func...\"</span></div><div class=\"line\">    time.sleep(<span class=\"number\">2</span>)</div><div class=\"line\">    <span class=\"keyword\">print</span> datetime.now(), <span class=\"string\">\"leave add func...\"</span></div><div class=\"line\">    <span class=\"keyword\">return</span> x+y</div><div class=\"line\"></div><div class=\"line\">map(add, [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>], [<span class=\"number\">4</span>,<span class=\"number\">5</span>,<span class=\"number\">6</span>])</div></pre></td></tr></table></figure></p>\n<p>运行效果:<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">2016-04-05 15:01:49.382314 enter add func...</div><div class=\"line\">2016-04-05 15:01:51.383387 leave add func...</div><div class=\"line\">2016-04-05 15:01:51.383471 enter add func...</div><div class=\"line\">2016-04-05 15:01:53.385584 leave add func...</div><div class=\"line\">2016-04-05 15:01:53.385676 enter add func...</div><div class=\"line\">2016-04-05 15:01:55.387388 leave add func...</div><div class=\"line\">[5, 7, 9]</div></pre></td></tr></table></figure></p>\n<p>由上可见, 调用map, 相当于顺序调用了add(1,4), add(2,5)， add(3,6)方法; 一行代码实现了方法的迭代调用, 简单快捷。<br>那如果再优化一下，实现并行调用add方法， 应该怎么做呢？在python里也好实现, 利用multiprocessing模块就可以。</p>\n<a id=\"more\"></a>\n<h3 id=\"2-multiprocessing模块与map方法\"><a href=\"#2-multiprocessing模块与map方法\" class=\"headerlink\" title=\"2. multiprocessing模块与map方法\"></a>2. multiprocessing模块与map方法</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> time</div><div class=\"line\"><span class=\"keyword\">from</span> datetime <span class=\"keyword\">import</span> datetime</div><div class=\"line\"><span class=\"keyword\">from</span> multiprocessing.dummy <span class=\"keyword\">import</span> Pool <span class=\"keyword\">as</span> ThreadPool</div><div class=\"line\"><span class=\"keyword\">from</span> functools <span class=\"keyword\">import</span> partial</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">add</span><span class=\"params\">(x, y)</span>:</span></div><div class=\"line\">    <span class=\"keyword\">print</span> datetime.now(), <span class=\"string\">\"enter add func...\"</span></div><div class=\"line\">    time.sleep(<span class=\"number\">2</span>)</div><div class=\"line\">    <span class=\"keyword\">print</span> datetime.now(), <span class=\"string\">\"leave add func...\"</span></div><div class=\"line\">    <span class=\"keyword\">return</span> x+y</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">add_wrap</span><span class=\"params\">(args)</span>:</span></div><div class=\"line\">    <span class=\"keyword\">return</span> add(*args)</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">\"__main__\"</span>:</div><div class=\"line\">    pool = ThreadPool(<span class=\"number\">4</span>) <span class=\"comment\"># 池的大小为4</span></div><div class=\"line\">    <span class=\"keyword\">print</span> pool.map(add_wrap, [(<span class=\"number\">1</span>,<span class=\"number\">2</span>),(<span class=\"number\">3</span>,<span class=\"number\">4</span>),(<span class=\"number\">5</span>,<span class=\"number\">6</span>)])</div><div class=\"line\">    <span class=\"comment\">#close the pool and wait for the work to finish</span></div><div class=\"line\">    pool.close()</div><div class=\"line\">    pool.join()</div></pre></td></tr></table></figure>\n<p>运行效果:<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">2016-04-05 15:10:23.690059 enter add func...</div><div class=\"line\">2016-04-05 15:10:23.690406 enter add func...</div><div class=\"line\">2016-04-05 15:10:23.690906 enter add func...</div><div class=\"line\">2016-04-05 15:10:25.693250 leave add func...</div><div class=\"line\">2016-04-05 15:10:25.693409 leave add func...</div><div class=\"line\">2016-04-05 15:10:25.693458 leave add func...</div><div class=\"line\">[3, 7, 11]</div></pre></td></tr></table></figure></p>\n<p>由上可以见， 我们已经实现了并行执行add方法</p>\n<h3 id=\"3-关于multiprocessing中pool的大小与性能\"><a href=\"#3-关于multiprocessing中pool的大小与性能\" class=\"headerlink\" title=\"3. 关于multiprocessing中pool的大小与性能\"></a>3. 关于multiprocessing中pool的大小与性能</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">from</span> multiprocessing <span class=\"keyword\">import</span> Pool</div><div class=\"line\"><span class=\"keyword\">from</span> multiprocessing.dummy <span class=\"keyword\">import</span> Pool <span class=\"keyword\">as</span> ThreadPool</div></pre></td></tr></table></figure>\n<p>以上Pool和ThreadPool模块, 一个基于进程工作, 一个基于线程工作。<br><br>一般来说, 使用进程池(multiprocessing pool)来执行CPU密集型的任务, 这样可以利用到多核的好处， 理论上(池越大)核越多速度越快; <br>使用线程池(threading)来处理IO型任务, 则有个最佳线程池大小, 要根据实际情况来调节这个池的size(线程过多时, 切换线程的开销将严重影响性能)。</p>\n","site":{"data":{}},"excerpt":"<h3 id=\"1-内建方法map\"><a href=\"#1-内建方法map\" class=\"headerlink\" title=\"1. 内建方法map\"></a>1. 内建方法map</h3><p>内建map方法可以通过一个序列的方式来实现函数之间的映射, 并且串行执行。如:<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> time</div><div class=\"line\"><span class=\"keyword\">from</span> datetime <span class=\"keyword\">import</span> datetime</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">add</span><span class=\"params\">(x, y)</span>:</span></div><div class=\"line\">    <span class=\"keyword\">print</span> datetime.now(), <span class=\"string\">\"enter add func...\"</span></div><div class=\"line\">    time.sleep(<span class=\"number\">2</span>)</div><div class=\"line\">    <span class=\"keyword\">print</span> datetime.now(), <span class=\"string\">\"leave add func...\"</span></div><div class=\"line\">    <span class=\"keyword\">return</span> x+y</div><div class=\"line\"></div><div class=\"line\">map(add, [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>], [<span class=\"number\">4</span>,<span class=\"number\">5</span>,<span class=\"number\">6</span>])</div></pre></td></tr></table></figure></p>\n<p>运行效果:<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">2016-04-05 15:01:49.382314 enter add func...</div><div class=\"line\">2016-04-05 15:01:51.383387 leave add func...</div><div class=\"line\">2016-04-05 15:01:51.383471 enter add func...</div><div class=\"line\">2016-04-05 15:01:53.385584 leave add func...</div><div class=\"line\">2016-04-05 15:01:53.385676 enter add func...</div><div class=\"line\">2016-04-05 15:01:55.387388 leave add func...</div><div class=\"line\">[5, 7, 9]</div></pre></td></tr></table></figure></p>\n<p>由上可见, 调用map, 相当于顺序调用了add(1,4), add(2,5)， add(3,6)方法; 一行代码实现了方法的迭代调用, 简单快捷。<br>那如果再优化一下，实现并行调用add方法， 应该怎么做呢？在python里也好实现, 利用multiprocessing模块就可以。</p>","more":"<h3 id=\"2-multiprocessing模块与map方法\"><a href=\"#2-multiprocessing模块与map方法\" class=\"headerlink\" title=\"2. multiprocessing模块与map方法\"></a>2. multiprocessing模块与map方法</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> time</div><div class=\"line\"><span class=\"keyword\">from</span> datetime <span class=\"keyword\">import</span> datetime</div><div class=\"line\"><span class=\"keyword\">from</span> multiprocessing.dummy <span class=\"keyword\">import</span> Pool <span class=\"keyword\">as</span> ThreadPool</div><div class=\"line\"><span class=\"keyword\">from</span> functools <span class=\"keyword\">import</span> partial</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">add</span><span class=\"params\">(x, y)</span>:</span></div><div class=\"line\">    <span class=\"keyword\">print</span> datetime.now(), <span class=\"string\">\"enter add func...\"</span></div><div class=\"line\">    time.sleep(<span class=\"number\">2</span>)</div><div class=\"line\">    <span class=\"keyword\">print</span> datetime.now(), <span class=\"string\">\"leave add func...\"</span></div><div class=\"line\">    <span class=\"keyword\">return</span> x+y</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">add_wrap</span><span class=\"params\">(args)</span>:</span></div><div class=\"line\">    <span class=\"keyword\">return</span> add(*args)</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">\"__main__\"</span>:</div><div class=\"line\">    pool = ThreadPool(<span class=\"number\">4</span>) <span class=\"comment\"># 池的大小为4</span></div><div class=\"line\">    <span class=\"keyword\">print</span> pool.map(add_wrap, [(<span class=\"number\">1</span>,<span class=\"number\">2</span>),(<span class=\"number\">3</span>,<span class=\"number\">4</span>),(<span class=\"number\">5</span>,<span class=\"number\">6</span>)])</div><div class=\"line\">    <span class=\"comment\">#close the pool and wait for the work to finish</span></div><div class=\"line\">    pool.close()</div><div class=\"line\">    pool.join()</div></pre></td></tr></table></figure>\n<p>运行效果:<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">2016-04-05 15:10:23.690059 enter add func...</div><div class=\"line\">2016-04-05 15:10:23.690406 enter add func...</div><div class=\"line\">2016-04-05 15:10:23.690906 enter add func...</div><div class=\"line\">2016-04-05 15:10:25.693250 leave add func...</div><div class=\"line\">2016-04-05 15:10:25.693409 leave add func...</div><div class=\"line\">2016-04-05 15:10:25.693458 leave add func...</div><div class=\"line\">[3, 7, 11]</div></pre></td></tr></table></figure></p>\n<p>由上可以见， 我们已经实现了并行执行add方法</p>\n<h3 id=\"3-关于multiprocessing中pool的大小与性能\"><a href=\"#3-关于multiprocessing中pool的大小与性能\" class=\"headerlink\" title=\"3. 关于multiprocessing中pool的大小与性能\"></a>3. 关于multiprocessing中pool的大小与性能</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">from</span> multiprocessing <span class=\"keyword\">import</span> Pool</div><div class=\"line\"><span class=\"keyword\">from</span> multiprocessing.dummy <span class=\"keyword\">import</span> Pool <span class=\"keyword\">as</span> ThreadPool</div></pre></td></tr></table></figure>\n<p>以上Pool和ThreadPool模块, 一个基于进程工作, 一个基于线程工作。<br><br>一般来说, 使用进程池(multiprocessing pool)来执行CPU密集型的任务, 这样可以利用到多核的好处， 理论上(池越大)核越多速度越快; <br>使用线程池(threading)来处理IO型任务, 则有个最佳线程池大小, 要根据实际情况来调节这个池的size(线程过多时, 切换线程的开销将严重影响性能)。</p>"},{"title":"network transport layer","date":"2016-08-15T03:33:04.000Z","_content":"\nUDP包结构, 如图所示:<br>\n![UDP包结](/img/udppackage.png)\n<!--more-->\n\nTCP包结构, 如图所示:<br>\n![TCP包结构](/img/tcppackage.png)\n\n关于TCP包几点说明:<br>\n\n- 连接请求号：即SEQ, 该部分占32位，值从1到2的32次方减1。\n- 应答号：即对方返回的ACK值, 该部分占32位，值从1到2的32次方减1。\n- 标志位：例如：Flags＝01,该值用两个十六进制数来表示。该部分长度为6位，6个标志位的含义分别是：\n - URG位：紧急标志，和紧急指针配合使用，当其为1时表示，此报文要尽快传送。\n - ACK位：确认标志，和确认号字段配合使用，当ACK位置1时，确认号字段有效。\n - PSH位：为推送标志，置1时，发送方将立即发送缓冲区中的数据。\n - RST位：复位标志，置1时，表明有严重差错，必须释放连接。\n - SYN位： 同步标志，置1时，表示请求建立连接。\n - FIN位：终止标志，置1时，表明数据已经发送完，请求释放连接。\n- 窗口大小：32bit，用于向对方通告当前本机的接受缓冲区的大小。\n","source":"_posts/network/network-transport-layer.md","raw":"---\ntitle: network transport layer\ndate: 2016-08-15 11:33:04\ntags: networking\n---\n\nUDP包结构, 如图所示:<br>\n![UDP包结](/img/udppackage.png)\n<!--more-->\n\nTCP包结构, 如图所示:<br>\n![TCP包结构](/img/tcppackage.png)\n\n关于TCP包几点说明:<br>\n\n- 连接请求号：即SEQ, 该部分占32位，值从1到2的32次方减1。\n- 应答号：即对方返回的ACK值, 该部分占32位，值从1到2的32次方减1。\n- 标志位：例如：Flags＝01,该值用两个十六进制数来表示。该部分长度为6位，6个标志位的含义分别是：\n - URG位：紧急标志，和紧急指针配合使用，当其为1时表示，此报文要尽快传送。\n - ACK位：确认标志，和确认号字段配合使用，当ACK位置1时，确认号字段有效。\n - PSH位：为推送标志，置1时，发送方将立即发送缓冲区中的数据。\n - RST位：复位标志，置1时，表明有严重差错，必须释放连接。\n - SYN位： 同步标志，置1时，表示请求建立连接。\n - FIN位：终止标志，置1时，表明数据已经发送完，请求释放连接。\n- 窗口大小：32bit，用于向对方通告当前本机的接受缓冲区的大小。\n","slug":"network/network-transport-layer","published":1,"updated":"2017-08-15T03:58:49.205Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj84nao4e001b7v4dsnhknafl","content":"<p>UDP包结构, 如图所示:<br><br><img src=\"/img/udppackage.png\" alt=\"UDP包结\"><br><a id=\"more\"></a></p>\n<p>TCP包结构, 如图所示:<br><br><img src=\"/img/tcppackage.png\" alt=\"TCP包结构\"></p>\n<p>关于TCP包几点说明:<br></p>\n<ul>\n<li>连接请求号：即SEQ, 该部分占32位，值从1到2的32次方减1。</li>\n<li>应答号：即对方返回的ACK值, 该部分占32位，值从1到2的32次方减1。</li>\n<li>标志位：例如：Flags＝01,该值用两个十六进制数来表示。该部分长度为6位，6个标志位的含义分别是：<ul>\n<li>URG位：紧急标志，和紧急指针配合使用，当其为1时表示，此报文要尽快传送。</li>\n<li>ACK位：确认标志，和确认号字段配合使用，当ACK位置1时，确认号字段有效。</li>\n<li>PSH位：为推送标志，置1时，发送方将立即发送缓冲区中的数据。</li>\n<li>RST位：复位标志，置1时，表明有严重差错，必须释放连接。</li>\n<li>SYN位： 同步标志，置1时，表示请求建立连接。</li>\n<li>FIN位：终止标志，置1时，表明数据已经发送完，请求释放连接。</li>\n</ul>\n</li>\n<li>窗口大小：32bit，用于向对方通告当前本机的接受缓冲区的大小。</li>\n</ul>\n","site":{"data":{}},"excerpt":"<p>UDP包结构, 如图所示:<br><br><img src=\"/img/udppackage.png\" alt=\"UDP包结\"><br>","more":"</p>\n<p>TCP包结构, 如图所示:<br><br><img src=\"/img/tcppackage.png\" alt=\"TCP包结构\"></p>\n<p>关于TCP包几点说明:<br></p>\n<ul>\n<li>连接请求号：即SEQ, 该部分占32位，值从1到2的32次方减1。</li>\n<li>应答号：即对方返回的ACK值, 该部分占32位，值从1到2的32次方减1。</li>\n<li>标志位：例如：Flags＝01,该值用两个十六进制数来表示。该部分长度为6位，6个标志位的含义分别是：<ul>\n<li>URG位：紧急标志，和紧急指针配合使用，当其为1时表示，此报文要尽快传送。</li>\n<li>ACK位：确认标志，和确认号字段配合使用，当ACK位置1时，确认号字段有效。</li>\n<li>PSH位：为推送标志，置1时，发送方将立即发送缓冲区中的数据。</li>\n<li>RST位：复位标志，置1时，表明有严重差错，必须释放连接。</li>\n<li>SYN位： 同步标志，置1时，表示请求建立连接。</li>\n<li>FIN位：终止标志，置1时，表明数据已经发送完，请求释放连接。</li>\n</ul>\n</li>\n<li>窗口大小：32bit，用于向对方通告当前本机的接受缓冲区的大小。</li>\n</ul>"},{"title":"python pika broken pipe","date":"2017-08-19T10:46:21.000Z","_content":"\n\n## 问题描述\n\n在消费rabbitMQ队列时, 每次进入回调函数内需要进行一些比较耗时的操作;操作完成后给rabbitMQ server发送ack信号以dequeue本条消息。<br>\n问题就发生在发送ack操作时, 程序提示链接已被断开或socket error。\n<!--more-->\n\n## 源码示例\n\n```python\n#!/usr/bin\n#coding: utf-8\n\nimport pika\nimport time\n\n\nUSER = 'guest'\nPWD = 'guest'\nTEST_QUEUE = 'just4test'\n\ndef callback(ch, method, properties, body):\n    print(body)\n    time.sleep(600)\n    ch.basic_publish('', routing_key=TEST_QUEUE, body=\"fortest\")\n    ch.basic_ack(delivery_tag = method.delivery_tag)\n\ndef test_main():\n    s_conn = pika.BlockingConnection(\n        pika.ConnectionParameters('127.0.0.1', \n            credentials=pika.PlainCredentials(USER, PWD)))\n    chan = s_conn.channel()\n    chan.queue_declare(queue=TEST_QUEUE)\n\n    chan.basic_publish('', routing_key=TEST_QUEUE, body=\"fortest\")\n    chan.basic_consume(callback, queue=TEST_QUEUE)\n    chan.start_consuming()\n\nif __name__ == \"__main__\":\n    test_main()\n```\n\n运行一段时间后， 就会报错:\n\n```\n[ERROR][pika.adapters.base_connection][2017-08-18 12:33:49]Error event 25, None\n[CRITICAL][pika.adapters.base_connection][2017-08-18 12:33:49]Tried to handle an error where no error existed\n[ERROR][pika.adapters.base_connection][2017-08-18 12:33:49]Fatal Socket Error: BrokenPipeError(32, 'Broken pipe')\n```\n\n## 问题排查\n\n### 猜测：pika客户端没有及时发送心跳，连接被server断开\n\n一开始修改了heartbeat_interval参数值, 示例如下:\n\n```python\ndef test_main():\n    s_conn = pika.BlockingConnection(\n        pika.ConnectionParameters('127.0.0.1', \n            heartbeat_interval=10,\n            socket_timeout=5,\n            credentials=pika.PlainCredentials(USER, PWD)))\n    # ....\n```\n修改后运行依然报错，后来想想应该单线程被一直占用，pika无法发送心跳；<br>\n于是又加了个心跳线程, 示例如下:\n\n```python\n#!/usr/bin\n#coding: utf-8\n\nimport pika\nimport time\nimport logging\nimport threading\n\nUSER = 'guest'\nPWD = 'guest'\nTEST_QUEUE = 'just4test'\n\nclass Heartbeat(threading.Thread):\n    def __init__(self, connection):\n        super(Heartbeat, self).__init__()\n        self.lock = threading.Lock()\n        self.connection = connection\n        self.quitflag = False\n        self.stopflag = True\n        self.setDaemon(True)\n\n    def run(self):\n        while not self.quitflag:\n            time.sleep(10)\n            self.lock.acquire()\n            if self.stopflag :\n                self.lock.release()\n                continue\n            try:\n                self.connection.process_data_events()\n            except Exception as ex:\n                logging.warn(\"Error format: %s\"%(str(ex)))\n                self.lock.release()\n                return\n            self.lock.release()\n\n    def startHeartbeat(self):\n        self.lock.acquire()\n        if self.quitflag==True:\n            self.lock.release()\n            return\n        self.stopflag=False\n        self.lock.release()\n\ndef callback(ch, method, properties, body):\n    logging.info(\"recv_body:%s\" % body)\n    time.sleep(600)\n    ch.basic_ack(delivery_tag = method.delivery_tag)\n\ndef test_main():\n    s_conn = pika.BlockingConnection(\n        pika.ConnectionParameters('127.0.0.1', \n            heartbeat_interval=10,\n            socket_timeout=5,\n            credentials=pika.PlainCredentials(USER, PWD)))\n    chan = s_conn.channel()\n    chan.queue_declare(queue=TEST_QUEUE)\n    chan.basic_consume(callback,\n                       queue=TEST_QUEUE)\n\n    heartbeat = Heartbeat(s_conn)\n    heartbeat.start()          #开启心跳线程\n    heartbeat.startHeartbeat()\n    chan.start_consuming()\n\nif __name__ == \"__main__\":\n    test_main()\n```\n尝试运行，结果还是不行，不得不安静下来思考自己是不是想错了。<br>\n去看它的api，看到heartbeat_interval的解析:\n\n```\n:param int heartbeat_interval: How often to send heartbeats.\n                                  Min between this value and server's proposal\n                                  will be used. Use 0 to deactivate heartbeats\n                                  and None to accept server's proposal.\n```\n                           \n按这样说法，应该还是没有把心跳值给设置好。上面的程序期望是10秒发一次心跳，但是理论上发送心跳的间隔会比10秒多一点。所以艾玛，我应该是把*heartbeat_interval*的作用搞错了， 它是指超过这个时间间隔不发心跳或不给server任何信息，server就会断开连接, 而不是说pika会按这个间隔来发心跳。 结果我把heartbeat_interval值设置高一点(比实际发送心跳/信息的间隔更长)，比如上面设置成60秒，就正常运行了。\n\n如果不指定*heartbeat_interval*， 它默认为None， 意味着按rabbitMQ server的配置来检测心跳是否正常。<br>\n如果设置*heartbeat_interval=0*， 意味着不检测心跳，server端将不会主动断开连接。\n","source":"_posts/python/python-pika-broken-pipe.md","raw":"---\ntitle: python pika broken pipe\ndate: 2017-08-19 18:46:21\ntags: python\n---\n\n\n## 问题描述\n\n在消费rabbitMQ队列时, 每次进入回调函数内需要进行一些比较耗时的操作;操作完成后给rabbitMQ server发送ack信号以dequeue本条消息。<br>\n问题就发生在发送ack操作时, 程序提示链接已被断开或socket error。\n<!--more-->\n\n## 源码示例\n\n```python\n#!/usr/bin\n#coding: utf-8\n\nimport pika\nimport time\n\n\nUSER = 'guest'\nPWD = 'guest'\nTEST_QUEUE = 'just4test'\n\ndef callback(ch, method, properties, body):\n    print(body)\n    time.sleep(600)\n    ch.basic_publish('', routing_key=TEST_QUEUE, body=\"fortest\")\n    ch.basic_ack(delivery_tag = method.delivery_tag)\n\ndef test_main():\n    s_conn = pika.BlockingConnection(\n        pika.ConnectionParameters('127.0.0.1', \n            credentials=pika.PlainCredentials(USER, PWD)))\n    chan = s_conn.channel()\n    chan.queue_declare(queue=TEST_QUEUE)\n\n    chan.basic_publish('', routing_key=TEST_QUEUE, body=\"fortest\")\n    chan.basic_consume(callback, queue=TEST_QUEUE)\n    chan.start_consuming()\n\nif __name__ == \"__main__\":\n    test_main()\n```\n\n运行一段时间后， 就会报错:\n\n```\n[ERROR][pika.adapters.base_connection][2017-08-18 12:33:49]Error event 25, None\n[CRITICAL][pika.adapters.base_connection][2017-08-18 12:33:49]Tried to handle an error where no error existed\n[ERROR][pika.adapters.base_connection][2017-08-18 12:33:49]Fatal Socket Error: BrokenPipeError(32, 'Broken pipe')\n```\n\n## 问题排查\n\n### 猜测：pika客户端没有及时发送心跳，连接被server断开\n\n一开始修改了heartbeat_interval参数值, 示例如下:\n\n```python\ndef test_main():\n    s_conn = pika.BlockingConnection(\n        pika.ConnectionParameters('127.0.0.1', \n            heartbeat_interval=10,\n            socket_timeout=5,\n            credentials=pika.PlainCredentials(USER, PWD)))\n    # ....\n```\n修改后运行依然报错，后来想想应该单线程被一直占用，pika无法发送心跳；<br>\n于是又加了个心跳线程, 示例如下:\n\n```python\n#!/usr/bin\n#coding: utf-8\n\nimport pika\nimport time\nimport logging\nimport threading\n\nUSER = 'guest'\nPWD = 'guest'\nTEST_QUEUE = 'just4test'\n\nclass Heartbeat(threading.Thread):\n    def __init__(self, connection):\n        super(Heartbeat, self).__init__()\n        self.lock = threading.Lock()\n        self.connection = connection\n        self.quitflag = False\n        self.stopflag = True\n        self.setDaemon(True)\n\n    def run(self):\n        while not self.quitflag:\n            time.sleep(10)\n            self.lock.acquire()\n            if self.stopflag :\n                self.lock.release()\n                continue\n            try:\n                self.connection.process_data_events()\n            except Exception as ex:\n                logging.warn(\"Error format: %s\"%(str(ex)))\n                self.lock.release()\n                return\n            self.lock.release()\n\n    def startHeartbeat(self):\n        self.lock.acquire()\n        if self.quitflag==True:\n            self.lock.release()\n            return\n        self.stopflag=False\n        self.lock.release()\n\ndef callback(ch, method, properties, body):\n    logging.info(\"recv_body:%s\" % body)\n    time.sleep(600)\n    ch.basic_ack(delivery_tag = method.delivery_tag)\n\ndef test_main():\n    s_conn = pika.BlockingConnection(\n        pika.ConnectionParameters('127.0.0.1', \n            heartbeat_interval=10,\n            socket_timeout=5,\n            credentials=pika.PlainCredentials(USER, PWD)))\n    chan = s_conn.channel()\n    chan.queue_declare(queue=TEST_QUEUE)\n    chan.basic_consume(callback,\n                       queue=TEST_QUEUE)\n\n    heartbeat = Heartbeat(s_conn)\n    heartbeat.start()          #开启心跳线程\n    heartbeat.startHeartbeat()\n    chan.start_consuming()\n\nif __name__ == \"__main__\":\n    test_main()\n```\n尝试运行，结果还是不行，不得不安静下来思考自己是不是想错了。<br>\n去看它的api，看到heartbeat_interval的解析:\n\n```\n:param int heartbeat_interval: How often to send heartbeats.\n                                  Min between this value and server's proposal\n                                  will be used. Use 0 to deactivate heartbeats\n                                  and None to accept server's proposal.\n```\n                           \n按这样说法，应该还是没有把心跳值给设置好。上面的程序期望是10秒发一次心跳，但是理论上发送心跳的间隔会比10秒多一点。所以艾玛，我应该是把*heartbeat_interval*的作用搞错了， 它是指超过这个时间间隔不发心跳或不给server任何信息，server就会断开连接, 而不是说pika会按这个间隔来发心跳。 结果我把heartbeat_interval值设置高一点(比实际发送心跳/信息的间隔更长)，比如上面设置成60秒，就正常运行了。\n\n如果不指定*heartbeat_interval*， 它默认为None， 意味着按rabbitMQ server的配置来检测心跳是否正常。<br>\n如果设置*heartbeat_interval=0*， 意味着不检测心跳，server端将不会主动断开连接。\n","slug":"python/python-pika-broken-pipe","published":1,"updated":"2017-08-19T11:20:02.241Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj84nao4g001d7v4dsrahtk41","content":"<h2 id=\"问题描述\"><a href=\"#问题描述\" class=\"headerlink\" title=\"问题描述\"></a>问题描述</h2><p>在消费rabbitMQ队列时, 每次进入回调函数内需要进行一些比较耗时的操作;操作完成后给rabbitMQ server发送ack信号以dequeue本条消息。<br><br>问题就发生在发送ack操作时, 程序提示链接已被断开或socket error。<br><a id=\"more\"></a></p>\n<h2 id=\"源码示例\"><a href=\"#源码示例\" class=\"headerlink\" title=\"源码示例\"></a>源码示例</h2><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">#!/usr/bin</span></div><div class=\"line\"><span class=\"comment\">#coding: utf-8</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">import</span> pika</div><div class=\"line\"><span class=\"keyword\">import</span> time</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">USER = <span class=\"string\">'guest'</span></div><div class=\"line\">PWD = <span class=\"string\">'guest'</span></div><div class=\"line\">TEST_QUEUE = <span class=\"string\">'just4test'</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">callback</span><span class=\"params\">(ch, method, properties, body)</span>:</span></div><div class=\"line\">    print(body)</div><div class=\"line\">    time.sleep(<span class=\"number\">600</span>)</div><div class=\"line\">    ch.basic_publish(<span class=\"string\">''</span>, routing_key=TEST_QUEUE, body=<span class=\"string\">\"fortest\"</span>)</div><div class=\"line\">    ch.basic_ack(delivery_tag = method.delivery_tag)</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">test_main</span><span class=\"params\">()</span>:</span></div><div class=\"line\">    s_conn = pika.BlockingConnection(</div><div class=\"line\">        pika.ConnectionParameters(<span class=\"string\">'127.0.0.1'</span>, </div><div class=\"line\">            credentials=pika.PlainCredentials(USER, PWD)))</div><div class=\"line\">    chan = s_conn.channel()</div><div class=\"line\">    chan.queue_declare(queue=TEST_QUEUE)</div><div class=\"line\"></div><div class=\"line\">    chan.basic_publish(<span class=\"string\">''</span>, routing_key=TEST_QUEUE, body=<span class=\"string\">\"fortest\"</span>)</div><div class=\"line\">    chan.basic_consume(callback, queue=TEST_QUEUE)</div><div class=\"line\">    chan.start_consuming()</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">\"__main__\"</span>:</div><div class=\"line\">    test_main()</div></pre></td></tr></table></figure>\n<p>运行一段时间后， 就会报错:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">[ERROR][pika.adapters.base_connection][2017-08-18 12:33:49]Error event 25, None</div><div class=\"line\">[CRITICAL][pika.adapters.base_connection][2017-08-18 12:33:49]Tried to handle an error where no error existed</div><div class=\"line\">[ERROR][pika.adapters.base_connection][2017-08-18 12:33:49]Fatal Socket Error: BrokenPipeError(32, &apos;Broken pipe&apos;)</div></pre></td></tr></table></figure>\n<h2 id=\"问题排查\"><a href=\"#问题排查\" class=\"headerlink\" title=\"问题排查\"></a>问题排查</h2><h3 id=\"猜测：pika客户端没有及时发送心跳，连接被server断开\"><a href=\"#猜测：pika客户端没有及时发送心跳，连接被server断开\" class=\"headerlink\" title=\"猜测：pika客户端没有及时发送心跳，连接被server断开\"></a>猜测：pika客户端没有及时发送心跳，连接被server断开</h3><p>一开始修改了heartbeat_interval参数值, 示例如下:</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">test_main</span><span class=\"params\">()</span>:</span></div><div class=\"line\">    s_conn = pika.BlockingConnection(</div><div class=\"line\">        pika.ConnectionParameters(<span class=\"string\">'127.0.0.1'</span>, </div><div class=\"line\">            heartbeat_interval=<span class=\"number\">10</span>,</div><div class=\"line\">            socket_timeout=<span class=\"number\">5</span>,</div><div class=\"line\">            credentials=pika.PlainCredentials(USER, PWD)))</div><div class=\"line\">    <span class=\"comment\"># ....</span></div></pre></td></tr></table></figure>\n<p>修改后运行依然报错，后来想想应该单线程被一直占用，pika无法发送心跳；<br><br>于是又加了个心跳线程, 示例如下:</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">#!/usr/bin</span></div><div class=\"line\"><span class=\"comment\">#coding: utf-8</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">import</span> pika</div><div class=\"line\"><span class=\"keyword\">import</span> time</div><div class=\"line\"><span class=\"keyword\">import</span> logging</div><div class=\"line\"><span class=\"keyword\">import</span> threading</div><div class=\"line\"></div><div class=\"line\">USER = <span class=\"string\">'guest'</span></div><div class=\"line\">PWD = <span class=\"string\">'guest'</span></div><div class=\"line\">TEST_QUEUE = <span class=\"string\">'just4test'</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Heartbeat</span><span class=\"params\">(threading.Thread)</span>:</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span><span class=\"params\">(self, connection)</span>:</span></div><div class=\"line\">        super(Heartbeat, self).__init__()</div><div class=\"line\">        self.lock = threading.Lock()</div><div class=\"line\">        self.connection = connection</div><div class=\"line\">        self.quitflag = <span class=\"keyword\">False</span></div><div class=\"line\">        self.stopflag = <span class=\"keyword\">True</span></div><div class=\"line\">        self.setDaemon(<span class=\"keyword\">True</span>)</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">run</span><span class=\"params\">(self)</span>:</span></div><div class=\"line\">        <span class=\"keyword\">while</span> <span class=\"keyword\">not</span> self.quitflag:</div><div class=\"line\">            time.sleep(<span class=\"number\">10</span>)</div><div class=\"line\">            self.lock.acquire()</div><div class=\"line\">            <span class=\"keyword\">if</span> self.stopflag :</div><div class=\"line\">                self.lock.release()</div><div class=\"line\">                <span class=\"keyword\">continue</span></div><div class=\"line\">            <span class=\"keyword\">try</span>:</div><div class=\"line\">                self.connection.process_data_events()</div><div class=\"line\">            <span class=\"keyword\">except</span> Exception <span class=\"keyword\">as</span> ex:</div><div class=\"line\">                logging.warn(<span class=\"string\">\"Error format: %s\"</span>%(str(ex)))</div><div class=\"line\">                self.lock.release()</div><div class=\"line\">                <span class=\"keyword\">return</span></div><div class=\"line\">            self.lock.release()</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">startHeartbeat</span><span class=\"params\">(self)</span>:</span></div><div class=\"line\">        self.lock.acquire()</div><div class=\"line\">        <span class=\"keyword\">if</span> self.quitflag==<span class=\"keyword\">True</span>:</div><div class=\"line\">            self.lock.release()</div><div class=\"line\">            <span class=\"keyword\">return</span></div><div class=\"line\">        self.stopflag=<span class=\"keyword\">False</span></div><div class=\"line\">        self.lock.release()</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">callback</span><span class=\"params\">(ch, method, properties, body)</span>:</span></div><div class=\"line\">    logging.info(<span class=\"string\">\"recv_body:%s\"</span> % body)</div><div class=\"line\">    time.sleep(<span class=\"number\">600</span>)</div><div class=\"line\">    ch.basic_ack(delivery_tag = method.delivery_tag)</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">test_main</span><span class=\"params\">()</span>:</span></div><div class=\"line\">    s_conn = pika.BlockingConnection(</div><div class=\"line\">        pika.ConnectionParameters(<span class=\"string\">'127.0.0.1'</span>, </div><div class=\"line\">            heartbeat_interval=<span class=\"number\">10</span>,</div><div class=\"line\">            socket_timeout=<span class=\"number\">5</span>,</div><div class=\"line\">            credentials=pika.PlainCredentials(USER, PWD)))</div><div class=\"line\">    chan = s_conn.channel()</div><div class=\"line\">    chan.queue_declare(queue=TEST_QUEUE)</div><div class=\"line\">    chan.basic_consume(callback,</div><div class=\"line\">                       queue=TEST_QUEUE)</div><div class=\"line\"></div><div class=\"line\">    heartbeat = Heartbeat(s_conn)</div><div class=\"line\">    heartbeat.start()          <span class=\"comment\">#开启心跳线程</span></div><div class=\"line\">    heartbeat.startHeartbeat()</div><div class=\"line\">    chan.start_consuming()</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">\"__main__\"</span>:</div><div class=\"line\">    test_main()</div></pre></td></tr></table></figure>\n<p>尝试运行，结果还是不行，不得不安静下来思考自己是不是想错了。<br><br>去看它的api，看到heartbeat_interval的解析:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">:param int heartbeat_interval: How often to send heartbeats.</div><div class=\"line\">                                  Min between this value and server&apos;s proposal</div><div class=\"line\">                                  will be used. Use 0 to deactivate heartbeats</div><div class=\"line\">                                  and None to accept server&apos;s proposal.</div></pre></td></tr></table></figure>\n<p>按这样说法，应该还是没有把心跳值给设置好。上面的程序期望是10秒发一次心跳，但是理论上发送心跳的间隔会比10秒多一点。所以艾玛，我应该是把<em>heartbeat_interval</em>的作用搞错了， 它是指超过这个时间间隔不发心跳或不给server任何信息，server就会断开连接, 而不是说pika会按这个间隔来发心跳。 结果我把heartbeat_interval值设置高一点(比实际发送心跳/信息的间隔更长)，比如上面设置成60秒，就正常运行了。</p>\n<p>如果不指定<em>heartbeat_interval</em>， 它默认为None， 意味着按rabbitMQ server的配置来检测心跳是否正常。<br><br>如果设置<em>heartbeat_interval=0</em>， 意味着不检测心跳，server端将不会主动断开连接。</p>\n","site":{"data":{}},"excerpt":"<h2 id=\"问题描述\"><a href=\"#问题描述\" class=\"headerlink\" title=\"问题描述\"></a>问题描述</h2><p>在消费rabbitMQ队列时, 每次进入回调函数内需要进行一些比较耗时的操作;操作完成后给rabbitMQ server发送ack信号以dequeue本条消息。<br><br>问题就发生在发送ack操作时, 程序提示链接已被断开或socket error。<br>","more":"</p>\n<h2 id=\"源码示例\"><a href=\"#源码示例\" class=\"headerlink\" title=\"源码示例\"></a>源码示例</h2><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">#!/usr/bin</span></div><div class=\"line\"><span class=\"comment\">#coding: utf-8</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">import</span> pika</div><div class=\"line\"><span class=\"keyword\">import</span> time</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">USER = <span class=\"string\">'guest'</span></div><div class=\"line\">PWD = <span class=\"string\">'guest'</span></div><div class=\"line\">TEST_QUEUE = <span class=\"string\">'just4test'</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">callback</span><span class=\"params\">(ch, method, properties, body)</span>:</span></div><div class=\"line\">    print(body)</div><div class=\"line\">    time.sleep(<span class=\"number\">600</span>)</div><div class=\"line\">    ch.basic_publish(<span class=\"string\">''</span>, routing_key=TEST_QUEUE, body=<span class=\"string\">\"fortest\"</span>)</div><div class=\"line\">    ch.basic_ack(delivery_tag = method.delivery_tag)</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">test_main</span><span class=\"params\">()</span>:</span></div><div class=\"line\">    s_conn = pika.BlockingConnection(</div><div class=\"line\">        pika.ConnectionParameters(<span class=\"string\">'127.0.0.1'</span>, </div><div class=\"line\">            credentials=pika.PlainCredentials(USER, PWD)))</div><div class=\"line\">    chan = s_conn.channel()</div><div class=\"line\">    chan.queue_declare(queue=TEST_QUEUE)</div><div class=\"line\"></div><div class=\"line\">    chan.basic_publish(<span class=\"string\">''</span>, routing_key=TEST_QUEUE, body=<span class=\"string\">\"fortest\"</span>)</div><div class=\"line\">    chan.basic_consume(callback, queue=TEST_QUEUE)</div><div class=\"line\">    chan.start_consuming()</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">\"__main__\"</span>:</div><div class=\"line\">    test_main()</div></pre></td></tr></table></figure>\n<p>运行一段时间后， 就会报错:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">[ERROR][pika.adapters.base_connection][2017-08-18 12:33:49]Error event 25, None</div><div class=\"line\">[CRITICAL][pika.adapters.base_connection][2017-08-18 12:33:49]Tried to handle an error where no error existed</div><div class=\"line\">[ERROR][pika.adapters.base_connection][2017-08-18 12:33:49]Fatal Socket Error: BrokenPipeError(32, &apos;Broken pipe&apos;)</div></pre></td></tr></table></figure>\n<h2 id=\"问题排查\"><a href=\"#问题排查\" class=\"headerlink\" title=\"问题排查\"></a>问题排查</h2><h3 id=\"猜测：pika客户端没有及时发送心跳，连接被server断开\"><a href=\"#猜测：pika客户端没有及时发送心跳，连接被server断开\" class=\"headerlink\" title=\"猜测：pika客户端没有及时发送心跳，连接被server断开\"></a>猜测：pika客户端没有及时发送心跳，连接被server断开</h3><p>一开始修改了heartbeat_interval参数值, 示例如下:</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">test_main</span><span class=\"params\">()</span>:</span></div><div class=\"line\">    s_conn = pika.BlockingConnection(</div><div class=\"line\">        pika.ConnectionParameters(<span class=\"string\">'127.0.0.1'</span>, </div><div class=\"line\">            heartbeat_interval=<span class=\"number\">10</span>,</div><div class=\"line\">            socket_timeout=<span class=\"number\">5</span>,</div><div class=\"line\">            credentials=pika.PlainCredentials(USER, PWD)))</div><div class=\"line\">    <span class=\"comment\"># ....</span></div></pre></td></tr></table></figure>\n<p>修改后运行依然报错，后来想想应该单线程被一直占用，pika无法发送心跳；<br><br>于是又加了个心跳线程, 示例如下:</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">#!/usr/bin</span></div><div class=\"line\"><span class=\"comment\">#coding: utf-8</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">import</span> pika</div><div class=\"line\"><span class=\"keyword\">import</span> time</div><div class=\"line\"><span class=\"keyword\">import</span> logging</div><div class=\"line\"><span class=\"keyword\">import</span> threading</div><div class=\"line\"></div><div class=\"line\">USER = <span class=\"string\">'guest'</span></div><div class=\"line\">PWD = <span class=\"string\">'guest'</span></div><div class=\"line\">TEST_QUEUE = <span class=\"string\">'just4test'</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Heartbeat</span><span class=\"params\">(threading.Thread)</span>:</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span><span class=\"params\">(self, connection)</span>:</span></div><div class=\"line\">        super(Heartbeat, self).__init__()</div><div class=\"line\">        self.lock = threading.Lock()</div><div class=\"line\">        self.connection = connection</div><div class=\"line\">        self.quitflag = <span class=\"keyword\">False</span></div><div class=\"line\">        self.stopflag = <span class=\"keyword\">True</span></div><div class=\"line\">        self.setDaemon(<span class=\"keyword\">True</span>)</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">run</span><span class=\"params\">(self)</span>:</span></div><div class=\"line\">        <span class=\"keyword\">while</span> <span class=\"keyword\">not</span> self.quitflag:</div><div class=\"line\">            time.sleep(<span class=\"number\">10</span>)</div><div class=\"line\">            self.lock.acquire()</div><div class=\"line\">            <span class=\"keyword\">if</span> self.stopflag :</div><div class=\"line\">                self.lock.release()</div><div class=\"line\">                <span class=\"keyword\">continue</span></div><div class=\"line\">            <span class=\"keyword\">try</span>:</div><div class=\"line\">                self.connection.process_data_events()</div><div class=\"line\">            <span class=\"keyword\">except</span> Exception <span class=\"keyword\">as</span> ex:</div><div class=\"line\">                logging.warn(<span class=\"string\">\"Error format: %s\"</span>%(str(ex)))</div><div class=\"line\">                self.lock.release()</div><div class=\"line\">                <span class=\"keyword\">return</span></div><div class=\"line\">            self.lock.release()</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">startHeartbeat</span><span class=\"params\">(self)</span>:</span></div><div class=\"line\">        self.lock.acquire()</div><div class=\"line\">        <span class=\"keyword\">if</span> self.quitflag==<span class=\"keyword\">True</span>:</div><div class=\"line\">            self.lock.release()</div><div class=\"line\">            <span class=\"keyword\">return</span></div><div class=\"line\">        self.stopflag=<span class=\"keyword\">False</span></div><div class=\"line\">        self.lock.release()</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">callback</span><span class=\"params\">(ch, method, properties, body)</span>:</span></div><div class=\"line\">    logging.info(<span class=\"string\">\"recv_body:%s\"</span> % body)</div><div class=\"line\">    time.sleep(<span class=\"number\">600</span>)</div><div class=\"line\">    ch.basic_ack(delivery_tag = method.delivery_tag)</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">test_main</span><span class=\"params\">()</span>:</span></div><div class=\"line\">    s_conn = pika.BlockingConnection(</div><div class=\"line\">        pika.ConnectionParameters(<span class=\"string\">'127.0.0.1'</span>, </div><div class=\"line\">            heartbeat_interval=<span class=\"number\">10</span>,</div><div class=\"line\">            socket_timeout=<span class=\"number\">5</span>,</div><div class=\"line\">            credentials=pika.PlainCredentials(USER, PWD)))</div><div class=\"line\">    chan = s_conn.channel()</div><div class=\"line\">    chan.queue_declare(queue=TEST_QUEUE)</div><div class=\"line\">    chan.basic_consume(callback,</div><div class=\"line\">                       queue=TEST_QUEUE)</div><div class=\"line\"></div><div class=\"line\">    heartbeat = Heartbeat(s_conn)</div><div class=\"line\">    heartbeat.start()          <span class=\"comment\">#开启心跳线程</span></div><div class=\"line\">    heartbeat.startHeartbeat()</div><div class=\"line\">    chan.start_consuming()</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">\"__main__\"</span>:</div><div class=\"line\">    test_main()</div></pre></td></tr></table></figure>\n<p>尝试运行，结果还是不行，不得不安静下来思考自己是不是想错了。<br><br>去看它的api，看到heartbeat_interval的解析:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">:param int heartbeat_interval: How often to send heartbeats.</div><div class=\"line\">                                  Min between this value and server&apos;s proposal</div><div class=\"line\">                                  will be used. Use 0 to deactivate heartbeats</div><div class=\"line\">                                  and None to accept server&apos;s proposal.</div></pre></td></tr></table></figure>\n<p>按这样说法，应该还是没有把心跳值给设置好。上面的程序期望是10秒发一次心跳，但是理论上发送心跳的间隔会比10秒多一点。所以艾玛，我应该是把<em>heartbeat_interval</em>的作用搞错了， 它是指超过这个时间间隔不发心跳或不给server任何信息，server就会断开连接, 而不是说pika会按这个间隔来发心跳。 结果我把heartbeat_interval值设置高一点(比实际发送心跳/信息的间隔更长)，比如上面设置成60秒，就正常运行了。</p>\n<p>如果不指定<em>heartbeat_interval</em>， 它默认为None， 意味着按rabbitMQ server的配置来检测心跳是否正常。<br><br>如果设置<em>heartbeat_interval=0</em>， 意味着不检测心跳，server端将不会主动断开连接。</p>"},{"title":"[python3]使用aiohttp","date":"2017-09-05T10:10:02.000Z","_content":"\npython3下asyncio可实现异步并发处理IO逻辑, 而aiohttp可实现异步请求http逻辑,<br>\n因此可结合asyncio及aiohttp库实现异步并发请求http的需求,\n直接上示例代码:\n<!--more-->\n\n```python\n#! /usr/bin/python\n# -*- coding:utf-8 -*-\n\nimport aiohttp\nimport asyncio\nimport async_timeout\n\n\nasync def test(url):\n    async with aiohttp.ClientSession() as session:\n         with async_timeout.timeout(10):\n            async with session.post(url) as resp:\n                r = await resp.text()\n                print(r)\n                print(resp.headers.get('Content-Type'))\n                # TODO: do something...\n\n\ndef test_main():\n    tasks = []\n    tasks.append(\n        asyncio.ensure_future(\n            test(\"http://hostname1.com/xxx\")\n        )\n    )\n    tasks.append(\n        asyncio.ensure_future(\n            test(\"http://hostname2.com/xxx\")\n        )\n    )\n    loop.run_until_complete(asyncio.gather(*tasks))\n\n\nif __name__ == \"__main__\":\n    loop = asyncio.get_event_loop()\n    test_main()\n    loop.close()\n```\n","source":"_posts/python/python3-aiohttp.md","raw":"---\ntitle: '[python3]使用aiohttp'\ndate: 2017-09-05 18:10:02\ntags: python\n---\n\npython3下asyncio可实现异步并发处理IO逻辑, 而aiohttp可实现异步请求http逻辑,<br>\n因此可结合asyncio及aiohttp库实现异步并发请求http的需求,\n直接上示例代码:\n<!--more-->\n\n```python\n#! /usr/bin/python\n# -*- coding:utf-8 -*-\n\nimport aiohttp\nimport asyncio\nimport async_timeout\n\n\nasync def test(url):\n    async with aiohttp.ClientSession() as session:\n         with async_timeout.timeout(10):\n            async with session.post(url) as resp:\n                r = await resp.text()\n                print(r)\n                print(resp.headers.get('Content-Type'))\n                # TODO: do something...\n\n\ndef test_main():\n    tasks = []\n    tasks.append(\n        asyncio.ensure_future(\n            test(\"http://hostname1.com/xxx\")\n        )\n    )\n    tasks.append(\n        asyncio.ensure_future(\n            test(\"http://hostname2.com/xxx\")\n        )\n    )\n    loop.run_until_complete(asyncio.gather(*tasks))\n\n\nif __name__ == \"__main__\":\n    loop = asyncio.get_event_loop()\n    test_main()\n    loop.close()\n```\n","slug":"python/python3-aiohttp","published":1,"updated":"2017-09-05T10:19:12.539Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj84nao4q001g7v4dre4pzbnn","content":"<p>python3下asyncio可实现异步并发处理IO逻辑, 而aiohttp可实现异步请求http逻辑,<br><br>因此可结合asyncio及aiohttp库实现异步并发请求http的需求,<br>直接上示例代码:<br><a id=\"more\"></a></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">#! /usr/bin/python</span></div><div class=\"line\"><span class=\"comment\"># -*- coding:utf-8 -*-</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">import</span> aiohttp</div><div class=\"line\"><span class=\"keyword\">import</span> asyncio</div><div class=\"line\"><span class=\"keyword\">import</span> async_timeout</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">async</span> <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">test</span><span class=\"params\">(url)</span>:</span></div><div class=\"line\">    <span class=\"keyword\">async</span> <span class=\"keyword\">with</span> aiohttp.ClientSession() <span class=\"keyword\">as</span> session:</div><div class=\"line\">         <span class=\"keyword\">with</span> async_timeout.timeout(<span class=\"number\">10</span>):</div><div class=\"line\">            <span class=\"keyword\">async</span> <span class=\"keyword\">with</span> session.post(url) <span class=\"keyword\">as</span> resp:</div><div class=\"line\">                r = <span class=\"keyword\">await</span> resp.text()</div><div class=\"line\">                print(r)</div><div class=\"line\">                print(resp.headers.get(<span class=\"string\">'Content-Type'</span>))</div><div class=\"line\">                <span class=\"comment\"># <span class=\"doctag\">TODO:</span> do something...</span></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">test_main</span><span class=\"params\">()</span>:</span></div><div class=\"line\">    tasks = []</div><div class=\"line\">    tasks.append(</div><div class=\"line\">        asyncio.ensure_future(</div><div class=\"line\">            test(<span class=\"string\">\"http://hostname1.com/xxx\"</span>)</div><div class=\"line\">        )</div><div class=\"line\">    )</div><div class=\"line\">    tasks.append(</div><div class=\"line\">        asyncio.ensure_future(</div><div class=\"line\">            test(<span class=\"string\">\"http://hostname2.com/xxx\"</span>)</div><div class=\"line\">        )</div><div class=\"line\">    )</div><div class=\"line\">    loop.run_until_complete(asyncio.gather(*tasks))</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">\"__main__\"</span>:</div><div class=\"line\">    loop = asyncio.get_event_loop()</div><div class=\"line\">    test_main()</div><div class=\"line\">    loop.close()</div></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"<p>python3下asyncio可实现异步并发处理IO逻辑, 而aiohttp可实现异步请求http逻辑,<br><br>因此可结合asyncio及aiohttp库实现异步并发请求http的需求,<br>直接上示例代码:<br>","more":"</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">#! /usr/bin/python</span></div><div class=\"line\"><span class=\"comment\"># -*- coding:utf-8 -*-</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">import</span> aiohttp</div><div class=\"line\"><span class=\"keyword\">import</span> asyncio</div><div class=\"line\"><span class=\"keyword\">import</span> async_timeout</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">async</span> <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">test</span><span class=\"params\">(url)</span>:</span></div><div class=\"line\">    <span class=\"keyword\">async</span> <span class=\"keyword\">with</span> aiohttp.ClientSession() <span class=\"keyword\">as</span> session:</div><div class=\"line\">         <span class=\"keyword\">with</span> async_timeout.timeout(<span class=\"number\">10</span>):</div><div class=\"line\">            <span class=\"keyword\">async</span> <span class=\"keyword\">with</span> session.post(url) <span class=\"keyword\">as</span> resp:</div><div class=\"line\">                r = <span class=\"keyword\">await</span> resp.text()</div><div class=\"line\">                print(r)</div><div class=\"line\">                print(resp.headers.get(<span class=\"string\">'Content-Type'</span>))</div><div class=\"line\">                <span class=\"comment\"># <span class=\"doctag\">TODO:</span> do something...</span></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">test_main</span><span class=\"params\">()</span>:</span></div><div class=\"line\">    tasks = []</div><div class=\"line\">    tasks.append(</div><div class=\"line\">        asyncio.ensure_future(</div><div class=\"line\">            test(<span class=\"string\">\"http://hostname1.com/xxx\"</span>)</div><div class=\"line\">        )</div><div class=\"line\">    )</div><div class=\"line\">    tasks.append(</div><div class=\"line\">        asyncio.ensure_future(</div><div class=\"line\">            test(<span class=\"string\">\"http://hostname2.com/xxx\"</span>)</div><div class=\"line\">        )</div><div class=\"line\">    )</div><div class=\"line\">    loop.run_until_complete(asyncio.gather(*tasks))</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">\"__main__\"</span>:</div><div class=\"line\">    loop = asyncio.get_event_loop()</div><div class=\"line\">    test_main()</div><div class=\"line\">    loop.close()</div></pre></td></tr></table></figure>"},{"title":"python upload/download large file","date":"2017-08-19T14:39:53.000Z","_content":"\n\n对于大文件上传下载，可以通过requests库来流式处理，示例如下:\n\n```python\n\nimport requests\n\ndef upload(url, local_fpath):\n    headers = {\n        'content-type': 'application/octet-stream',\n        # ...\n    }\n    with open(local_fpath, 'rb') as f:\n        r = requests.post(url, headers=headers, data=f)\n        # deal with r.headers.xxx\n\ndef download(url, local_fpath):\n    headers = {\n        # ...\n    }\n    r = requests.get(url, stream=True, headers=headers)\n    with open(local_fpath, \"wb\") as fd:\n        for chunk in r.iter_content(chunk_size=10240):\n            if chunk:\n                fd.write(chunk)\n```\n","source":"_posts/python/python-upload-download-large-file.md","raw":"---\ntitle: python upload/download large file\ndate: 2017-08-19 22:39:53\ntags: python\n---\n\n\n对于大文件上传下载，可以通过requests库来流式处理，示例如下:\n\n```python\n\nimport requests\n\ndef upload(url, local_fpath):\n    headers = {\n        'content-type': 'application/octet-stream',\n        # ...\n    }\n    with open(local_fpath, 'rb') as f:\n        r = requests.post(url, headers=headers, data=f)\n        # deal with r.headers.xxx\n\ndef download(url, local_fpath):\n    headers = {\n        # ...\n    }\n    r = requests.get(url, stream=True, headers=headers)\n    with open(local_fpath, \"wb\") as fd:\n        for chunk in r.iter_content(chunk_size=10240):\n            if chunk:\n                fd.write(chunk)\n```\n","slug":"python/python-upload-download-large-file","published":1,"updated":"2017-08-19T14:41:55.737Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj84nao4t001i7v4d2cbfgdsj","content":"<p>对于大文件上传下载，可以通过requests库来流式处理，示例如下:</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">import</span> requests</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">upload</span><span class=\"params\">(url, local_fpath)</span>:</span></div><div class=\"line\">    headers = &#123;</div><div class=\"line\">        <span class=\"string\">'content-type'</span>: <span class=\"string\">'application/octet-stream'</span>,</div><div class=\"line\">        <span class=\"comment\"># ...</span></div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">with</span> open(local_fpath, <span class=\"string\">'rb'</span>) <span class=\"keyword\">as</span> f:</div><div class=\"line\">        r = requests.post(url, headers=headers, data=f)</div><div class=\"line\">        <span class=\"comment\"># deal with r.headers.xxx</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">download</span><span class=\"params\">(url, local_fpath)</span>:</span></div><div class=\"line\">    headers = &#123;</div><div class=\"line\">        <span class=\"comment\"># ...</span></div><div class=\"line\">    &#125;</div><div class=\"line\">    r = requests.get(url, stream=<span class=\"keyword\">True</span>, headers=headers)</div><div class=\"line\">    <span class=\"keyword\">with</span> open(local_fpath, <span class=\"string\">\"wb\"</span>) <span class=\"keyword\">as</span> fd:</div><div class=\"line\">        <span class=\"keyword\">for</span> chunk <span class=\"keyword\">in</span> r.iter_content(chunk_size=<span class=\"number\">10240</span>):</div><div class=\"line\">            <span class=\"keyword\">if</span> chunk:</div><div class=\"line\">                fd.write(chunk)</div></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<p>对于大文件上传下载，可以通过requests库来流式处理，示例如下:</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">import</span> requests</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">upload</span><span class=\"params\">(url, local_fpath)</span>:</span></div><div class=\"line\">    headers = &#123;</div><div class=\"line\">        <span class=\"string\">'content-type'</span>: <span class=\"string\">'application/octet-stream'</span>,</div><div class=\"line\">        <span class=\"comment\"># ...</span></div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">with</span> open(local_fpath, <span class=\"string\">'rb'</span>) <span class=\"keyword\">as</span> f:</div><div class=\"line\">        r = requests.post(url, headers=headers, data=f)</div><div class=\"line\">        <span class=\"comment\"># deal with r.headers.xxx</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">download</span><span class=\"params\">(url, local_fpath)</span>:</span></div><div class=\"line\">    headers = &#123;</div><div class=\"line\">        <span class=\"comment\"># ...</span></div><div class=\"line\">    &#125;</div><div class=\"line\">    r = requests.get(url, stream=<span class=\"keyword\">True</span>, headers=headers)</div><div class=\"line\">    <span class=\"keyword\">with</span> open(local_fpath, <span class=\"string\">\"wb\"</span>) <span class=\"keyword\">as</span> fd:</div><div class=\"line\">        <span class=\"keyword\">for</span> chunk <span class=\"keyword\">in</span> r.iter_content(chunk_size=<span class=\"number\">10240</span>):</div><div class=\"line\">            <span class=\"keyword\">if</span> chunk:</div><div class=\"line\">                fd.write(chunk)</div></pre></td></tr></table></figure>\n"}],"PostAsset":[],"PostCategory":[],"PostTag":[{"post_id":"cj84nany000007v4d02eicogq","tag_id":"cj84nanz500047v4dbxlpugt8","_id":"cj84nao0600087v4dasfo5l8i"},{"post_id":"cj84nanyq00027v4dyawta7rq","tag_id":"cj84nao0500077v4dg7auekat","_id":"cj84nao08000a7v4ddfyayh9r"},{"post_id":"cj84nanzw00057v4d0yjsibbb","tag_id":"cj84nao0700097v4dkl73op6k","_id":"cj84nao0a000b7v4dtylqjm8o"},{"post_id":"cj84nao31000j7v4d87li9v8k","tag_id":"cj84nao2y000h7v4dy4vhqahe","_id":"cj84nao38000m7v4dhvchdprz"},{"post_id":"cj84nao2r000f7v4dzfnqvhcc","tag_id":"cj84nao2y000h7v4dy4vhqahe","_id":"cj84nao3c000o7v4dvzgl0smw"},{"post_id":"cj84nao33000k7v4duwljoiwr","tag_id":"cj84nao2y000h7v4dy4vhqahe","_id":"cj84nao3j000r7v4dy7msdtn7"},{"post_id":"cj84nao38000n7v4djpwdo9ki","tag_id":"cj84nao2y000h7v4dy4vhqahe","_id":"cj84nao3m000t7v4dwz0xjqfr"},{"post_id":"cj84nao2v000g7v4d2bv24okn","tag_id":"cj84nao2y000h7v4dy4vhqahe","_id":"cj84nao3p000v7v4d6s6fltqk"},{"post_id":"cj84nao3c000p7v4dnf9ojhzg","tag_id":"cj84nao2y000h7v4dy4vhqahe","_id":"cj84nao3s000x7v4dy7s2p3nk"},{"post_id":"cj84nao3k000s7v4dpaepx6de","tag_id":"cj84nao2y000h7v4dy4vhqahe","_id":"cj84nao3x000z7v4dxaho24e7"},{"post_id":"cj84nao2y000i7v4domr1ucs5","tag_id":"cj84nao2y000h7v4dy4vhqahe","_id":"cj84nao4000117v4dafqtz11c"},{"post_id":"cj84nao3m000u7v4d93fgldyn","tag_id":"cj84nao2y000h7v4dy4vhqahe","_id":"cj84nao4200137v4dlq74nr7l"},{"post_id":"cj84nao3q000w7v4dgk3w4770","tag_id":"cj84nao2y000h7v4dy4vhqahe","_id":"cj84nao4400157v4d9hk7crb4"},{"post_id":"cj84nao3t000y7v4doi63qo1d","tag_id":"cj84nao2y000h7v4dy4vhqahe","_id":"cj84nao4800187v4d8jpdanhl"},{"post_id":"cj84nao3x00107v4db73mymdg","tag_id":"cj84nao2y000h7v4dy4vhqahe","_id":"cj84nao4e001a7v4d3bgs8dlr"},{"post_id":"cj84nao4000127v4d2fjbq6h5","tag_id":"cj84nao2y000h7v4dy4vhqahe","_id":"cj84nao4g001c7v4dpxzy0y42"},{"post_id":"cj84nao4400167v4dbyjl4cod","tag_id":"cj84nao2y000h7v4dy4vhqahe","_id":"cj84nao4q001f7v4dgx5rlaze"},{"post_id":"cj84nao4200147v4d6gcke568","tag_id":"cj84nao4800177v4dbcr2cnwc","_id":"cj84nao4s001h7v4dhlos86a7"},{"post_id":"cj84nao4q001g7v4dre4pzbnn","tag_id":"cj84nao4p001e7v4dm839tkqe","_id":"cj84nao4w001k7v4d7lnvkuf3"},{"post_id":"cj84nao4900197v4dhurskvux","tag_id":"cj84nao4p001e7v4dm839tkqe","_id":"cj84nao50001l7v4di26rhp5d"},{"post_id":"cj84nao4t001i7v4d2cbfgdsj","tag_id":"cj84nao4p001e7v4dm839tkqe","_id":"cj84nao51001n7v4dytvtk69i"},{"post_id":"cj84nao4e001b7v4dsnhknafl","tag_id":"cj84nao4v001j7v4dxhldmnk0","_id":"cj84nao53001o7v4d8l00ioz6"},{"post_id":"cj84nao4g001d7v4dsrahtk41","tag_id":"cj84nao4p001e7v4dm839tkqe","_id":"cj84nao54001p7v4dyumkpnnh"}],"Tag":[{"name":"shell","_id":"cj84nanz500047v4dbxlpugt8"},{"name":"consul","_id":"cj84nao0500077v4dg7auekat"},{"name":"spark, hadoop","_id":"cj84nao0700097v4dkl73op6k"},{"name":"golang","_id":"cj84nao2y000h7v4dy4vhqahe"},{"name":"mysql","_id":"cj84nao4800177v4dbcr2cnwc"},{"name":"python","_id":"cj84nao4p001e7v4dm839tkqe"},{"name":"networking","_id":"cj84nao4v001j7v4dxhldmnk0"}]}}