{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"themes/yelee/source/apple-touch-icon.png","path":"apple-touch-icon.png","modified":0,"renderable":1},{"_id":"themes/yelee/source/background/bg-1.jpg","path":"background/bg-1.jpg","modified":0,"renderable":1},{"_id":"themes/yelee/source/background/bg-2.jpg","path":"background/bg-2.jpg","modified":0,"renderable":1},{"_id":"themes/yelee/source/background/bg-3.jpg","path":"background/bg-3.jpg","modified":0,"renderable":1},{"_id":"themes/yelee/source/background/bg-4.jpg","path":"background/bg-4.jpg","modified":0,"renderable":1},{"_id":"themes/yelee/source/css/style.styl","path":"css/style.styl","modified":0,"renderable":1},{"_id":"themes/yelee/source/img/AcFun.png","path":"img/AcFun.png","modified":0,"renderable":1},{"_id":"themes/yelee/source/img/CSDN.png","path":"img/CSDN.png","modified":0,"renderable":1},{"_id":"themes/yelee/source/img/Coding.png","path":"img/Coding.png","modified":0,"renderable":1},{"_id":"themes/yelee/source/img/LOFTER.png","path":"img/LOFTER.png","modified":0,"renderable":1},{"_id":"themes/yelee/source/img/Plunker.png","path":"img/Plunker.png","modified":0,"renderable":1},{"_id":"themes/yelee/source/img/Quora.png","path":"img/Quora.png","modified":0,"renderable":1},{"_id":"themes/yelee/source/img/SegmentFault.png","path":"img/SegmentFault.png","modified":0,"renderable":1},{"_id":"themes/yelee/source/img/TiddlyWiki.png","path":"img/TiddlyWiki.png","modified":0,"renderable":1},{"_id":"themes/yelee/source/img/V2EX.png","path":"img/V2EX.png","modified":0,"renderable":1},{"_id":"themes/yelee/source/img/avatar.png","path":"img/avatar.png","modified":0,"renderable":1},{"_id":"themes/yelee/source/img/bilibili.png","path":"img/bilibili.png","modified":0,"renderable":1},{"_id":"themes/yelee/source/img/niconico.png","path":"img/niconico.png","modified":0,"renderable":1},{"_id":"themes/yelee/source/img/scrollbar_arrow.png","path":"img/scrollbar_arrow.png","modified":0,"renderable":1},{"_id":"themes/yelee/source/img/博客园.png","path":"img/博客园.png","modified":0,"renderable":1},{"_id":"themes/yelee/source/img/新浪微博.png","path":"img/新浪微博.png","modified":0,"renderable":1},{"_id":"themes/yelee/source/img/知乎.png","path":"img/知乎.png","modified":0,"renderable":1},{"_id":"themes/yelee/source/img/简书.png","path":"img/简书.png","modified":0,"renderable":1},{"_id":"themes/yelee/source/img/网易云音乐.png","path":"img/网易云音乐.png","modified":0,"renderable":1},{"_id":"themes/yelee/source/img/虾米音乐.png","path":"img/虾米音乐.png","modified":0,"renderable":1},{"_id":"themes/yelee/source/img/豆瓣.png","path":"img/豆瓣.png","modified":0,"renderable":1},{"_id":"themes/yelee/source/js/GithubRepoWidget.js","path":"js/GithubRepoWidget.js","modified":0,"renderable":1},{"_id":"themes/yelee/source/js/instagram.js","path":"js/instagram.js","modified":0,"renderable":1},{"_id":"themes/yelee/source/js/main.js","path":"js/main.js","modified":0,"renderable":1},{"_id":"themes/yelee/source/js/mobile.js","path":"js/mobile.js","modified":0,"renderable":1},{"_id":"themes/yelee/source/js/pc.js","path":"js/pc.js","modified":0,"renderable":1},{"_id":"themes/yelee/source/js/search.js","path":"js/search.js","modified":0,"renderable":1},{"_id":"themes/yelee/source/js/toc.js","path":"js/toc.js","modified":0,"renderable":1},{"_id":"themes/yelee/source/background/bg-5.jpg","path":"background/bg-5.jpg","modified":0,"renderable":1},{"_id":"themes/yelee/source/background/bg-6.jpg","path":"background/bg-6.jpg","modified":0,"renderable":1},{"_id":"themes/yelee/source/background/backup/bg-1.jpg","path":"background/backup/bg-1.jpg","modified":0,"renderable":1},{"_id":"themes/yelee/source/background/backup/bg-2.jpg","path":"background/backup/bg-2.jpg","modified":0,"renderable":1},{"_id":"themes/yelee/source/background/backup/bg-3.jpg","path":"background/backup/bg-3.jpg","modified":0,"renderable":1},{"_id":"themes/yelee/source/background/backup/bg-4.jpg","path":"background/backup/bg-4.jpg","modified":0,"renderable":1}],"Cache":[{"_id":"themes/yelee/.gitignore","hash":"237760b38ce80bcc3a8b556566bef0295c145393","modified":1500703875687},{"_id":"themes/yelee/README.md","hash":"12bc9cdb68f51df81bcc36a5263e0a6c5860f646","modified":1500703875687},{"_id":"themes/yelee/_config.yml","hash":"6d8c4d6f1e3cfcbbf312475618e25d5cf41db18d","modified":1501946156418},{"_id":"themes/yelee/package.json","hash":"0199dfb3d44cf520b67464817d13c44a7766b8d6","modified":1500703875689},{"_id":"source/404/index.md","hash":"ba4482e55221f6c6466d2435e9d66d9a644b5d83","modified":1501740315350},{"_id":"source/_posts/基于Docker的Consul-官方镜像-集群部署指南.md","hash":"416866ab3ce3b67f9f80ff4b14d8b4c90c41280f","modified":1502072018394},{"_id":"source/aboutme/index.md","hash":"a355e3a8bbf5a9ccc45ac2d5a26776f0d28499c3","modified":1501658628649},{"_id":"source/tags/index.md","hash":"595d07dc68e6ecca77fe38b425caefdf2e9d91cb","modified":1501740303672},{"_id":"themes/yelee/.git/HEAD","hash":"acbaef275e46a7f14c1ef456fff2c8bbe8c84724","modified":1500703875684},{"_id":"themes/yelee/.git/config","hash":"de8eaeefa12aa07502884e265b5e0d4c2262178f","modified":1500703875685},{"_id":"themes/yelee/.git/description","hash":"9635f1b7e12c045212819dd934d809ef07efa2f4","modified":1500703852630},{"_id":"themes/yelee/.git/index","hash":"07f18ac2ce82a9c20c42aa933cd3d77f7b501b73","modified":1500730580049},{"_id":"themes/yelee/.git/packed-refs","hash":"fad6a43ad617793304d9241562a71596db559018","modified":1500703875640},{"_id":"themes/yelee/.github/ISSUE_TEMPLATE.md","hash":"09e2580d457ce93b4d7d554b75618036b45f8717","modified":1500703875687},{"_id":"themes/yelee/languages/default.yml","hash":"80cc17267333753accc0b1c85a73678fedcbce76","modified":1500703875687},{"_id":"themes/yelee/languages/en.yml","hash":"2c096d06c0af4ddf9c128fc8f77fb276b59a47fb","modified":1500703875688},{"_id":"themes/yelee/languages/zh-Hans.yml","hash":"b5b2d20cde04db3773962284a002d025b09134b0","modified":1500703875688},{"_id":"themes/yelee/languages/zh-Hant-HK.yml","hash":"c38a95f5076ad951839aaf7748295d7eea277c61","modified":1500703875688},{"_id":"themes/yelee/languages/zh-Hant-TW.yml","hash":"f372cc0d758a7d8bbb885aa9756d607bec26469a","modified":1500703875688},{"_id":"themes/yelee/layout/archive.ejs","hash":"2703b07cc8ac64ae46d1d263f4653013c7e1666b","modified":1500703875689},{"_id":"themes/yelee/layout/category.ejs","hash":"765426a9c8236828dc34759e604cc2c52292835a","modified":1500703875689},{"_id":"themes/yelee/layout/index.ejs","hash":"aa1b4456907bdb43e629be3931547e2d29ac58c8","modified":1500703875689},{"_id":"themes/yelee/layout/layout.ejs","hash":"3a4350f23a1286345f76c949466c97a7200dae8e","modified":1500703875689},{"_id":"themes/yelee/layout/page.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1500703875689},{"_id":"themes/yelee/layout/post.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1500703875689},{"_id":"themes/yelee/layout/tag.ejs","hash":"eaa7b4ccb2ca7befb90142e4e68995fb1ea68b2e","modified":1500703875689},{"_id":"themes/yelee/source/apple-touch-icon.png","hash":"c0fda117fa166d63b9eb690cc5e4fb2caaf493b3","modified":1500703875689},{"_id":"source/_posts/about/about.md","hash":"51851602a98538693728eea908e2ab877669d7c9","modified":1501658910881},{"_id":"source/_posts/encode/base64.md","hash":"3ba5f81eb101cb9f7e58c01cb6f97e9c149345ff","modified":1500791777117},{"_id":"source/_posts/encode/centos_zh.md","hash":"54f2882adb978b24b16d6ca46985b665e8441623","modified":1500791659741},{"_id":"source/_posts/golang/golang_array-slice.md","hash":"1f35f3fd506f13bdd713c10d34f6392c01665663","modified":1502084830146},{"_id":"source/_posts/golang/golang_channel.md","hash":"9ee1ccd321012b2fbd75860fce2c2acdd04290b6","modified":1502084830146},{"_id":"source/_posts/golang/golang_function.md","hash":"9bed7e3694772ccb9e50e36fc328c688782d8356","modified":1502084830146},{"_id":"source/_posts/golang/golang_gRPC.md","hash":"496617d1f97094b9821e71de1fc57fe9c2a385fa","modified":1502084830146},{"_id":"source/_posts/golang/golang_goroutine.md","hash":"8c63262c813a64c82f1f9a564a300ac6a72bb334","modified":1502084830146},{"_id":"source/_posts/golang/golang_http-server.md","hash":"96becc852c7d024a8ae5c8104f9f72d3be6579bc","modified":1502084830146},{"_id":"source/_posts/golang/golang_interface.md","hash":"189fb036b2dbd2fd546f0dc5a10fa00048d8c6e3","modified":1502084830146},{"_id":"source/_posts/golang/golang_map-set.md","hash":"443180c06997219541b3cc19ac557943dc0a6c88","modified":1502084830147},{"_id":"source/_posts/golang/golang_pointer.md","hash":"5a1379684f65006091edaaab9ec68f58d22069db","modified":1502074717447},{"_id":"source/_posts/mysql/mysql_concurrent_query.md","hash":"d7383843d149e7ee25ddff1d551c05bbef3bc23c","modified":1502084830147},{"_id":"themes/yelee/.git/hooks/applypatch-msg.sample","hash":"86b9655a9ebbde13ac8dd5795eb4d5b539edab0f","modified":1500703852630},{"_id":"themes/yelee/.git/hooks/commit-msg.sample","hash":"ee1ed5aad98a435f2020b6de35c173b75d9affac","modified":1500703852630},{"_id":"themes/yelee/.git/hooks/post-update.sample","hash":"b614c2f63da7dca9f1db2e7ade61ef30448fc96c","modified":1500703852630},{"_id":"themes/yelee/.git/hooks/pre-applypatch.sample","hash":"42fa41564917b44183a50c4d94bb03e1768ddad8","modified":1500703852630},{"_id":"themes/yelee/.git/hooks/pre-commit.sample","hash":"e6c9fe47f7506171be08ed90baaf91d49bc7fe0c","modified":1500703852630},{"_id":"themes/yelee/.git/hooks/pre-push.sample","hash":"503c3d2cd9066c2329ae84309c03a4c274f6d90e","modified":1500703852630},{"_id":"themes/yelee/.git/hooks/pre-rebase.sample","hash":"5885a56ab4fca8075a05a562d005e922cde9853b","modified":1500703852630},{"_id":"themes/yelee/.git/hooks/prepare-commit-msg.sample","hash":"2b6275eda365cad50d167fe3a387c9bc9fedd54f","modified":1500703852630},{"_id":"themes/yelee/.git/hooks/update.sample","hash":"39355a075977d05708ef74e1b66d09a36e486df1","modified":1500703852630},{"_id":"themes/yelee/.git/info/exclude","hash":"c879df015d97615050afa7b9641e3352a1e701ac","modified":1500703852630},{"_id":"themes/yelee/.git/logs/HEAD","hash":"9a5069cc3494f9ec12ef34c4474fa8d0659ccd7b","modified":1500703875684},{"_id":"themes/yelee/layout/_partial/after-footer.ejs","hash":"748391b89b661fa1ed7da0b15ed6870981ec4dc3","modified":1500703875688},{"_id":"themes/yelee/layout/_partial/archive-post.ejs","hash":"0ecc2ad07b4abad80f564ac1858c50bcbdff34f8","modified":1500703875688},{"_id":"themes/yelee/layout/_partial/archive.ejs","hash":"a4eacc2bc1278095a0ef99f904b0634c78f980eb","modified":1500703875688},{"_id":"themes/yelee/layout/_partial/article.ejs","hash":"afd85b362d732fa9b439af7dc44b657d0d1aae3d","modified":1500703875688},{"_id":"themes/yelee/layout/_partial/background.ejs","hash":"aeef39abef66ee0bd6c9efe856eaeb1b81416d41","modified":1500703875688},{"_id":"themes/yelee/layout/_partial/footer.ejs","hash":"82653e3bbdc605b51e1b0a36e30f3ac1180c838e","modified":1500703875688},{"_id":"themes/yelee/layout/_partial/google-analytics.ejs","hash":"1ccc627d7697e68fddc367c73ac09920457e5b35","modified":1500703875688},{"_id":"themes/yelee/layout/_partial/head.ejs","hash":"55e90c3d5de6d7ffcfe26c4dc22189a7a27b6651","modified":1500703875688},{"_id":"themes/yelee/layout/_partial/header.ejs","hash":"b69855e07b65117769adc515cb64b803932068c9","modified":1500703875688},{"_id":"themes/yelee/layout/_partial/ie-updater.ejs","hash":"3e5f2e41bbb1a5b93a8a7a6cb9ccd191ced54408","modified":1500703875688},{"_id":"themes/yelee/layout/_partial/left-col.ejs","hash":"90fd7c763faf8d64d58612f592cbacbefdaea161","modified":1500703875688},{"_id":"themes/yelee/layout/_partial/mathjax.ejs","hash":"ce868f8b2b5b377cadc270e3a5bb5826f8bf0dee","modified":1500703875688},{"_id":"themes/yelee/layout/_partial/mobile-nav.ejs","hash":"306be982577b0ef968f855d0dfeaab6b180b8a50","modified":1500703875688},{"_id":"themes/yelee/layout/_partial/open-in-new-tab.ejs","hash":"a6046bc322ce9194faa9559c70e1618a7e1e4cbc","modified":1500703875688},{"_id":"themes/yelee/layout/_partial/page.ejs","hash":"cfce60062cdb60893baeda7fa0266ae4086c2bc8","modified":1500703875689},{"_id":"themes/yelee/layout/_partial/post-nav-button.ejs","hash":"0a98bffdd14f6677721841c0ac4487a86c77266c","modified":1500703875689},{"_id":"themes/yelee/layout/_partial/scrolling-button.ejs","hash":"c5e1c3a8e1e6b0d927ac25a7fb8720ee7ac83ad8","modified":1500703875689},{"_id":"themes/yelee/layout/_partial/tab-title-change.ejs","hash":"1bebab6eb7a849319cd48fe051f3c71b9349a723","modified":1500703875689},{"_id":"themes/yelee/layout/_partial/tag-cloud-page.ejs","hash":"432ded02bcc1f0d52cd833e8eeac688ee886169a","modified":1500703875689},{"_id":"themes/yelee/layout/_partial/toc.ejs","hash":"7ee88b1a98eea5cbd44c0f9a11b86b46aa2d6752","modified":1500703875689},{"_id":"themes/yelee/source/background/bg-1.jpg","hash":"9a5241de4c880f13a278f6980bf11d4dfb214d82","modified":1500703875691},{"_id":"themes/yelee/source/background/bg-2.jpg","hash":"d1e0b92e8fa822e44d185b5e1bf94ab47bc98a0a","modified":1500703875691},{"_id":"themes/yelee/source/background/bg-3.jpg","hash":"d476909f06fe8267c676952e3582bf9e9ff73585","modified":1500703875691},{"_id":"themes/yelee/source/background/bg-4.jpg","hash":"8e80d0b7786c3bf7b9648c0190719e78001e9eeb","modified":1500703875692},{"_id":"themes/yelee/source/css/_extend.styl","hash":"8ab1ad313bd6707d248c5ca1ee9a5eab8d815e42","modified":1500703875693},{"_id":"themes/yelee/source/css/_variables.styl","hash":"f429eb9bc9f0a270ec68c4f4c63903250746a01c","modified":1500703875694},{"_id":"themes/yelee/source/css/style.styl","hash":"b285f9a75abd09c7d06fe89e70f9e1819eac27dd","modified":1500703875695},{"_id":"themes/yelee/source/img/AcFun.png","hash":"df6b0fa39ced4dc988359fc7b7cd1e5403de08a6","modified":1500703875695},{"_id":"themes/yelee/source/img/CSDN.png","hash":"59f7d89eda8a7310a0ee1607e153c0829af7eb6e","modified":1500703875695},{"_id":"themes/yelee/source/img/Coding.png","hash":"afb4bce19bebf61e3c486fd5199369d6eb191b78","modified":1500703875695},{"_id":"themes/yelee/source/img/LOFTER.png","hash":"88670eaea8612839e9d6a40a3636e4231ab56c0f","modified":1500703875695},{"_id":"themes/yelee/source/img/Plunker.png","hash":"14a0054b9b4a0e459987f34b9ab48ab22dbe5cf9","modified":1500703875695},{"_id":"themes/yelee/source/img/Quora.png","hash":"1a624ade0d07f2482b21bef1e2a5ddd0110ba352","modified":1500703875695},{"_id":"themes/yelee/source/img/SegmentFault.png","hash":"1afbc7e575e2e9ed9404be84a3f92f7ca8345a9c","modified":1500703875695},{"_id":"themes/yelee/source/img/TiddlyWiki.png","hash":"b7f68f8f9c45561a9455aee0bfb80e35cae6f8df","modified":1500703875695},{"_id":"themes/yelee/source/img/V2EX.png","hash":"d0768de8555f9be0ee8ce956198cef454d4e4d7c","modified":1500703875695},{"_id":"themes/yelee/source/img/avatar.png","hash":"e4bca3d60087cd6e775d8e2aa2bf0d35e3859592","modified":1500703875695},{"_id":"themes/yelee/source/img/bilibili.png","hash":"be37b7e9a091c8547b8ee8b9d29583af8ded61c0","modified":1500703875695},{"_id":"themes/yelee/source/img/niconico.png","hash":"fabc7ca45e9ee5698db33a25de8b1f8a7c7d6723","modified":1500703875695},{"_id":"themes/yelee/source/img/scrollbar_arrow.png","hash":"af987032f2171867bb58b165d2180eb5dcbea637","modified":1500703875695},{"_id":"themes/yelee/source/img/博客园.png","hash":"5ff6f4c9f1fc1695217a57436d58b246d9d2f197","modified":1500703875695},{"_id":"themes/yelee/source/img/新浪微博.png","hash":"7a145ed1daee0c172cda77098f4254fc21f9eeee","modified":1500703875695},{"_id":"themes/yelee/source/img/知乎.png","hash":"ed6d3c304789e112d09f40784fa6add1f1a38bd6","modified":1500703875695},{"_id":"themes/yelee/source/img/简书.png","hash":"5c91ee83cab4abe160240e09de345b6935c8cb37","modified":1500703875695},{"_id":"themes/yelee/source/img/网易云音乐.png","hash":"4fd1275fd988584811cf710207eb077f2306f271","modified":1500703875695},{"_id":"themes/yelee/source/img/虾米音乐.png","hash":"a0039b049779b1f37c0b0b91760943b7bf25c8f1","modified":1500703875695},{"_id":"themes/yelee/source/img/豆瓣.png","hash":"f1fc97f98612bcdf4a681542e5388483b40a5300","modified":1500703875695},{"_id":"themes/yelee/source/js/GithubRepoWidget.js","hash":"624e81a3b0e57495b0c0e0b3e056296c6e8ae5df","modified":1500703875695},{"_id":"themes/yelee/source/js/instagram.js","hash":"81e13cacf4947118ed1920e59b04ccf6beef6b86","modified":1500703875695},{"_id":"themes/yelee/source/js/main.js","hash":"369774a7ff45a2e5117a796330a04aeb50a61fdf","modified":1500703875695},{"_id":"themes/yelee/source/js/mobile.js","hash":"8abc32d18f16db56f51caad607cffb6ca756eca9","modified":1500703875695},{"_id":"themes/yelee/source/js/pc.js","hash":"bc289c5dc610e2a34d308daeb9adea96d01f7788","modified":1500703875695},{"_id":"themes/yelee/source/js/search.js","hash":"b456aaab98bbc3b0906f8a16d1e6e4f74dfcffda","modified":1500703875696},{"_id":"themes/yelee/source/js/toc.js","hash":"72ba1228fc1a44df45b8f4b562eba78594f13016","modified":1500703875696},{"_id":"themes/yelee/source/background/bg-5.jpg","hash":"e4a3631b6b0f94ebce30a6f01ecb2b6ed7cfdb0b","modified":1500703875692},{"_id":"themes/yelee/source/background/bg-6.jpg","hash":"51b427f07ffc6f2ad97651f23cc16e8f19ed02f9","modified":1500703875693},{"_id":"themes/yelee/.git/refs/heads/master","hash":"a098c9ba7d644627d0ba7fb675f0168faedeb258","modified":1500703875684},{"_id":"themes/yelee/layout/_partial/comments/click2show.ejs","hash":"678f3aec2980d378ea44be60eec3eb504c8ba668","modified":1500703875688},{"_id":"themes/yelee/layout/_partial/comments/count-comment.ejs","hash":"d3c1b0b31db9d80e857f3054d010ea49c0f88134","modified":1500703875688},{"_id":"themes/yelee/layout/_partial/comments/disqus.ejs","hash":"df7ee469b648b12b5ee3104ef513d54cbb7418af","modified":1500703875688},{"_id":"themes/yelee/layout/_partial/comments/duoshuo.ejs","hash":"e7f12f1246a67a5b556c2d5b37dc78733f1cf15a","modified":1500703875688},{"_id":"themes/yelee/layout/_partial/comments/youyan.ejs","hash":"bcf2070587645afd20a4eb046b9c8bb9c44d1cf5","modified":1500703875688},{"_id":"themes/yelee/layout/_partial/post/category.ejs","hash":"08c8d98bc6a73d3f72a3b0b30521ff28e1b657a7","modified":1500703875689},{"_id":"themes/yelee/layout/_partial/post/date.ejs","hash":"329ed372296a86bce73ff8936af5601723fdd70a","modified":1500703875689},{"_id":"themes/yelee/layout/_partial/post/nav.ejs","hash":"6f531dbc9cc7ae42d2486d6707f826cfe7d9d8bc","modified":1500703875689},{"_id":"themes/yelee/layout/_partial/post/share.ejs","hash":"58c2db54a9867aaafe68a7f052b04701c7c3df0f","modified":1500703875689},{"_id":"themes/yelee/layout/_partial/post/tag.ejs","hash":"7d2693a1162bf26e4b1ae9b789e0b2a2637ddbd5","modified":1500703875689},{"_id":"themes/yelee/layout/_partial/post/title.ejs","hash":"d4a460a35e2112d0c7414fd5e19b3a16093f1caf","modified":1500703875689},{"_id":"themes/yelee/source/background/backup/bg-1.jpg","hash":"31d7bb15211000c05656899302f8ec9ee3de0e9f","modified":1500703875689},{"_id":"themes/yelee/source/background/backup/bg-2.jpg","hash":"7ae358f3ab8b41558444053400e796c41b3ba0e2","modified":1500703875690},{"_id":"themes/yelee/source/background/backup/bg-3.jpg","hash":"1a06d3a660bfb99b62d760e4e1e09de168a4c74c","modified":1500703875690},{"_id":"themes/yelee/source/background/backup/bg-4.jpg","hash":"6df1383d0f6134016d844df9abb740a6e0c0b2c5","modified":1500703875690},{"_id":"themes/yelee/source/css/_partial/archive.styl","hash":"102c23dbb6cde3cbfca3b151c742e0d77911186e","modified":1500703875693},{"_id":"themes/yelee/source/css/_partial/article.styl","hash":"190828c822096bb3098a7d14c3340eb004057aa0","modified":1500703875693},{"_id":"themes/yelee/source/css/_partial/footer.styl","hash":"a419108f1b820c59fcc56d218bfaaa4ffc4f1d4d","modified":1500703875694},{"_id":"themes/yelee/source/css/_partial/header.styl","hash":"67e59feb18eee6026717cb440d86ab9551782628","modified":1500703875694},{"_id":"themes/yelee/source/css/_partial/highlight.styl","hash":"4e34bf9340ce9b15d2d59fc4ea761d1d110927cf","modified":1500703875694},{"_id":"themes/yelee/source/css/_partial/instagram.styl","hash":"a093443add2f529396d6b6bdef1675bc3acf3958","modified":1500703875694},{"_id":"themes/yelee/source/css/_partial/main.styl","hash":"405db411896f3c7de9e7dd27e58c920fb90b9834","modified":1500703875694},{"_id":"themes/yelee/source/css/_partial/mobile-slider.styl","hash":"39db458d4e9f6973afc1390b4d3fc0291fff4c40","modified":1500703875694},{"_id":"themes/yelee/source/css/_partial/mobile.styl","hash":"dfb20f2515a26d75e42fe09741e91cc889426b11","modified":1500703875694},{"_id":"themes/yelee/source/css/_partial/page.styl","hash":"ca3f871adf8fdb296e4394070605dded53d93cb2","modified":1500703875694},{"_id":"themes/yelee/source/css/_partial/scroll.styl","hash":"f32deb9192568a2ea789d77a23a08d07f4e57d59","modified":1500703875694},{"_id":"themes/yelee/source/css/_partial/search.styl","hash":"fcaa5deaa654aaec69e267e23b49df07f84f633a","modified":1500703875694},{"_id":"themes/yelee/source/css/_partial/share.styl","hash":"88c1277397b71eb1f3473a94d9542314f983cd09","modified":1500703875694},{"_id":"themes/yelee/source/css/_partial/tagcloud.styl","hash":"b38b275728bfe11809defe1077b03cb423c3c92f","modified":1500703875694},{"_id":"themes/yelee/source/css/_partial/toc.styl","hash":"eb19bbd37fc2c1abd238e2ed96b22cb1aae41ab7","modified":1500703875694},{"_id":"themes/yelee/source/css/_partial/wheelmenu.styl","hash":"9e57421eab562ea13d0ed2b2e1415eee79fa23d0","modified":1500703875694},{"_id":"themes/yelee/source/css/_util/grid.styl","hash":"1aa883ab432d9e4139c89dcbd40ae2bd1528d029","modified":1500703875694},{"_id":"themes/yelee/source/css/_util/mixin.styl","hash":"429bad87fc156eacf226c5e35b0eafc277f2504b","modified":1500703875694},{"_id":"themes/yelee/.git/objects/pack/pack-59affa74ed601a29ae69d8ed48fb88869bb5af45.idx","hash":"18f4a7bf08fa22a128532e52e72ebd1e3fb214b6","modified":1500703875463},{"_id":"themes/yelee/.git/logs/refs/heads/master","hash":"9a5069cc3494f9ec12ef34c4474fa8d0659ccd7b","modified":1500703875684},{"_id":"themes/yelee/.git/refs/remotes/origin/HEAD","hash":"d9427cda09aba1cdde5c69c2b13c905bddb0bc51","modified":1500703875684},{"_id":"themes/yelee/source/css/_partial/customise/blockquote.styl","hash":"5e6edb9ad49288743ed550a2bd8c9a3c8e208455","modified":1500703875693},{"_id":"themes/yelee/source/css/_partial/customise/code-block.styl","hash":"4db1a992a06fd92b779f0afc9bb8bb3667bdb101","modified":1500703875693},{"_id":"themes/yelee/source/css/_partial/customise/color-scheme.styl","hash":"b58262a9f8903e75df431291745e19ccd8ff243a","modified":1500703875693},{"_id":"themes/yelee/source/css/_partial/customise/heading.styl","hash":"f309241c1daa9b6c04aa04063307537c219fdd59","modified":1500703875693},{"_id":"themes/yelee/source/css/_partial/customise/inline-code.styl","hash":"a15292b2b3541ea022c0fb7441875192dee5ad9d","modified":1500703875693},{"_id":"themes/yelee/source/css/_partial/customise/list.styl","hash":"b1e564ed76d6e892556b61b4278270fc9eeea961","modified":1500703875693},{"_id":"themes/yelee/source/css/_partial/customise/social-icon.styl","hash":"bfa5c863d474266f32a570e34a0effda964f7f40","modified":1500703875694},{"_id":"themes/yelee/.git/logs/refs/remotes/origin/HEAD","hash":"9a5069cc3494f9ec12ef34c4474fa8d0659ccd7b","modified":1500703875684},{"_id":"themes/yelee/.git/objects/pack/pack-59affa74ed601a29ae69d8ed48fb88869bb5af45.pack","hash":"62b2bee01e3da1a36f36b55affd9497760a33340","modified":1500703875461},{"_id":"public/404/index.html","hash":"648a83df9234c4edda8feacfc1de65f0680f0f38","modified":1502084872574},{"_id":"public/aboutme/index.html","hash":"0f61bb2c0557b41ad8fa1061ffea676b599d971f","modified":1502084872574},{"_id":"public/archives/2015/index.html","hash":"6ba6eebffb65f08ea8a9ff968d12965fa27f6447","modified":1502084872575},{"_id":"public/archives/2015/07/index.html","hash":"e336b9fac3cb77e3a3a052f9272149968745ed53","modified":1502084872575},{"_id":"public/archives/2016/index.html","hash":"958dc8fe783c0f155b112ff1996becfea157f074","modified":1502084872587},{"_id":"public/archives/2016/04/index.html","hash":"8a799075e55b66fcb3cfe24630082fe56e87ed29","modified":1502084872584},{"_id":"public/archives/2017/index.html","hash":"234f4baedde7437c98468bacd8091934662ea887","modified":1502084872587},{"_id":"public/archives/2017/07/index.html","hash":"19a31ef9c166d5feaca0a36f2b636bdfdc4ea287","modified":1502084872585},{"_id":"public/tags/consul/index.html","hash":"ca790059c21ebc3a0bf016475cf83398e8072f25","modified":1502084872585},{"_id":"public/tags/golang/index.html","hash":"347e1feedfddd5879624a2941191be3c6805ef07","modified":1502084872587},{"_id":"public/tags/index.html","hash":"ea324a3b9f4fc3a72e4c79756711d1f1c4eda886","modified":1502084872585},{"_id":"public/2017/07/31/基于Docker的Consul-官方镜像-集群部署指南/index.html","hash":"b2d10e92ffbac1112906105e7d6e8a81e214b7b8","modified":1502084872585},{"_id":"public/2017/07/23/encode/base64/index.html","hash":"25895aa92c89b93b9a3a0e1e78d3153265269351","modified":1502084872585},{"_id":"public/2017/07/23/encode/centos_zh/index.html","hash":"99ff9874c9ffec8e0e0318e2dd221fcc143f2a69","modified":1502084872585},{"_id":"public/2016/04/05/golang/golang_pointer/index.html","hash":"5ae888563d12de17806b1f34de4ca03acc1778a8","modified":1502084872585},{"_id":"public/2015/07/22/about/about/index.html","hash":"a1f5533888138efeb3d22ad0c007ee82da838f21","modified":1502084872587},{"_id":"public/archives/index.html","hash":"acfdce83306254bd92fee495131d59d84798b796","modified":1502084872587},{"_id":"public/index.html","hash":"912530e80e5e240967903f87793c1a31c2777d42","modified":1502084872587},{"_id":"public/apple-touch-icon.png","hash":"c0fda117fa166d63b9eb690cc5e4fb2caaf493b3","modified":1502084446279},{"_id":"public/background/bg-1.jpg","hash":"9a5241de4c880f13a278f6980bf11d4dfb214d82","modified":1502084446279},{"_id":"public/background/bg-2.jpg","hash":"d1e0b92e8fa822e44d185b5e1bf94ab47bc98a0a","modified":1502084446279},{"_id":"public/background/bg-3.jpg","hash":"d476909f06fe8267c676952e3582bf9e9ff73585","modified":1502084446279},{"_id":"public/background/bg-4.jpg","hash":"8e80d0b7786c3bf7b9648c0190719e78001e9eeb","modified":1502084446279},{"_id":"public/img/AcFun.png","hash":"df6b0fa39ced4dc988359fc7b7cd1e5403de08a6","modified":1502084446279},{"_id":"public/img/CSDN.png","hash":"59f7d89eda8a7310a0ee1607e153c0829af7eb6e","modified":1502084446279},{"_id":"public/img/Coding.png","hash":"afb4bce19bebf61e3c486fd5199369d6eb191b78","modified":1502084446280},{"_id":"public/img/LOFTER.png","hash":"88670eaea8612839e9d6a40a3636e4231ab56c0f","modified":1502084446280},{"_id":"public/img/Plunker.png","hash":"14a0054b9b4a0e459987f34b9ab48ab22dbe5cf9","modified":1502084446280},{"_id":"public/img/Quora.png","hash":"1a624ade0d07f2482b21bef1e2a5ddd0110ba352","modified":1502084446280},{"_id":"public/img/SegmentFault.png","hash":"1afbc7e575e2e9ed9404be84a3f92f7ca8345a9c","modified":1502084446280},{"_id":"public/img/TiddlyWiki.png","hash":"b7f68f8f9c45561a9455aee0bfb80e35cae6f8df","modified":1502084446280},{"_id":"public/img/V2EX.png","hash":"d0768de8555f9be0ee8ce956198cef454d4e4d7c","modified":1502084446280},{"_id":"public/img/avatar.png","hash":"e4bca3d60087cd6e775d8e2aa2bf0d35e3859592","modified":1502084446280},{"_id":"public/img/bilibili.png","hash":"be37b7e9a091c8547b8ee8b9d29583af8ded61c0","modified":1502084446280},{"_id":"public/img/niconico.png","hash":"fabc7ca45e9ee5698db33a25de8b1f8a7c7d6723","modified":1502084446280},{"_id":"public/img/scrollbar_arrow.png","hash":"af987032f2171867bb58b165d2180eb5dcbea637","modified":1502084446280},{"_id":"public/img/博客园.png","hash":"5ff6f4c9f1fc1695217a57436d58b246d9d2f197","modified":1502084446281},{"_id":"public/img/新浪微博.png","hash":"7a145ed1daee0c172cda77098f4254fc21f9eeee","modified":1502084446281},{"_id":"public/img/知乎.png","hash":"ed6d3c304789e112d09f40784fa6add1f1a38bd6","modified":1502084446281},{"_id":"public/img/简书.png","hash":"5c91ee83cab4abe160240e09de345b6935c8cb37","modified":1502084446281},{"_id":"public/img/网易云音乐.png","hash":"4fd1275fd988584811cf710207eb077f2306f271","modified":1502084446281},{"_id":"public/img/虾米音乐.png","hash":"a0039b049779b1f37c0b0b91760943b7bf25c8f1","modified":1502084446281},{"_id":"public/img/豆瓣.png","hash":"f1fc97f98612bcdf4a681542e5388483b40a5300","modified":1502084446281},{"_id":"public/background/backup/bg-1.jpg","hash":"31d7bb15211000c05656899302f8ec9ee3de0e9f","modified":1502084446281},{"_id":"public/background/backup/bg-2.jpg","hash":"7ae358f3ab8b41558444053400e796c41b3ba0e2","modified":1502084446281},{"_id":"public/background/backup/bg-3.jpg","hash":"1a06d3a660bfb99b62d760e4e1e09de168a4c74c","modified":1502084446282},{"_id":"public/background/backup/bg-4.jpg","hash":"6df1383d0f6134016d844df9abb740a6e0c0b2c5","modified":1502084446282},{"_id":"public/background/bg-5.jpg","hash":"e4a3631b6b0f94ebce30a6f01ecb2b6ed7cfdb0b","modified":1502084447807},{"_id":"public/background/bg-6.jpg","hash":"51b427f07ffc6f2ad97651f23cc16e8f19ed02f9","modified":1502084447811},{"_id":"public/js/GithubRepoWidget.js","hash":"624e81a3b0e57495b0c0e0b3e056296c6e8ae5df","modified":1502084447825},{"_id":"public/js/instagram.js","hash":"f19adbcc0dac33536bc6660598059048ec901882","modified":1502084447825},{"_id":"public/js/main.js","hash":"d58bbc593d94d48e85d4ebfb002910444080cb06","modified":1502084447825},{"_id":"public/js/mobile.js","hash":"0f4c1fcd6df47a196ed9495c225173402aa7d769","modified":1502084447825},{"_id":"public/js/pc.js","hash":"19a1660b10358046e7a1f398284491519b2ffd47","modified":1502084447825},{"_id":"public/js/search.js","hash":"b456aaab98bbc3b0906f8a16d1e6e4f74dfcffda","modified":1502084447825},{"_id":"public/js/toc.js","hash":"72ba1228fc1a44df45b8f4b562eba78594f13016","modified":1502084447825},{"_id":"public/css/style.css","hash":"e62c44a56606d8d75933cdf49a1a0e42d9f81845","modified":1502084447825},{"_id":"public/archives/2016/01/index.html","hash":"ba7fb46affcfe0a49436f7e98a1d4d78637540e8","modified":1502084872584},{"_id":"public/archives/2016/02/index.html","hash":"48178c98475f3488a7c2f9abd12738e7c5d2d05c","modified":1502084872584},{"_id":"public/archives/2016/03/index.html","hash":"65b4a707a39aeb3409063784649b39495b8b57d8","modified":1502084872584},{"_id":"public/archives/2016/12/index.html","hash":"c33ade0897ea8687b874f6c878d7b04fc068cb11","modified":1502084872584},{"_id":"public/archives/2017/01/index.html","hash":"5ad02589ce5088f5c861d2a9086b5a51e803bd27","modified":1502084872584},{"_id":"public/archives/2017/02/index.html","hash":"f2d0c4167a8dfc2eaab4ae0b086d819f35e342a1","modified":1502084872584},{"_id":"public/archives/2017/08/index.html","hash":"76c298d9078f6e087ddeeb13c7c77756e3db42ff","modified":1502084872585},{"_id":"public/tags/mysql/index.html","hash":"3f79276e8c1536ef3ca6360a9772dd60ee0a15d1","modified":1502084872585},{"_id":"public/2017/08/06/mysql/mysql_concurrent_query/index.html","hash":"d9538af5d57771e936f05ab53c4b8cc4120ffe9a","modified":1502084872585},{"_id":"public/2017/02/09/golang/golang_gRPC/index.html","hash":"664e0eca7f760c20741daa89fceef3ebe87351fb","modified":1502084872585},{"_id":"public/2017/02/01/golang/golang_map-set/index.html","hash":"130461f9861dbdb42794999a0fd4af7b8b6bd8c9","modified":1502084872585},{"_id":"public/2017/01/30/golang/golang_array-slice/index.html","hash":"a09651ee277ceb1b9c353542a78ac7e69f39e163","modified":1502084872585},{"_id":"public/2016/12/03/golang/golang_http-server/index.html","hash":"60a27ced34368b239188e036800d2520d0edb4b1","modified":1502084872585},{"_id":"public/2016/03/04/golang/golang_channel/index.html","hash":"703154ac7aab6415232b07a5a149715d582cac55","modified":1502084872586},{"_id":"public/2016/03/03/golang/golang_goroutine/index.html","hash":"b46af0152c0d50ba7451af7db4f14467a3e04fcd","modified":1502084872586},{"_id":"public/2016/02/07/golang/golang_function/index.html","hash":"efeb06bfdbd5b16ba3521d44f21146eec1194277","modified":1502084872586},{"_id":"public/2016/01/02/golang/golang_interface/index.html","hash":"9568c3f45ee35933a7186da2a77c00ecb05f4455","modified":1502084872586},{"_id":"public/archives/page/2/index.html","hash":"4708c9dde8409d474cbcd9c3201fa0029506d33f","modified":1502084872587},{"_id":"public/page/2/index.html","hash":"3b0300496f07d1b8a597119fe5834858f7fd61d2","modified":1502084872587}],"Category":[],"Data":[],"Page":[{"title":"404","date":"2017-08-03T06:05:15.000Z","_content":"","source":"404/index.md","raw":"---\ntitle: 404\ndate: 2017-08-03 14:05:15\n---\n","updated":"2017-08-03T06:05:15.350Z","path":"404/index.html","comments":1,"layout":"page","_id":"cj61qanad0000tu4dq049ovvv","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"aboutme","date":"2015-07-31T04:04:33.000Z","_content":"\n华工软件，程序猿，后端开发，数据分析。\n","source":"aboutme/index.md","raw":"---\ntitle: aboutme\ndate: 2015-07-31 12:04:33\n---\n\n华工软件，程序猿，后端开发，数据分析。\n","updated":"2017-08-02T07:23:48.649Z","path":"aboutme/index.html","comments":1,"layout":"page","_id":"cj61qanan0002tu4dacod78kd","content":"<p>华工软件，程序猿，后端开发，数据分析。</p>\n","site":{"data":{}},"excerpt":"","more":"<p>华工软件，程序猿，后端开发，数据分析。</p>\n"},{"title":"tags","date":"2017-08-03T06:05:03.000Z","_content":"","source":"tags/index.md","raw":"---\ntitle: tags\ndate: 2017-08-03 14:05:03\n---\n","updated":"2017-08-03T06:05:03.672Z","path":"tags/index.html","comments":1,"layout":"page","_id":"cj61qanbk0005tu4dbyqje6dv","content":"","site":{"data":{}},"excerpt":"","more":""}],"Post":[{"layout":"consul","title":"基于Docker的Consul(官方镜像)集群部署指南","date":"2017-07-31T03:47:23.000Z","_content":"\n\n### 关于Consul\n\nConsul 是一个支持多数据中心分布式高可用的服务发现和配置共享的服务软件.<br>\nConsul 由 HashiCorp公司用Go语言开发, 基于Mozilla Public License 2.0的协议进行开源. <br>\nConsul 支持健康检查,并允许 HTTP 和 DNS 协议调用 API 存储键值对.<br>\n命令行超级好用的虚拟机管理软件 vgrant 也是 HashiCorp 公司开发的产品.<br>\n一致性协议采用 Raft 算法,用来保证服务的高可用. 使用 GOSSIP 协议管理成员和广播消息, 并且支持 ACL 访问控制.<br>\n\n<!--more-->\n\n### 关于官方consul镜像\n\n关于官方consul镜像，三点说明:\n+ 想对于其他版本镜像，其stars和pull数量是最多的, pull达到10M+;\n+ 官方文档可读性相对不够好, 有些绕;\n+ 目前官方镜像更新进度基本与consul最新版本保持一致。\n\n### 多机部署consul:0.8.5版本操作参考\n\n##### 部分参数说明\n  - ***--net=host*** docker参数, 使得docker容器越过了net namespace的隔离，免去手动指定端口映射的步骤\n  - ***-server*** consul支持以server或client的模式运行, server是服务发现模块的核心, client主要用于转发请求\n  - ***-advertise*** 将本机私有IP传递到consul\n  - ***-bootstrap-expect*** 指定consul将等待几个节点连通，成为一个完整的集群\n  - ***-retry-join*** 指定要加入的consul节点地址，失败会重试, 可多次指定不同的地址\n  - ***-client*** consul绑定在哪个client地址上，这个地址提供HTTP、DNS、RPC等服务，默认是127.0.0.1\n  - ***-bind*** 该地址用来在集群内部的通讯，集群内的所有节点到地址都必须是可达的，默认是0.0.0.0\n  - ***allow_stale*** 设置为true, 表明可以从consul集群的任一server节点获取dns信息, false则表明每次请求都会经过consul server leader\n\n\n##### 集群的多机部署参考\n\n  * 多中心部署结构图\n  \n  <img src=\"/img/consul_archi.png\" width=\"700\" height=\"700\" alt=\"consul部署模式\" align=center/><br>\n  生产环境下, 一般一个宿主host一个consul节点；<br>\n  server节点建议一个数据中心部署3-5个, client节点可部署任意节点。\n\n  * 启动consul server节点, 在对应的机器上root权限下执行以下脚本(需修改节点列表: nodes=(...) ):\n\n```bash\n#!/bin/bash\n\nconf_dir=/opt/consul/conf\nmkdir -p ${conf_dir}\n\nnodes=(\n10.220.16.133\n10.220.16.134\n10.220.16.163\n)\nconsul_ver=0.8.5\nretry_interval=15s\ncontain_svr_name=consul_server\n\nprivIP=$(/sbin/ifconfig eth0 | sed -n 's/.*inet \\(addr:\\)\\?\\([0-9.]\\{7,15\\}\\) .*/\\2/p')\nif [[ !(\"${nodes[@]}\" =~ $privIP) ]];\nthen\n    echo -e \"Current node:${privIP} not in configured server nodes.\\n\"\n    exit\nfi\n\nsvr_runing=$(docker ps -a | grep \"${contain_svr_name}\" | egrep \"Up [About]|[0-9]{1,}\")\nif [[ ${svr_runing} != \"\" ]];\nthen\n    echo -e \"Current container of consul server has been running.\\n\"\n    exit\nelse\n    svr_exists=$(docker ps -a | grep \"${contain_svr_name}\")\n    if [[ ${svr_exists} != \"\" ]];\n    then\n        echo -e \"Now try to start the container as it stopped...\\n\"\n        docker start ${svr_exists}\n        sleep 2\n        docker ps -a grep \"${contain_svr_name}\"\n        exit\n    fi\nfi\n\necho -e \"To start a new container for consul...\\n\"\necho -e \"To initialize configuration...\\n\"\n\nnodels=\"\"\nfor host in ${nodes[*]}\ndo\n    if [[ $nodels != \"\" ]];\n    then\n        nodels=$nodels,\n    fi\n    nodels=$nodels\"\\\"$host\\\"\"\ndone\n\nconfig=\"{\\n\n\\\"datacenter\\\": \\\"dc_dl\\\",\\n\n\\\"retry_join\\\": [${nodels}],\\n\n\\\"retry_interval\\\": \\\"${retry_interval}\\\",\\n\n\\\"rejoin_after_leave\\\": true,\\n\n\\\"start_join\\\": [${nodels}],\\n\n\\\"bootstrap_expect\\\": 1,\\n\n\\\"server\\\": true,\\n\n\\\"ui\\\": true,\\n\n\\\"dns_config\\\": {\\\"allow_stale\\\": true, \\\"max_stale\\\": \\\"5s\\\"},\\n\n\\\"node_name\\\": \\\"$HOSTNAME\\\"\\n\n}\\n\"\n\necho $config\necho -e ${config} > ${conf_dir}/server.json\necho -e ${config}\n\ndocker run -d -v ${conf_dir}:${conf_dir} \\\n    --name ${contain_svr_name} \\\n    --net=host consul:${consul_ver} agent \\\n    -config-dir=${conf_dir} \\\n    -client=0.0.0.0 \\\n    -bind=${privIP} \\\n    -advertise=${privIP}\n\nsleep 2\n\nsvr_runing=$(docker ps -a | grep \"${contain_svr_name}\" | egrep \"Up [About]|[0-9]{1,}\")\nif [[ ${svr_runing} == \"\" ]];\nthen\n    echo -e \"\\nError: docker-consul failed to start...\\n\"\n    exit\nfi\necho -e \"\\nOK: docker-consul has started as background server.\\n\"\n```\n\n  * 启动consul client节点(任意数量或不部署), 在需要部署的机器上执行(需修改svrnodes列表):\n\n```bash\n#!/bin/bash\n\nconf_dir=/opt/consul/conf\nmkdir -p ${conf_dir}\n\nsvrnodes=(\n10.220.16.133\n10.220.16.134\n10.220.16.163\n)\nprivIP=$(/sbin/ifconfig eth0 | sed -n 's/.*inet \\(addr:\\)\\?\\([0-9.]\\{7,15\\}\\) .*/\\2/p')\nconsul_ver=0.8.5\nretry_interval=15s\ncontain_cli_name=consul_client\n\nif [[ \"${svrnodes[@]}\" =~ $privIP ]];\nthen\n    echo -e \"Current node:${privIP} is configured for server consul, not to run client mode.\\n\"\n    exit\nfi\n\nsvr_runing=$(docker ps -a | grep \"${contain_cli_name}\" | egrep \"Up [About]|[0-9]{1,}\")\nif [[ ${svr_runing} != \"\" ]];\nthen\n    echo -e \"Current container of consul client has been running.\\n\"\n    exit\nelse\n    svr_exists=$(docker ps -a | grep \"${contain_cli_name}\")\n    if [[ ${svr_exists} != \"\" ]];\n    then\n        echo -e \"Now try to start the container as it stopped...\\n\"\n        docker start ${svr_exists}\n        sleep 2\n        docker ps -a grep \"${contain_cli_name}\"\n        exit\n    fi\nfi\n\necho -e \"To start a new container for consul...\\n\"\necho -e \"To initialize configuration...\\n\"\n\nnodels=\"\"\nfor host in ${svrnodes[*]}\ndo\n    if [[ $nodels != \"\" ]];\n    then\n        nodels=$nodels,\n    fi\n    nodels=$nodels\"\\\"$host\\\"\"\ndone\n\nconfig=\"{\\n\n\\\"retry_join\\\": [${nodels}],\\n\n\\\"retry_interval\\\": \\\"${retry_interval}\\\",\\n\n\\\"rejoin_after_leave\\\": true,\\n\n\\\"start_join\\\": [${nodels}],\\n\n\\\"server\\\": false,\\n\n\\\"ui\\\": true,\\n\n\\\"node_name\\\": \\\"$HOSTNAME\\\"\\n\n}\\n\"\n\necho $config\necho -e ${config} > ${conf_dir}/client.json\necho -e ${config}\n\ndocker run -d -v ${conf_dir}:${conf_dir} \\\n    --name ${contain_cli_name} \\\n    --net=host consul:${consul_ver} agent \\\n    -config-dir=${conf_dir} \\\n    -client=0.0.0.0 \\\n    -advertise=${privIP}\n\nsleep 2\n\nsvr_runing=$(docker ps -a | grep \"${contain_cli_name}\" | egrep \"Up [About]|[0-9]{1,}\")\nif [[ ${svr_runing} == \"\" ]];\nthen\n    echo -e \"\\nError: docker-consul client node failed to start...\\n\"\n    exit\nfi\necho -e \"\\nOK: docker-consul has started as a client node.\\n\"\n```\n\n  * 检查集群的状态\n\n    通过webUI地址: ***http://<其中一个节点ip>:8500/ui/***可查看集群状态，正常情况下会显示***3 passing***。<br>\n    通过docker命令行:<br>\n\n```bash\nroot@hadoop:~# docker exec -it consul_server consul members\nNode                          Address             Status  Type    Build  Protocol  DC\nhadoop.slave01.fs.115cdn.net  10.220.16.133:8301  alive   server  0.8.5  2         dc1\nhadoop.slave02.fs.115cdn.net  10.220.16.134:8301  alive   server  0.8.5  2         dc1\nhadoop.slave03.fs.115cdn.net  10.220.16.163:8301  alive   server  0.8.5  2         dc1\nhadoop.slave04.fs.115cdn.net  10.220.16.125:8301  alive   client  0.8.5  2         dc1\n```\n","source":"_posts/基于Docker的Consul-官方镜像-集群部署指南.md","raw":"---\nlayout: consul\ntitle: 基于Docker的Consul(官方镜像)集群部署指南\ndate: 2017-07-31 11:47:23\ntags: consul\n---\n\n\n### 关于Consul\n\nConsul 是一个支持多数据中心分布式高可用的服务发现和配置共享的服务软件.<br>\nConsul 由 HashiCorp公司用Go语言开发, 基于Mozilla Public License 2.0的协议进行开源. <br>\nConsul 支持健康检查,并允许 HTTP 和 DNS 协议调用 API 存储键值对.<br>\n命令行超级好用的虚拟机管理软件 vgrant 也是 HashiCorp 公司开发的产品.<br>\n一致性协议采用 Raft 算法,用来保证服务的高可用. 使用 GOSSIP 协议管理成员和广播消息, 并且支持 ACL 访问控制.<br>\n\n<!--more-->\n\n### 关于官方consul镜像\n\n关于官方consul镜像，三点说明:\n+ 想对于其他版本镜像，其stars和pull数量是最多的, pull达到10M+;\n+ 官方文档可读性相对不够好, 有些绕;\n+ 目前官方镜像更新进度基本与consul最新版本保持一致。\n\n### 多机部署consul:0.8.5版本操作参考\n\n##### 部分参数说明\n  - ***--net=host*** docker参数, 使得docker容器越过了net namespace的隔离，免去手动指定端口映射的步骤\n  - ***-server*** consul支持以server或client的模式运行, server是服务发现模块的核心, client主要用于转发请求\n  - ***-advertise*** 将本机私有IP传递到consul\n  - ***-bootstrap-expect*** 指定consul将等待几个节点连通，成为一个完整的集群\n  - ***-retry-join*** 指定要加入的consul节点地址，失败会重试, 可多次指定不同的地址\n  - ***-client*** consul绑定在哪个client地址上，这个地址提供HTTP、DNS、RPC等服务，默认是127.0.0.1\n  - ***-bind*** 该地址用来在集群内部的通讯，集群内的所有节点到地址都必须是可达的，默认是0.0.0.0\n  - ***allow_stale*** 设置为true, 表明可以从consul集群的任一server节点获取dns信息, false则表明每次请求都会经过consul server leader\n\n\n##### 集群的多机部署参考\n\n  * 多中心部署结构图\n  \n  <img src=\"/img/consul_archi.png\" width=\"700\" height=\"700\" alt=\"consul部署模式\" align=center/><br>\n  生产环境下, 一般一个宿主host一个consul节点；<br>\n  server节点建议一个数据中心部署3-5个, client节点可部署任意节点。\n\n  * 启动consul server节点, 在对应的机器上root权限下执行以下脚本(需修改节点列表: nodes=(...) ):\n\n```bash\n#!/bin/bash\n\nconf_dir=/opt/consul/conf\nmkdir -p ${conf_dir}\n\nnodes=(\n10.220.16.133\n10.220.16.134\n10.220.16.163\n)\nconsul_ver=0.8.5\nretry_interval=15s\ncontain_svr_name=consul_server\n\nprivIP=$(/sbin/ifconfig eth0 | sed -n 's/.*inet \\(addr:\\)\\?\\([0-9.]\\{7,15\\}\\) .*/\\2/p')\nif [[ !(\"${nodes[@]}\" =~ $privIP) ]];\nthen\n    echo -e \"Current node:${privIP} not in configured server nodes.\\n\"\n    exit\nfi\n\nsvr_runing=$(docker ps -a | grep \"${contain_svr_name}\" | egrep \"Up [About]|[0-9]{1,}\")\nif [[ ${svr_runing} != \"\" ]];\nthen\n    echo -e \"Current container of consul server has been running.\\n\"\n    exit\nelse\n    svr_exists=$(docker ps -a | grep \"${contain_svr_name}\")\n    if [[ ${svr_exists} != \"\" ]];\n    then\n        echo -e \"Now try to start the container as it stopped...\\n\"\n        docker start ${svr_exists}\n        sleep 2\n        docker ps -a grep \"${contain_svr_name}\"\n        exit\n    fi\nfi\n\necho -e \"To start a new container for consul...\\n\"\necho -e \"To initialize configuration...\\n\"\n\nnodels=\"\"\nfor host in ${nodes[*]}\ndo\n    if [[ $nodels != \"\" ]];\n    then\n        nodels=$nodels,\n    fi\n    nodels=$nodels\"\\\"$host\\\"\"\ndone\n\nconfig=\"{\\n\n\\\"datacenter\\\": \\\"dc_dl\\\",\\n\n\\\"retry_join\\\": [${nodels}],\\n\n\\\"retry_interval\\\": \\\"${retry_interval}\\\",\\n\n\\\"rejoin_after_leave\\\": true,\\n\n\\\"start_join\\\": [${nodels}],\\n\n\\\"bootstrap_expect\\\": 1,\\n\n\\\"server\\\": true,\\n\n\\\"ui\\\": true,\\n\n\\\"dns_config\\\": {\\\"allow_stale\\\": true, \\\"max_stale\\\": \\\"5s\\\"},\\n\n\\\"node_name\\\": \\\"$HOSTNAME\\\"\\n\n}\\n\"\n\necho $config\necho -e ${config} > ${conf_dir}/server.json\necho -e ${config}\n\ndocker run -d -v ${conf_dir}:${conf_dir} \\\n    --name ${contain_svr_name} \\\n    --net=host consul:${consul_ver} agent \\\n    -config-dir=${conf_dir} \\\n    -client=0.0.0.0 \\\n    -bind=${privIP} \\\n    -advertise=${privIP}\n\nsleep 2\n\nsvr_runing=$(docker ps -a | grep \"${contain_svr_name}\" | egrep \"Up [About]|[0-9]{1,}\")\nif [[ ${svr_runing} == \"\" ]];\nthen\n    echo -e \"\\nError: docker-consul failed to start...\\n\"\n    exit\nfi\necho -e \"\\nOK: docker-consul has started as background server.\\n\"\n```\n\n  * 启动consul client节点(任意数量或不部署), 在需要部署的机器上执行(需修改svrnodes列表):\n\n```bash\n#!/bin/bash\n\nconf_dir=/opt/consul/conf\nmkdir -p ${conf_dir}\n\nsvrnodes=(\n10.220.16.133\n10.220.16.134\n10.220.16.163\n)\nprivIP=$(/sbin/ifconfig eth0 | sed -n 's/.*inet \\(addr:\\)\\?\\([0-9.]\\{7,15\\}\\) .*/\\2/p')\nconsul_ver=0.8.5\nretry_interval=15s\ncontain_cli_name=consul_client\n\nif [[ \"${svrnodes[@]}\" =~ $privIP ]];\nthen\n    echo -e \"Current node:${privIP} is configured for server consul, not to run client mode.\\n\"\n    exit\nfi\n\nsvr_runing=$(docker ps -a | grep \"${contain_cli_name}\" | egrep \"Up [About]|[0-9]{1,}\")\nif [[ ${svr_runing} != \"\" ]];\nthen\n    echo -e \"Current container of consul client has been running.\\n\"\n    exit\nelse\n    svr_exists=$(docker ps -a | grep \"${contain_cli_name}\")\n    if [[ ${svr_exists} != \"\" ]];\n    then\n        echo -e \"Now try to start the container as it stopped...\\n\"\n        docker start ${svr_exists}\n        sleep 2\n        docker ps -a grep \"${contain_cli_name}\"\n        exit\n    fi\nfi\n\necho -e \"To start a new container for consul...\\n\"\necho -e \"To initialize configuration...\\n\"\n\nnodels=\"\"\nfor host in ${svrnodes[*]}\ndo\n    if [[ $nodels != \"\" ]];\n    then\n        nodels=$nodels,\n    fi\n    nodels=$nodels\"\\\"$host\\\"\"\ndone\n\nconfig=\"{\\n\n\\\"retry_join\\\": [${nodels}],\\n\n\\\"retry_interval\\\": \\\"${retry_interval}\\\",\\n\n\\\"rejoin_after_leave\\\": true,\\n\n\\\"start_join\\\": [${nodels}],\\n\n\\\"server\\\": false,\\n\n\\\"ui\\\": true,\\n\n\\\"node_name\\\": \\\"$HOSTNAME\\\"\\n\n}\\n\"\n\necho $config\necho -e ${config} > ${conf_dir}/client.json\necho -e ${config}\n\ndocker run -d -v ${conf_dir}:${conf_dir} \\\n    --name ${contain_cli_name} \\\n    --net=host consul:${consul_ver} agent \\\n    -config-dir=${conf_dir} \\\n    -client=0.0.0.0 \\\n    -advertise=${privIP}\n\nsleep 2\n\nsvr_runing=$(docker ps -a | grep \"${contain_cli_name}\" | egrep \"Up [About]|[0-9]{1,}\")\nif [[ ${svr_runing} == \"\" ]];\nthen\n    echo -e \"\\nError: docker-consul client node failed to start...\\n\"\n    exit\nfi\necho -e \"\\nOK: docker-consul has started as a client node.\\n\"\n```\n\n  * 检查集群的状态\n\n    通过webUI地址: ***http://<其中一个节点ip>:8500/ui/***可查看集群状态，正常情况下会显示***3 passing***。<br>\n    通过docker命令行:<br>\n\n```bash\nroot@hadoop:~# docker exec -it consul_server consul members\nNode                          Address             Status  Type    Build  Protocol  DC\nhadoop.slave01.fs.115cdn.net  10.220.16.133:8301  alive   server  0.8.5  2         dc1\nhadoop.slave02.fs.115cdn.net  10.220.16.134:8301  alive   server  0.8.5  2         dc1\nhadoop.slave03.fs.115cdn.net  10.220.16.163:8301  alive   server  0.8.5  2         dc1\nhadoop.slave04.fs.115cdn.net  10.220.16.125:8301  alive   client  0.8.5  2         dc1\n```\n","slug":"基于Docker的Consul-官方镜像-集群部署指南","published":1,"updated":"2017-08-07T02:13:38.394Z","comments":1,"photos":[],"link":"","_id":"cj61qanaf0001tu4d3jijlbx5","content":"<h3 id=\"关于Consul\"><a href=\"#关于Consul\" class=\"headerlink\" title=\"关于Consul\"></a>关于Consul</h3><p>Consul 是一个支持多数据中心分布式高可用的服务发现和配置共享的服务软件.<br><br>Consul 由 HashiCorp公司用Go语言开发, 基于Mozilla Public License 2.0的协议进行开源. <br><br>Consul 支持健康检查,并允许 HTTP 和 DNS 协议调用 API 存储键值对.<br><br>命令行超级好用的虚拟机管理软件 vgrant 也是 HashiCorp 公司开发的产品.<br><br>一致性协议采用 Raft 算法,用来保证服务的高可用. 使用 GOSSIP 协议管理成员和广播消息, 并且支持 ACL 访问控制.<br></p>\n<a id=\"more\"></a>\n<h3 id=\"关于官方consul镜像\"><a href=\"#关于官方consul镜像\" class=\"headerlink\" title=\"关于官方consul镜像\"></a>关于官方consul镜像</h3><p>关于官方consul镜像，三点说明:</p>\n<ul>\n<li>想对于其他版本镜像，其stars和pull数量是最多的, pull达到10M+;</li>\n<li>官方文档可读性相对不够好, 有些绕;</li>\n<li>目前官方镜像更新进度基本与consul最新版本保持一致。</li>\n</ul>\n<h3 id=\"多机部署consul-0-8-5版本操作参考\"><a href=\"#多机部署consul-0-8-5版本操作参考\" class=\"headerlink\" title=\"多机部署consul:0.8.5版本操作参考\"></a>多机部署consul:0.8.5版本操作参考</h3><h5 id=\"部分参数说明\"><a href=\"#部分参数说明\" class=\"headerlink\" title=\"部分参数说明\"></a>部分参数说明</h5><ul>\n<li><strong><em>–net=host</em></strong> docker参数, 使得docker容器越过了net namespace的隔离，免去手动指定端口映射的步骤</li>\n<li><strong><em>-server</em></strong> consul支持以server或client的模式运行, server是服务发现模块的核心, client主要用于转发请求</li>\n<li><strong><em>-advertise</em></strong> 将本机私有IP传递到consul</li>\n<li><strong><em>-bootstrap-expect</em></strong> 指定consul将等待几个节点连通，成为一个完整的集群</li>\n<li><strong><em>-retry-join</em></strong> 指定要加入的consul节点地址，失败会重试, 可多次指定不同的地址</li>\n<li><strong><em>-client</em></strong> consul绑定在哪个client地址上，这个地址提供HTTP、DNS、RPC等服务，默认是127.0.0.1</li>\n<li><strong><em>-bind</em></strong> 该地址用来在集群内部的通讯，集群内的所有节点到地址都必须是可达的，默认是0.0.0.0</li>\n<li><strong><em>allow_stale</em></strong> 设置为true, 表明可以从consul集群的任一server节点获取dns信息, false则表明每次请求都会经过consul server leader</li>\n</ul>\n<h5 id=\"集群的多机部署参考\"><a href=\"#集群的多机部署参考\" class=\"headerlink\" title=\"集群的多机部署参考\"></a>集群的多机部署参考</h5><ul>\n<li><p>多中心部署结构图</p>\n<p><img src=\"/img/consul_archi.png\" width=\"700\" height=\"700\" alt=\"consul部署模式\" align=\"center/\"><br><br>生产环境下, 一般一个宿主host一个consul节点；<br><br>server节点建议一个数据中心部署3-5个, client节点可部署任意节点。</p>\n</li>\n<li><p>启动consul server节点, 在对应的机器上root权限下执行以下脚本(需修改节点列表: nodes=(…) ):</p>\n</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#!/bin/bash</span></div><div class=\"line\"></div><div class=\"line\">conf_dir=/opt/consul/conf</div><div class=\"line\">mkdir -p <span class=\"variable\">$&#123;conf_dir&#125;</span></div><div class=\"line\"></div><div class=\"line\">nodes=(</div><div class=\"line\">10.220.16.133</div><div class=\"line\">10.220.16.134</div><div class=\"line\">10.220.16.163</div><div class=\"line\">)</div><div class=\"line\">consul_ver=0.8.5</div><div class=\"line\">retry_interval=15s</div><div class=\"line\">contain_svr_name=consul_server</div><div class=\"line\"></div><div class=\"line\">privIP=$(/sbin/ifconfig eth0 | sed -n <span class=\"string\">'s/.*inet \\(addr:\\)\\?\\([0-9.]\\&#123;7,15\\&#125;\\) .*/\\2/p'</span>)</div><div class=\"line\"><span class=\"keyword\">if</span> [[ !(<span class=\"string\">\"<span class=\"variable\">$&#123;nodes[@]&#125;</span>\"</span> =~ <span class=\"variable\">$privIP</span>) ]];</div><div class=\"line\"><span class=\"keyword\">then</span></div><div class=\"line\">    <span class=\"built_in\">echo</span> -e <span class=\"string\">\"Current node:<span class=\"variable\">$&#123;privIP&#125;</span> not in configured server nodes.\\n\"</span></div><div class=\"line\">    <span class=\"built_in\">exit</span></div><div class=\"line\"><span class=\"keyword\">fi</span></div><div class=\"line\"></div><div class=\"line\">svr_runing=$(docker ps -a | grep <span class=\"string\">\"<span class=\"variable\">$&#123;contain_svr_name&#125;</span>\"</span> | egrep <span class=\"string\">\"Up [About]|[0-9]&#123;1,&#125;\"</span>)</div><div class=\"line\"><span class=\"keyword\">if</span> [[ <span class=\"variable\">$&#123;svr_runing&#125;</span> != <span class=\"string\">\"\"</span> ]];</div><div class=\"line\"><span class=\"keyword\">then</span></div><div class=\"line\">    <span class=\"built_in\">echo</span> -e <span class=\"string\">\"Current container of consul server has been running.\\n\"</span></div><div class=\"line\">    <span class=\"built_in\">exit</span></div><div class=\"line\"><span class=\"keyword\">else</span></div><div class=\"line\">    svr_exists=$(docker ps -a | grep <span class=\"string\">\"<span class=\"variable\">$&#123;contain_svr_name&#125;</span>\"</span>)</div><div class=\"line\">    <span class=\"keyword\">if</span> [[ <span class=\"variable\">$&#123;svr_exists&#125;</span> != <span class=\"string\">\"\"</span> ]];</div><div class=\"line\">    <span class=\"keyword\">then</span></div><div class=\"line\">        <span class=\"built_in\">echo</span> -e <span class=\"string\">\"Now try to start the container as it stopped...\\n\"</span></div><div class=\"line\">        docker start <span class=\"variable\">$&#123;svr_exists&#125;</span></div><div class=\"line\">        sleep 2</div><div class=\"line\">        docker ps -a grep <span class=\"string\">\"<span class=\"variable\">$&#123;contain_svr_name&#125;</span>\"</span></div><div class=\"line\">        <span class=\"built_in\">exit</span></div><div class=\"line\">    <span class=\"keyword\">fi</span></div><div class=\"line\"><span class=\"keyword\">fi</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">echo</span> -e <span class=\"string\">\"To start a new container for consul...\\n\"</span></div><div class=\"line\"><span class=\"built_in\">echo</span> -e <span class=\"string\">\"To initialize configuration...\\n\"</span></div><div class=\"line\"></div><div class=\"line\">nodels=<span class=\"string\">\"\"</span></div><div class=\"line\"><span class=\"keyword\">for</span> host <span class=\"keyword\">in</span> <span class=\"variable\">$&#123;nodes[*]&#125;</span></div><div class=\"line\"><span class=\"keyword\">do</span></div><div class=\"line\">    <span class=\"keyword\">if</span> [[ <span class=\"variable\">$nodels</span> != <span class=\"string\">\"\"</span> ]];</div><div class=\"line\">    <span class=\"keyword\">then</span></div><div class=\"line\">        nodels=<span class=\"variable\">$nodels</span>,</div><div class=\"line\">    <span class=\"keyword\">fi</span></div><div class=\"line\">    nodels=<span class=\"variable\">$nodels</span><span class=\"string\">\"\\\"<span class=\"variable\">$host</span>\\\"\"</span></div><div class=\"line\"><span class=\"keyword\">done</span></div><div class=\"line\"></div><div class=\"line\">config=<span class=\"string\">\"&#123;\\n</span></div><div class=\"line\">\\\"datacenter\\\": \\\"dc_dl\\\",\\n</div><div class=\"line\">\\\"retry_join\\\": [<span class=\"variable\">$&#123;nodels&#125;</span>],\\n</div><div class=\"line\">\\\"retry_interval\\\": \\\"<span class=\"variable\">$&#123;retry_interval&#125;</span>\\\",\\n</div><div class=\"line\">\\\"rejoin_after_leave\\\": true,\\n</div><div class=\"line\">\\\"start_join\\\": [<span class=\"variable\">$&#123;nodels&#125;</span>],\\n</div><div class=\"line\">\\\"bootstrap_expect\\\": 1,\\n</div><div class=\"line\">\\\"server\\\": true,\\n</div><div class=\"line\">\\\"ui\\\": true,\\n</div><div class=\"line\">\\\"dns_config\\\": &#123;\\\"allow_stale\\\": true, \\\"max_stale\\\": \\\"5s\\\"&#125;,\\n</div><div class=\"line\">\\\"node_name\\\": \\\"<span class=\"variable\">$HOSTNAME</span>\\\"\\n</div><div class=\"line\">&#125;\\n\"</div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">echo</span> <span class=\"variable\">$config</span></div><div class=\"line\"><span class=\"built_in\">echo</span> -e <span class=\"variable\">$&#123;config&#125;</span> &gt; <span class=\"variable\">$&#123;conf_dir&#125;</span>/server.json</div><div class=\"line\"><span class=\"built_in\">echo</span> -e <span class=\"variable\">$&#123;config&#125;</span></div><div class=\"line\"></div><div class=\"line\">docker run -d -v <span class=\"variable\">$&#123;conf_dir&#125;</span>:<span class=\"variable\">$&#123;conf_dir&#125;</span> \\</div><div class=\"line\">    --name <span class=\"variable\">$&#123;contain_svr_name&#125;</span> \\</div><div class=\"line\">    --net=host consul:<span class=\"variable\">$&#123;consul_ver&#125;</span> agent \\</div><div class=\"line\">    -config-dir=<span class=\"variable\">$&#123;conf_dir&#125;</span> \\</div><div class=\"line\">    -client=0.0.0.0 \\</div><div class=\"line\">    -<span class=\"built_in\">bind</span>=<span class=\"variable\">$&#123;privIP&#125;</span> \\</div><div class=\"line\">    -advertise=<span class=\"variable\">$&#123;privIP&#125;</span></div><div class=\"line\"></div><div class=\"line\">sleep 2</div><div class=\"line\"></div><div class=\"line\">svr_runing=$(docker ps -a | grep <span class=\"string\">\"<span class=\"variable\">$&#123;contain_svr_name&#125;</span>\"</span> | egrep <span class=\"string\">\"Up [About]|[0-9]&#123;1,&#125;\"</span>)</div><div class=\"line\"><span class=\"keyword\">if</span> [[ <span class=\"variable\">$&#123;svr_runing&#125;</span> == <span class=\"string\">\"\"</span> ]];</div><div class=\"line\"><span class=\"keyword\">then</span></div><div class=\"line\">    <span class=\"built_in\">echo</span> -e <span class=\"string\">\"\\nError: docker-consul failed to start...\\n\"</span></div><div class=\"line\">    <span class=\"built_in\">exit</span></div><div class=\"line\"><span class=\"keyword\">fi</span></div><div class=\"line\"><span class=\"built_in\">echo</span> -e <span class=\"string\">\"\\nOK: docker-consul has started as background server.\\n\"</span></div></pre></td></tr></table></figure>\n<ul>\n<li>启动consul client节点(任意数量或不部署), 在需要部署的机器上执行(需修改svrnodes列表):</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#!/bin/bash</span></div><div class=\"line\"></div><div class=\"line\">conf_dir=/opt/consul/conf</div><div class=\"line\">mkdir -p <span class=\"variable\">$&#123;conf_dir&#125;</span></div><div class=\"line\"></div><div class=\"line\">svrnodes=(</div><div class=\"line\">10.220.16.133</div><div class=\"line\">10.220.16.134</div><div class=\"line\">10.220.16.163</div><div class=\"line\">)</div><div class=\"line\">privIP=$(/sbin/ifconfig eth0 | sed -n <span class=\"string\">'s/.*inet \\(addr:\\)\\?\\([0-9.]\\&#123;7,15\\&#125;\\) .*/\\2/p'</span>)</div><div class=\"line\">consul_ver=0.8.5</div><div class=\"line\">retry_interval=15s</div><div class=\"line\">contain_cli_name=consul_client</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">if</span> [[ <span class=\"string\">\"<span class=\"variable\">$&#123;svrnodes[@]&#125;</span>\"</span> =~ <span class=\"variable\">$privIP</span> ]];</div><div class=\"line\"><span class=\"keyword\">then</span></div><div class=\"line\">    <span class=\"built_in\">echo</span> -e <span class=\"string\">\"Current node:<span class=\"variable\">$&#123;privIP&#125;</span> is configured for server consul, not to run client mode.\\n\"</span></div><div class=\"line\">    <span class=\"built_in\">exit</span></div><div class=\"line\"><span class=\"keyword\">fi</span></div><div class=\"line\"></div><div class=\"line\">svr_runing=$(docker ps -a | grep <span class=\"string\">\"<span class=\"variable\">$&#123;contain_cli_name&#125;</span>\"</span> | egrep <span class=\"string\">\"Up [About]|[0-9]&#123;1,&#125;\"</span>)</div><div class=\"line\"><span class=\"keyword\">if</span> [[ <span class=\"variable\">$&#123;svr_runing&#125;</span> != <span class=\"string\">\"\"</span> ]];</div><div class=\"line\"><span class=\"keyword\">then</span></div><div class=\"line\">    <span class=\"built_in\">echo</span> -e <span class=\"string\">\"Current container of consul client has been running.\\n\"</span></div><div class=\"line\">    <span class=\"built_in\">exit</span></div><div class=\"line\"><span class=\"keyword\">else</span></div><div class=\"line\">    svr_exists=$(docker ps -a | grep <span class=\"string\">\"<span class=\"variable\">$&#123;contain_cli_name&#125;</span>\"</span>)</div><div class=\"line\">    <span class=\"keyword\">if</span> [[ <span class=\"variable\">$&#123;svr_exists&#125;</span> != <span class=\"string\">\"\"</span> ]];</div><div class=\"line\">    <span class=\"keyword\">then</span></div><div class=\"line\">        <span class=\"built_in\">echo</span> -e <span class=\"string\">\"Now try to start the container as it stopped...\\n\"</span></div><div class=\"line\">        docker start <span class=\"variable\">$&#123;svr_exists&#125;</span></div><div class=\"line\">        sleep 2</div><div class=\"line\">        docker ps -a grep <span class=\"string\">\"<span class=\"variable\">$&#123;contain_cli_name&#125;</span>\"</span></div><div class=\"line\">        <span class=\"built_in\">exit</span></div><div class=\"line\">    <span class=\"keyword\">fi</span></div><div class=\"line\"><span class=\"keyword\">fi</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">echo</span> -e <span class=\"string\">\"To start a new container for consul...\\n\"</span></div><div class=\"line\"><span class=\"built_in\">echo</span> -e <span class=\"string\">\"To initialize configuration...\\n\"</span></div><div class=\"line\"></div><div class=\"line\">nodels=<span class=\"string\">\"\"</span></div><div class=\"line\"><span class=\"keyword\">for</span> host <span class=\"keyword\">in</span> <span class=\"variable\">$&#123;svrnodes[*]&#125;</span></div><div class=\"line\"><span class=\"keyword\">do</span></div><div class=\"line\">    <span class=\"keyword\">if</span> [[ <span class=\"variable\">$nodels</span> != <span class=\"string\">\"\"</span> ]];</div><div class=\"line\">    <span class=\"keyword\">then</span></div><div class=\"line\">        nodels=<span class=\"variable\">$nodels</span>,</div><div class=\"line\">    <span class=\"keyword\">fi</span></div><div class=\"line\">    nodels=<span class=\"variable\">$nodels</span><span class=\"string\">\"\\\"<span class=\"variable\">$host</span>\\\"\"</span></div><div class=\"line\"><span class=\"keyword\">done</span></div><div class=\"line\"></div><div class=\"line\">config=<span class=\"string\">\"&#123;\\n</span></div><div class=\"line\">\\\"retry_join\\\": [<span class=\"variable\">$&#123;nodels&#125;</span>],\\n</div><div class=\"line\">\\\"retry_interval\\\": \\\"<span class=\"variable\">$&#123;retry_interval&#125;</span>\\\",\\n</div><div class=\"line\">\\\"rejoin_after_leave\\\": true,\\n</div><div class=\"line\">\\\"start_join\\\": [<span class=\"variable\">$&#123;nodels&#125;</span>],\\n</div><div class=\"line\">\\\"server\\\": false,\\n</div><div class=\"line\">\\\"ui\\\": true,\\n</div><div class=\"line\">\\\"node_name\\\": \\\"<span class=\"variable\">$HOSTNAME</span>\\\"\\n</div><div class=\"line\">&#125;\\n\"</div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">echo</span> <span class=\"variable\">$config</span></div><div class=\"line\"><span class=\"built_in\">echo</span> -e <span class=\"variable\">$&#123;config&#125;</span> &gt; <span class=\"variable\">$&#123;conf_dir&#125;</span>/client.json</div><div class=\"line\"><span class=\"built_in\">echo</span> -e <span class=\"variable\">$&#123;config&#125;</span></div><div class=\"line\"></div><div class=\"line\">docker run -d -v <span class=\"variable\">$&#123;conf_dir&#125;</span>:<span class=\"variable\">$&#123;conf_dir&#125;</span> \\</div><div class=\"line\">    --name <span class=\"variable\">$&#123;contain_cli_name&#125;</span> \\</div><div class=\"line\">    --net=host consul:<span class=\"variable\">$&#123;consul_ver&#125;</span> agent \\</div><div class=\"line\">    -config-dir=<span class=\"variable\">$&#123;conf_dir&#125;</span> \\</div><div class=\"line\">    -client=0.0.0.0 \\</div><div class=\"line\">    -advertise=<span class=\"variable\">$&#123;privIP&#125;</span></div><div class=\"line\"></div><div class=\"line\">sleep 2</div><div class=\"line\"></div><div class=\"line\">svr_runing=$(docker ps -a | grep <span class=\"string\">\"<span class=\"variable\">$&#123;contain_cli_name&#125;</span>\"</span> | egrep <span class=\"string\">\"Up [About]|[0-9]&#123;1,&#125;\"</span>)</div><div class=\"line\"><span class=\"keyword\">if</span> [[ <span class=\"variable\">$&#123;svr_runing&#125;</span> == <span class=\"string\">\"\"</span> ]];</div><div class=\"line\"><span class=\"keyword\">then</span></div><div class=\"line\">    <span class=\"built_in\">echo</span> -e <span class=\"string\">\"\\nError: docker-consul client node failed to start...\\n\"</span></div><div class=\"line\">    <span class=\"built_in\">exit</span></div><div class=\"line\"><span class=\"keyword\">fi</span></div><div class=\"line\"><span class=\"built_in\">echo</span> -e <span class=\"string\">\"\\nOK: docker-consul has started as a client node.\\n\"</span></div></pre></td></tr></table></figure>\n<ul>\n<li><p>检查集群的状态</p>\n<p>通过webUI地址: <strong><em>http://&lt;其中一个节点ip&gt;:8500/ui/</em></strong>可查看集群状态，正常情况下会显示<strong><em>3 passing</em></strong>。<br><br>通过docker命令行:<br></p>\n</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">root@hadoop:~<span class=\"comment\"># docker exec -it consul_server consul members</span></div><div class=\"line\">Node                          Address             Status  Type    Build  Protocol  DC</div><div class=\"line\">hadoop.slave01.fs.115cdn.net  10.220.16.133:8301  alive   server  0.8.5  2         dc1</div><div class=\"line\">hadoop.slave02.fs.115cdn.net  10.220.16.134:8301  alive   server  0.8.5  2         dc1</div><div class=\"line\">hadoop.slave03.fs.115cdn.net  10.220.16.163:8301  alive   server  0.8.5  2         dc1</div><div class=\"line\">hadoop.slave04.fs.115cdn.net  10.220.16.125:8301  alive   client  0.8.5  2         dc1</div></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"<h3 id=\"关于Consul\"><a href=\"#关于Consul\" class=\"headerlink\" title=\"关于Consul\"></a>关于Consul</h3><p>Consul 是一个支持多数据中心分布式高可用的服务发现和配置共享的服务软件.<br><br>Consul 由 HashiCorp公司用Go语言开发, 基于Mozilla Public License 2.0的协议进行开源. <br><br>Consul 支持健康检查,并允许 HTTP 和 DNS 协议调用 API 存储键值对.<br><br>命令行超级好用的虚拟机管理软件 vgrant 也是 HashiCorp 公司开发的产品.<br><br>一致性协议采用 Raft 算法,用来保证服务的高可用. 使用 GOSSIP 协议管理成员和广播消息, 并且支持 ACL 访问控制.<br></p>","more":"<h3 id=\"关于官方consul镜像\"><a href=\"#关于官方consul镜像\" class=\"headerlink\" title=\"关于官方consul镜像\"></a>关于官方consul镜像</h3><p>关于官方consul镜像，三点说明:</p>\n<ul>\n<li>想对于其他版本镜像，其stars和pull数量是最多的, pull达到10M+;</li>\n<li>官方文档可读性相对不够好, 有些绕;</li>\n<li>目前官方镜像更新进度基本与consul最新版本保持一致。</li>\n</ul>\n<h3 id=\"多机部署consul-0-8-5版本操作参考\"><a href=\"#多机部署consul-0-8-5版本操作参考\" class=\"headerlink\" title=\"多机部署consul:0.8.5版本操作参考\"></a>多机部署consul:0.8.5版本操作参考</h3><h5 id=\"部分参数说明\"><a href=\"#部分参数说明\" class=\"headerlink\" title=\"部分参数说明\"></a>部分参数说明</h5><ul>\n<li><strong><em>–net=host</em></strong> docker参数, 使得docker容器越过了net namespace的隔离，免去手动指定端口映射的步骤</li>\n<li><strong><em>-server</em></strong> consul支持以server或client的模式运行, server是服务发现模块的核心, client主要用于转发请求</li>\n<li><strong><em>-advertise</em></strong> 将本机私有IP传递到consul</li>\n<li><strong><em>-bootstrap-expect</em></strong> 指定consul将等待几个节点连通，成为一个完整的集群</li>\n<li><strong><em>-retry-join</em></strong> 指定要加入的consul节点地址，失败会重试, 可多次指定不同的地址</li>\n<li><strong><em>-client</em></strong> consul绑定在哪个client地址上，这个地址提供HTTP、DNS、RPC等服务，默认是127.0.0.1</li>\n<li><strong><em>-bind</em></strong> 该地址用来在集群内部的通讯，集群内的所有节点到地址都必须是可达的，默认是0.0.0.0</li>\n<li><strong><em>allow_stale</em></strong> 设置为true, 表明可以从consul集群的任一server节点获取dns信息, false则表明每次请求都会经过consul server leader</li>\n</ul>\n<h5 id=\"集群的多机部署参考\"><a href=\"#集群的多机部署参考\" class=\"headerlink\" title=\"集群的多机部署参考\"></a>集群的多机部署参考</h5><ul>\n<li><p>多中心部署结构图</p>\n<p><img src=\"/img/consul_archi.png\" width=\"700\" height=\"700\" alt=\"consul部署模式\" align=\"center/\"><br><br>生产环境下, 一般一个宿主host一个consul节点；<br><br>server节点建议一个数据中心部署3-5个, client节点可部署任意节点。</p>\n</li>\n<li><p>启动consul server节点, 在对应的机器上root权限下执行以下脚本(需修改节点列表: nodes=(…) ):</p>\n</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#!/bin/bash</span></div><div class=\"line\"></div><div class=\"line\">conf_dir=/opt/consul/conf</div><div class=\"line\">mkdir -p <span class=\"variable\">$&#123;conf_dir&#125;</span></div><div class=\"line\"></div><div class=\"line\">nodes=(</div><div class=\"line\">10.220.16.133</div><div class=\"line\">10.220.16.134</div><div class=\"line\">10.220.16.163</div><div class=\"line\">)</div><div class=\"line\">consul_ver=0.8.5</div><div class=\"line\">retry_interval=15s</div><div class=\"line\">contain_svr_name=consul_server</div><div class=\"line\"></div><div class=\"line\">privIP=$(/sbin/ifconfig eth0 | sed -n <span class=\"string\">'s/.*inet \\(addr:\\)\\?\\([0-9.]\\&#123;7,15\\&#125;\\) .*/\\2/p'</span>)</div><div class=\"line\"><span class=\"keyword\">if</span> [[ !(<span class=\"string\">\"<span class=\"variable\">$&#123;nodes[@]&#125;</span>\"</span> =~ <span class=\"variable\">$privIP</span>) ]];</div><div class=\"line\"><span class=\"keyword\">then</span></div><div class=\"line\">    <span class=\"built_in\">echo</span> -e <span class=\"string\">\"Current node:<span class=\"variable\">$&#123;privIP&#125;</span> not in configured server nodes.\\n\"</span></div><div class=\"line\">    <span class=\"built_in\">exit</span></div><div class=\"line\"><span class=\"keyword\">fi</span></div><div class=\"line\"></div><div class=\"line\">svr_runing=$(docker ps -a | grep <span class=\"string\">\"<span class=\"variable\">$&#123;contain_svr_name&#125;</span>\"</span> | egrep <span class=\"string\">\"Up [About]|[0-9]&#123;1,&#125;\"</span>)</div><div class=\"line\"><span class=\"keyword\">if</span> [[ <span class=\"variable\">$&#123;svr_runing&#125;</span> != <span class=\"string\">\"\"</span> ]];</div><div class=\"line\"><span class=\"keyword\">then</span></div><div class=\"line\">    <span class=\"built_in\">echo</span> -e <span class=\"string\">\"Current container of consul server has been running.\\n\"</span></div><div class=\"line\">    <span class=\"built_in\">exit</span></div><div class=\"line\"><span class=\"keyword\">else</span></div><div class=\"line\">    svr_exists=$(docker ps -a | grep <span class=\"string\">\"<span class=\"variable\">$&#123;contain_svr_name&#125;</span>\"</span>)</div><div class=\"line\">    <span class=\"keyword\">if</span> [[ <span class=\"variable\">$&#123;svr_exists&#125;</span> != <span class=\"string\">\"\"</span> ]];</div><div class=\"line\">    <span class=\"keyword\">then</span></div><div class=\"line\">        <span class=\"built_in\">echo</span> -e <span class=\"string\">\"Now try to start the container as it stopped...\\n\"</span></div><div class=\"line\">        docker start <span class=\"variable\">$&#123;svr_exists&#125;</span></div><div class=\"line\">        sleep 2</div><div class=\"line\">        docker ps -a grep <span class=\"string\">\"<span class=\"variable\">$&#123;contain_svr_name&#125;</span>\"</span></div><div class=\"line\">        <span class=\"built_in\">exit</span></div><div class=\"line\">    <span class=\"keyword\">fi</span></div><div class=\"line\"><span class=\"keyword\">fi</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">echo</span> -e <span class=\"string\">\"To start a new container for consul...\\n\"</span></div><div class=\"line\"><span class=\"built_in\">echo</span> -e <span class=\"string\">\"To initialize configuration...\\n\"</span></div><div class=\"line\"></div><div class=\"line\">nodels=<span class=\"string\">\"\"</span></div><div class=\"line\"><span class=\"keyword\">for</span> host <span class=\"keyword\">in</span> <span class=\"variable\">$&#123;nodes[*]&#125;</span></div><div class=\"line\"><span class=\"keyword\">do</span></div><div class=\"line\">    <span class=\"keyword\">if</span> [[ <span class=\"variable\">$nodels</span> != <span class=\"string\">\"\"</span> ]];</div><div class=\"line\">    <span class=\"keyword\">then</span></div><div class=\"line\">        nodels=<span class=\"variable\">$nodels</span>,</div><div class=\"line\">    <span class=\"keyword\">fi</span></div><div class=\"line\">    nodels=<span class=\"variable\">$nodels</span><span class=\"string\">\"\\\"<span class=\"variable\">$host</span>\\\"\"</span></div><div class=\"line\"><span class=\"keyword\">done</span></div><div class=\"line\"></div><div class=\"line\">config=<span class=\"string\">\"&#123;\\n</span></div><div class=\"line\">\\\"datacenter\\\": \\\"dc_dl\\\",\\n</div><div class=\"line\">\\\"retry_join\\\": [<span class=\"variable\">$&#123;nodels&#125;</span>],\\n</div><div class=\"line\">\\\"retry_interval\\\": \\\"<span class=\"variable\">$&#123;retry_interval&#125;</span>\\\",\\n</div><div class=\"line\">\\\"rejoin_after_leave\\\": true,\\n</div><div class=\"line\">\\\"start_join\\\": [<span class=\"variable\">$&#123;nodels&#125;</span>],\\n</div><div class=\"line\">\\\"bootstrap_expect\\\": 1,\\n</div><div class=\"line\">\\\"server\\\": true,\\n</div><div class=\"line\">\\\"ui\\\": true,\\n</div><div class=\"line\">\\\"dns_config\\\": &#123;\\\"allow_stale\\\": true, \\\"max_stale\\\": \\\"5s\\\"&#125;,\\n</div><div class=\"line\">\\\"node_name\\\": \\\"<span class=\"variable\">$HOSTNAME</span>\\\"\\n</div><div class=\"line\">&#125;\\n\"</div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">echo</span> <span class=\"variable\">$config</span></div><div class=\"line\"><span class=\"built_in\">echo</span> -e <span class=\"variable\">$&#123;config&#125;</span> &gt; <span class=\"variable\">$&#123;conf_dir&#125;</span>/server.json</div><div class=\"line\"><span class=\"built_in\">echo</span> -e <span class=\"variable\">$&#123;config&#125;</span></div><div class=\"line\"></div><div class=\"line\">docker run -d -v <span class=\"variable\">$&#123;conf_dir&#125;</span>:<span class=\"variable\">$&#123;conf_dir&#125;</span> \\</div><div class=\"line\">    --name <span class=\"variable\">$&#123;contain_svr_name&#125;</span> \\</div><div class=\"line\">    --net=host consul:<span class=\"variable\">$&#123;consul_ver&#125;</span> agent \\</div><div class=\"line\">    -config-dir=<span class=\"variable\">$&#123;conf_dir&#125;</span> \\</div><div class=\"line\">    -client=0.0.0.0 \\</div><div class=\"line\">    -<span class=\"built_in\">bind</span>=<span class=\"variable\">$&#123;privIP&#125;</span> \\</div><div class=\"line\">    -advertise=<span class=\"variable\">$&#123;privIP&#125;</span></div><div class=\"line\"></div><div class=\"line\">sleep 2</div><div class=\"line\"></div><div class=\"line\">svr_runing=$(docker ps -a | grep <span class=\"string\">\"<span class=\"variable\">$&#123;contain_svr_name&#125;</span>\"</span> | egrep <span class=\"string\">\"Up [About]|[0-9]&#123;1,&#125;\"</span>)</div><div class=\"line\"><span class=\"keyword\">if</span> [[ <span class=\"variable\">$&#123;svr_runing&#125;</span> == <span class=\"string\">\"\"</span> ]];</div><div class=\"line\"><span class=\"keyword\">then</span></div><div class=\"line\">    <span class=\"built_in\">echo</span> -e <span class=\"string\">\"\\nError: docker-consul failed to start...\\n\"</span></div><div class=\"line\">    <span class=\"built_in\">exit</span></div><div class=\"line\"><span class=\"keyword\">fi</span></div><div class=\"line\"><span class=\"built_in\">echo</span> -e <span class=\"string\">\"\\nOK: docker-consul has started as background server.\\n\"</span></div></pre></td></tr></table></figure>\n<ul>\n<li>启动consul client节点(任意数量或不部署), 在需要部署的机器上执行(需修改svrnodes列表):</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#!/bin/bash</span></div><div class=\"line\"></div><div class=\"line\">conf_dir=/opt/consul/conf</div><div class=\"line\">mkdir -p <span class=\"variable\">$&#123;conf_dir&#125;</span></div><div class=\"line\"></div><div class=\"line\">svrnodes=(</div><div class=\"line\">10.220.16.133</div><div class=\"line\">10.220.16.134</div><div class=\"line\">10.220.16.163</div><div class=\"line\">)</div><div class=\"line\">privIP=$(/sbin/ifconfig eth0 | sed -n <span class=\"string\">'s/.*inet \\(addr:\\)\\?\\([0-9.]\\&#123;7,15\\&#125;\\) .*/\\2/p'</span>)</div><div class=\"line\">consul_ver=0.8.5</div><div class=\"line\">retry_interval=15s</div><div class=\"line\">contain_cli_name=consul_client</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">if</span> [[ <span class=\"string\">\"<span class=\"variable\">$&#123;svrnodes[@]&#125;</span>\"</span> =~ <span class=\"variable\">$privIP</span> ]];</div><div class=\"line\"><span class=\"keyword\">then</span></div><div class=\"line\">    <span class=\"built_in\">echo</span> -e <span class=\"string\">\"Current node:<span class=\"variable\">$&#123;privIP&#125;</span> is configured for server consul, not to run client mode.\\n\"</span></div><div class=\"line\">    <span class=\"built_in\">exit</span></div><div class=\"line\"><span class=\"keyword\">fi</span></div><div class=\"line\"></div><div class=\"line\">svr_runing=$(docker ps -a | grep <span class=\"string\">\"<span class=\"variable\">$&#123;contain_cli_name&#125;</span>\"</span> | egrep <span class=\"string\">\"Up [About]|[0-9]&#123;1,&#125;\"</span>)</div><div class=\"line\"><span class=\"keyword\">if</span> [[ <span class=\"variable\">$&#123;svr_runing&#125;</span> != <span class=\"string\">\"\"</span> ]];</div><div class=\"line\"><span class=\"keyword\">then</span></div><div class=\"line\">    <span class=\"built_in\">echo</span> -e <span class=\"string\">\"Current container of consul client has been running.\\n\"</span></div><div class=\"line\">    <span class=\"built_in\">exit</span></div><div class=\"line\"><span class=\"keyword\">else</span></div><div class=\"line\">    svr_exists=$(docker ps -a | grep <span class=\"string\">\"<span class=\"variable\">$&#123;contain_cli_name&#125;</span>\"</span>)</div><div class=\"line\">    <span class=\"keyword\">if</span> [[ <span class=\"variable\">$&#123;svr_exists&#125;</span> != <span class=\"string\">\"\"</span> ]];</div><div class=\"line\">    <span class=\"keyword\">then</span></div><div class=\"line\">        <span class=\"built_in\">echo</span> -e <span class=\"string\">\"Now try to start the container as it stopped...\\n\"</span></div><div class=\"line\">        docker start <span class=\"variable\">$&#123;svr_exists&#125;</span></div><div class=\"line\">        sleep 2</div><div class=\"line\">        docker ps -a grep <span class=\"string\">\"<span class=\"variable\">$&#123;contain_cli_name&#125;</span>\"</span></div><div class=\"line\">        <span class=\"built_in\">exit</span></div><div class=\"line\">    <span class=\"keyword\">fi</span></div><div class=\"line\"><span class=\"keyword\">fi</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">echo</span> -e <span class=\"string\">\"To start a new container for consul...\\n\"</span></div><div class=\"line\"><span class=\"built_in\">echo</span> -e <span class=\"string\">\"To initialize configuration...\\n\"</span></div><div class=\"line\"></div><div class=\"line\">nodels=<span class=\"string\">\"\"</span></div><div class=\"line\"><span class=\"keyword\">for</span> host <span class=\"keyword\">in</span> <span class=\"variable\">$&#123;svrnodes[*]&#125;</span></div><div class=\"line\"><span class=\"keyword\">do</span></div><div class=\"line\">    <span class=\"keyword\">if</span> [[ <span class=\"variable\">$nodels</span> != <span class=\"string\">\"\"</span> ]];</div><div class=\"line\">    <span class=\"keyword\">then</span></div><div class=\"line\">        nodels=<span class=\"variable\">$nodels</span>,</div><div class=\"line\">    <span class=\"keyword\">fi</span></div><div class=\"line\">    nodels=<span class=\"variable\">$nodels</span><span class=\"string\">\"\\\"<span class=\"variable\">$host</span>\\\"\"</span></div><div class=\"line\"><span class=\"keyword\">done</span></div><div class=\"line\"></div><div class=\"line\">config=<span class=\"string\">\"&#123;\\n</span></div><div class=\"line\">\\\"retry_join\\\": [<span class=\"variable\">$&#123;nodels&#125;</span>],\\n</div><div class=\"line\">\\\"retry_interval\\\": \\\"<span class=\"variable\">$&#123;retry_interval&#125;</span>\\\",\\n</div><div class=\"line\">\\\"rejoin_after_leave\\\": true,\\n</div><div class=\"line\">\\\"start_join\\\": [<span class=\"variable\">$&#123;nodels&#125;</span>],\\n</div><div class=\"line\">\\\"server\\\": false,\\n</div><div class=\"line\">\\\"ui\\\": true,\\n</div><div class=\"line\">\\\"node_name\\\": \\\"<span class=\"variable\">$HOSTNAME</span>\\\"\\n</div><div class=\"line\">&#125;\\n\"</div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">echo</span> <span class=\"variable\">$config</span></div><div class=\"line\"><span class=\"built_in\">echo</span> -e <span class=\"variable\">$&#123;config&#125;</span> &gt; <span class=\"variable\">$&#123;conf_dir&#125;</span>/client.json</div><div class=\"line\"><span class=\"built_in\">echo</span> -e <span class=\"variable\">$&#123;config&#125;</span></div><div class=\"line\"></div><div class=\"line\">docker run -d -v <span class=\"variable\">$&#123;conf_dir&#125;</span>:<span class=\"variable\">$&#123;conf_dir&#125;</span> \\</div><div class=\"line\">    --name <span class=\"variable\">$&#123;contain_cli_name&#125;</span> \\</div><div class=\"line\">    --net=host consul:<span class=\"variable\">$&#123;consul_ver&#125;</span> agent \\</div><div class=\"line\">    -config-dir=<span class=\"variable\">$&#123;conf_dir&#125;</span> \\</div><div class=\"line\">    -client=0.0.0.0 \\</div><div class=\"line\">    -advertise=<span class=\"variable\">$&#123;privIP&#125;</span></div><div class=\"line\"></div><div class=\"line\">sleep 2</div><div class=\"line\"></div><div class=\"line\">svr_runing=$(docker ps -a | grep <span class=\"string\">\"<span class=\"variable\">$&#123;contain_cli_name&#125;</span>\"</span> | egrep <span class=\"string\">\"Up [About]|[0-9]&#123;1,&#125;\"</span>)</div><div class=\"line\"><span class=\"keyword\">if</span> [[ <span class=\"variable\">$&#123;svr_runing&#125;</span> == <span class=\"string\">\"\"</span> ]];</div><div class=\"line\"><span class=\"keyword\">then</span></div><div class=\"line\">    <span class=\"built_in\">echo</span> -e <span class=\"string\">\"\\nError: docker-consul client node failed to start...\\n\"</span></div><div class=\"line\">    <span class=\"built_in\">exit</span></div><div class=\"line\"><span class=\"keyword\">fi</span></div><div class=\"line\"><span class=\"built_in\">echo</span> -e <span class=\"string\">\"\\nOK: docker-consul has started as a client node.\\n\"</span></div></pre></td></tr></table></figure>\n<ul>\n<li><p>检查集群的状态</p>\n<p>通过webUI地址: <strong><em>http://&lt;其中一个节点ip&gt;:8500/ui/</em></strong>可查看集群状态，正常情况下会显示<strong><em>3 passing</em></strong>。<br><br>通过docker命令行:<br></p>\n</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">root@hadoop:~<span class=\"comment\"># docker exec -it consul_server consul members</span></div><div class=\"line\">Node                          Address             Status  Type    Build  Protocol  DC</div><div class=\"line\">hadoop.slave01.fs.115cdn.net  10.220.16.133:8301  alive   server  0.8.5  2         dc1</div><div class=\"line\">hadoop.slave02.fs.115cdn.net  10.220.16.134:8301  alive   server  0.8.5  2         dc1</div><div class=\"line\">hadoop.slave03.fs.115cdn.net  10.220.16.163:8301  alive   server  0.8.5  2         dc1</div><div class=\"line\">hadoop.slave04.fs.115cdn.net  10.220.16.125:8301  alive   client  0.8.5  2         dc1</div></pre></td></tr></table></figure>"},{"title":"关于本站","date":"2015-07-22T14:31:49.000Z","_content":"\n本站主要记录了我的一些技术笔记， 及生活上的一些感悟。\n\nLife is short, let's programing.\n","source":"_posts/about/about.md","raw":"---\ntitle: 关于本站\ndate: 2015-07-22 22:31:49\ntags:\n---\n\n本站主要记录了我的一些技术笔记， 及生活上的一些感悟。\n\nLife is short, let's programing.\n","slug":"about/about","published":1,"updated":"2017-08-02T07:28:30.881Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj61qancn0006tu4d5brjcrm8","content":"<p>本站主要记录了我的一些技术笔记， 及生活上的一些感悟。</p>\n<p>Life is short, let’s programing.</p>\n","site":{"data":{}},"excerpt":"","more":"<p>本站主要记录了我的一些技术笔记， 及生活上的一些感悟。</p>\n<p>Life is short, let’s programing.</p>\n"},{"title":"python之encode/decode","date":"2017-07-23T04:46:25.000Z","_content":"\n## python之encode/decode\n\n```python\n# coding: utf-8\n\nimport base64\n\nto_enc = 'sampledata'\nenc_res = base64.b64encode(to_enc)\nprint enc_res\n\ndec_res = base64.b64decode(enc_res)\nprint dec_res\n```\n运行效果如下:\n\n```bash\nroot@XIAOMO:/tmp# python27 b64.py\nc2FtcGxlZGF0YQ==\nsampledata\n```\n","source":"_posts/encode/base64.md","raw":"---\ntitle: python之encode/decode\ndate: 2017/7/23 12:46:25\n---\n\n## python之encode/decode\n\n```python\n# coding: utf-8\n\nimport base64\n\nto_enc = 'sampledata'\nenc_res = base64.b64encode(to_enc)\nprint enc_res\n\ndec_res = base64.b64decode(enc_res)\nprint dec_res\n```\n运行效果如下:\n\n```bash\nroot@XIAOMO:/tmp# python27 b64.py\nc2FtcGxlZGF0YQ==\nsampledata\n```\n","slug":"encode/base64","published":1,"updated":"2017-07-23T06:36:17.117Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj61qancx0007tu4din2s5t30","content":"<h2 id=\"python之encode-decode\"><a href=\"#python之encode-decode\" class=\"headerlink\" title=\"python之encode/decode\"></a>python之encode/decode</h2><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\"># coding: utf-8</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">import</span> base64</div><div class=\"line\"></div><div class=\"line\">to_enc = <span class=\"string\">'sampledata'</span></div><div class=\"line\">enc_res = base64.b64encode(to_enc)</div><div class=\"line\"><span class=\"keyword\">print</span> enc_res</div><div class=\"line\"></div><div class=\"line\">dec_res = base64.b64decode(enc_res)</div><div class=\"line\"><span class=\"keyword\">print</span> dec_res</div></pre></td></tr></table></figure>\n<p>运行效果如下:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">root@XIAOMO:/tmp<span class=\"comment\"># python27 b64.py</span></div><div class=\"line\">c2FtcGxlZGF0YQ==</div><div class=\"line\">sampledata</div></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"python之encode-decode\"><a href=\"#python之encode-decode\" class=\"headerlink\" title=\"python之encode/decode\"></a>python之encode/decode</h2><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\"># coding: utf-8</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">import</span> base64</div><div class=\"line\"></div><div class=\"line\">to_enc = <span class=\"string\">'sampledata'</span></div><div class=\"line\">enc_res = base64.b64encode(to_enc)</div><div class=\"line\"><span class=\"keyword\">print</span> enc_res</div><div class=\"line\"></div><div class=\"line\">dec_res = base64.b64decode(enc_res)</div><div class=\"line\"><span class=\"keyword\">print</span> dec_res</div></pre></td></tr></table></figure>\n<p>运行效果如下:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">root@XIAOMO:/tmp<span class=\"comment\"># python27 b64.py</span></div><div class=\"line\">c2FtcGxlZGF0YQ==</div><div class=\"line\">sampledata</div></pre></td></tr></table></figure>\n"},{"title":"CentOS7 中文乱码问题","date":"2017-07-22T17:25:42.000Z","_content":"\n## 修改/etc/locale.conf\n\n```bash\nLANG=\"en_US.UTF-8\"\n```\n\n## 修改/etc/sysconfig/i18n\n\n```bash\nLANG=\"zh_CN.UTF-8\"\n```\n\n## 刷新配置文件\n\n```bash\nsource /etc/locale.conf\nsource /etc/sysconfig/i18n\n```\n","source":"_posts/encode/centos_zh.md","raw":"---\ntitle: CentOS7 中文乱码问题\ndate: 2017/07/23 1:25:42\n---\n\n## 修改/etc/locale.conf\n\n```bash\nLANG=\"en_US.UTF-8\"\n```\n\n## 修改/etc/sysconfig/i18n\n\n```bash\nLANG=\"zh_CN.UTF-8\"\n```\n\n## 刷新配置文件\n\n```bash\nsource /etc/locale.conf\nsource /etc/sysconfig/i18n\n```\n","slug":"encode/centos_zh","published":1,"updated":"2017-07-23T06:34:19.741Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj61qancz0008tu4dezpkeypc","content":"<h2 id=\"修改-etc-locale-conf\"><a href=\"#修改-etc-locale-conf\" class=\"headerlink\" title=\"修改/etc/locale.conf\"></a>修改/etc/locale.conf</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">LANG=<span class=\"string\">\"en_US.UTF-8\"</span></div></pre></td></tr></table></figure>\n<h2 id=\"修改-etc-sysconfig-i18n\"><a href=\"#修改-etc-sysconfig-i18n\" class=\"headerlink\" title=\"修改/etc/sysconfig/i18n\"></a>修改/etc/sysconfig/i18n</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">LANG=<span class=\"string\">\"zh_CN.UTF-8\"</span></div></pre></td></tr></table></figure>\n<h2 id=\"刷新配置文件\"><a href=\"#刷新配置文件\" class=\"headerlink\" title=\"刷新配置文件\"></a>刷新配置文件</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">source</span> /etc/locale.conf</div><div class=\"line\"><span class=\"built_in\">source</span> /etc/sysconfig/i18n</div></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"修改-etc-locale-conf\"><a href=\"#修改-etc-locale-conf\" class=\"headerlink\" title=\"修改/etc/locale.conf\"></a>修改/etc/locale.conf</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">LANG=<span class=\"string\">\"en_US.UTF-8\"</span></div></pre></td></tr></table></figure>\n<h2 id=\"修改-etc-sysconfig-i18n\"><a href=\"#修改-etc-sysconfig-i18n\" class=\"headerlink\" title=\"修改/etc/sysconfig/i18n\"></a>修改/etc/sysconfig/i18n</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">LANG=<span class=\"string\">\"zh_CN.UTF-8\"</span></div></pre></td></tr></table></figure>\n<h2 id=\"刷新配置文件\"><a href=\"#刷新配置文件\" class=\"headerlink\" title=\"刷新配置文件\"></a>刷新配置文件</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">source</span> /etc/locale.conf</div><div class=\"line\"><span class=\"built_in\">source</span> /etc/sysconfig/i18n</div></pre></td></tr></table></figure>\n"},{"title":"[golang]指针类型","date":"2016-04-05T11:35:16.000Z","_content":"\n### 关于golang指针类型\nGolang保留了指针类型,支持指针操作。<br>\n可以使用操作符&取变量地址，使用操作符*通过指针变量间接访问目标对象。<br>\nunsafe.Pointer可以与任意指针类型转换, 可以将unsafe.Pointer转换为uintptr,然后做指针运算。<br>\nuintptr类型可以转换为整数。\n<!--more-->\n### 指针使用示例\n\n```golang\npackage main\n\nimport (\n    \"fmt\"\n    \"unsafe\"\n)\n\ntype User struct {\n    Id int\n    Name string\n}\n\nfunc main(){\n    i := 10\n    var p *int = &i  //取地址\n    fmt.Println(*p) // 取值\n\n    user := &User{1, \"xiaomo\"}\n    user.Id = 100  //直接对指针对象的成员赋值\n    fmt.Println(user)\n\n    user2 := *user  //拷贝对象\n    user2.Id = 200\n    user2.Name = \"xiaomomo\"\n    fmt.Println(user, user2)\n\n    up := unsafe.Pointer(p)  // 转为通用指针类型\n    uptr := uintptr(up)      // 转为uintptr指针类型\n    fmt.Println(up, uptr)\n}\n```\n\n###运行效果如下:\n```bash\nroot@XIAOMO:~/gopro# go build main.go\nroot@XIAOMO:~/gopro# ./main\n10\n&{100 xiaomo}\n&{100 xiaomo} {200 xiaomomo}\n0xc210000070 833492090992\n```\n","source":"_posts/golang/golang_pointer.md","raw":"---\ntitle: '[golang]指针类型'\ndate: 2016-04-05 19:35:16\ntags: golang\n---\n\n### 关于golang指针类型\nGolang保留了指针类型,支持指针操作。<br>\n可以使用操作符&取变量地址，使用操作符*通过指针变量间接访问目标对象。<br>\nunsafe.Pointer可以与任意指针类型转换, 可以将unsafe.Pointer转换为uintptr,然后做指针运算。<br>\nuintptr类型可以转换为整数。\n<!--more-->\n### 指针使用示例\n\n```golang\npackage main\n\nimport (\n    \"fmt\"\n    \"unsafe\"\n)\n\ntype User struct {\n    Id int\n    Name string\n}\n\nfunc main(){\n    i := 10\n    var p *int = &i  //取地址\n    fmt.Println(*p) // 取值\n\n    user := &User{1, \"xiaomo\"}\n    user.Id = 100  //直接对指针对象的成员赋值\n    fmt.Println(user)\n\n    user2 := *user  //拷贝对象\n    user2.Id = 200\n    user2.Name = \"xiaomomo\"\n    fmt.Println(user, user2)\n\n    up := unsafe.Pointer(p)  // 转为通用指针类型\n    uptr := uintptr(up)      // 转为uintptr指针类型\n    fmt.Println(up, uptr)\n}\n```\n\n###运行效果如下:\n```bash\nroot@XIAOMO:~/gopro# go build main.go\nroot@XIAOMO:~/gopro# ./main\n10\n&{100 xiaomo}\n&{100 xiaomo} {200 xiaomomo}\n0xc210000070 833492090992\n```\n","slug":"golang/golang_pointer","published":1,"updated":"2017-08-07T02:58:37.447Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj61qand10009tu4dqo2xjs02","content":"<h3 id=\"关于golang指针类型\"><a href=\"#关于golang指针类型\" class=\"headerlink\" title=\"关于golang指针类型\"></a>关于golang指针类型</h3><p>Golang保留了指针类型,支持指针操作。<br><br>可以使用操作符&amp;取变量地址，使用操作符*通过指针变量间接访问目标对象。<br><br>unsafe.Pointer可以与任意指针类型转换, 可以将unsafe.Pointer转换为uintptr,然后做指针运算。<br><br>uintptr类型可以转换为整数。<br><a id=\"more\"></a></p>\n<h3 id=\"指针使用示例\"><a href=\"#指针使用示例\" class=\"headerlink\" title=\"指针使用示例\"></a>指针使用示例</h3><figure class=\"highlight golang\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">package</span> main</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">import</span> (</div><div class=\"line\">    <span class=\"string\">\"fmt\"</span></div><div class=\"line\">    <span class=\"string\">\"unsafe\"</span></div><div class=\"line\">)</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">type</span> User <span class=\"keyword\">struct</span> &#123;</div><div class=\"line\">    Id <span class=\"keyword\">int</span></div><div class=\"line\">    Name <span class=\"keyword\">string</span></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">    i := <span class=\"number\">10</span></div><div class=\"line\">    <span class=\"keyword\">var</span> p *<span class=\"keyword\">int</span> = &amp;i  <span class=\"comment\">//取地址</span></div><div class=\"line\">    fmt.Println(*p) <span class=\"comment\">// 取值</span></div><div class=\"line\"></div><div class=\"line\">    user := &amp;User&#123;<span class=\"number\">1</span>, <span class=\"string\">\"xiaomo\"</span>&#125;</div><div class=\"line\">    user.Id = <span class=\"number\">100</span>  <span class=\"comment\">//直接对指针对象的成员赋值</span></div><div class=\"line\">    fmt.Println(user)</div><div class=\"line\"></div><div class=\"line\">    user2 := *user  <span class=\"comment\">//拷贝对象</span></div><div class=\"line\">    user2.Id = <span class=\"number\">200</span></div><div class=\"line\">    user2.Name = <span class=\"string\">\"xiaomomo\"</span></div><div class=\"line\">    fmt.Println(user, user2)</div><div class=\"line\"></div><div class=\"line\">    up := unsafe.Pointer(p)  <span class=\"comment\">// 转为通用指针类型</span></div><div class=\"line\">    uptr := <span class=\"keyword\">uintptr</span>(up)      <span class=\"comment\">// 转为uintptr指针类型</span></div><div class=\"line\">    fmt.Println(up, uptr)</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>###运行效果如下:<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">root@XIAOMO:~/gopro<span class=\"comment\"># go build main.go</span></div><div class=\"line\">root@XIAOMO:~/gopro<span class=\"comment\"># ./main</span></div><div class=\"line\">10</div><div class=\"line\">&amp;&#123;100 xiaomo&#125;</div><div class=\"line\">&amp;&#123;100 xiaomo&#125; &#123;200 xiaomomo&#125;</div><div class=\"line\">0xc210000070 833492090992</div></pre></td></tr></table></figure></p>\n","site":{"data":{}},"excerpt":"<h3 id=\"关于golang指针类型\"><a href=\"#关于golang指针类型\" class=\"headerlink\" title=\"关于golang指针类型\"></a>关于golang指针类型</h3><p>Golang保留了指针类型,支持指针操作。<br><br>可以使用操作符&amp;取变量地址，使用操作符*通过指针变量间接访问目标对象。<br><br>unsafe.Pointer可以与任意指针类型转换, 可以将unsafe.Pointer转换为uintptr,然后做指针运算。<br><br>uintptr类型可以转换为整数。<br>","more":"</p>\n<h3 id=\"指针使用示例\"><a href=\"#指针使用示例\" class=\"headerlink\" title=\"指针使用示例\"></a>指针使用示例</h3><figure class=\"highlight golang\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">package</span> main</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">import</span> (</div><div class=\"line\">    <span class=\"string\">\"fmt\"</span></div><div class=\"line\">    <span class=\"string\">\"unsafe\"</span></div><div class=\"line\">)</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">type</span> User <span class=\"keyword\">struct</span> &#123;</div><div class=\"line\">    Id <span class=\"keyword\">int</span></div><div class=\"line\">    Name <span class=\"keyword\">string</span></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">    i := <span class=\"number\">10</span></div><div class=\"line\">    <span class=\"keyword\">var</span> p *<span class=\"keyword\">int</span> = &amp;i  <span class=\"comment\">//取地址</span></div><div class=\"line\">    fmt.Println(*p) <span class=\"comment\">// 取值</span></div><div class=\"line\"></div><div class=\"line\">    user := &amp;User&#123;<span class=\"number\">1</span>, <span class=\"string\">\"xiaomo\"</span>&#125;</div><div class=\"line\">    user.Id = <span class=\"number\">100</span>  <span class=\"comment\">//直接对指针对象的成员赋值</span></div><div class=\"line\">    fmt.Println(user)</div><div class=\"line\"></div><div class=\"line\">    user2 := *user  <span class=\"comment\">//拷贝对象</span></div><div class=\"line\">    user2.Id = <span class=\"number\">200</span></div><div class=\"line\">    user2.Name = <span class=\"string\">\"xiaomomo\"</span></div><div class=\"line\">    fmt.Println(user, user2)</div><div class=\"line\"></div><div class=\"line\">    up := unsafe.Pointer(p)  <span class=\"comment\">// 转为通用指针类型</span></div><div class=\"line\">    uptr := <span class=\"keyword\">uintptr</span>(up)      <span class=\"comment\">// 转为uintptr指针类型</span></div><div class=\"line\">    fmt.Println(up, uptr)</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>###运行效果如下:<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">root@XIAOMO:~/gopro<span class=\"comment\"># go build main.go</span></div><div class=\"line\">root@XIAOMO:~/gopro<span class=\"comment\"># ./main</span></div><div class=\"line\">10</div><div class=\"line\">&amp;&#123;100 xiaomo&#125;</div><div class=\"line\">&amp;&#123;100 xiaomo&#125; &#123;200 xiaomomo&#125;</div><div class=\"line\">0xc210000070 833492090992</div></pre></td></tr></table></figure></p>"},{"layout":"[golang]array-slice","title":"golang数组与切片","date":"2017-01-30T01:00:18.000Z","_content":"\n### array类型\n#### 1)基础特性\n- array为固定长度的数组, 其内存分配为连续的, 使用前需确定长度;\n- 数组为值类型, 赋值操作的新变量是原数组的一份完整拷贝;\n- 作为函数的传递参数, 实际也是数组的一份拷贝, 效率也就比传递指针低;\n- 数组长度也是Type一部分, 如[4]int和[2]int类型不一样.\n\n<!--more-->\n\n#### 2)声明与初始化\n```golang\npackage main\nimport \"fmt\"\n\n// 只声明, 不作初始化\nvar a1 [3]int         //一维, [0 0 0]\nvar a2 [2][2]int      //二维, [[0,0],[0,0]]\n\n// 声明并初始化\nvar b1 [5]int = [5]int{1,2,3,4,5}\nvar b2 [4]string = [4]string{\"Red\", \"Blue\", \"Green\", \"Yellow\"}\nvar b3 [2][2]int = [2][2]int{[2]int{5,6}, [2]int{7,8}}\n// 不能在顶层进行快速声明和初始化, 需用: var b4 [3]string = ...\n//b4 := [3]string{\"a\", \"b\", \"c\"}\n\n// 几种常用初始化方法(在函数内使用)\nfunc arrInFunc(){\n    a := [3]int{1,2,3}    // 所有元素赋值\n    b := [5]int{1,2,3}    // 前三个元素赋值，其他默认0\n    c := [15]int{10:3}    // 指定第11个元素初始化为3，其他默认0\n    d := [...]int{4,5,6}  // 编译器自动推断长度\n    e := [...]int{0:1, 1:2, 5:7} //自动推断长度\n    fmt.Printf(\"%v\\n\", a)\n    fmt.Printf(\"%v\\n\", b)\n    fmt.Printf(\"%v\\n\", c)\n    fmt.Printf(\"%v\\n\", d)\n    fmt.Printf(\"%v\\n\", e)\n}\n\nfunc main(){\n    arrInFunc()\n}\n```\nmain.go演示效果如下:\n```bash\nroot@XIAOMO:~/gopro# ./main\n[1 2 3]\n[1 2 3 0 0]\n[0 0 0 0 0 0 0 0 0 0 3 0 0 0 0]\n[4 5 6]\n[1 2 0 0 0 7]\n```\n\n#### 3)元素访问\nmain.go示例\n```golang\npackage main\n\nfunc accessElem() {\n    array := [3]int{1, 3, 9}\n\n    // 通过下标访问\n    for i:=0; i < len(array); i++ {\n        fmt.Println(i, array[i])\n    }\n\n    // 迭代方式访问\n    for i, v := range array {\n        fmt.Println(i, v)\n    }\n\n    // 使用new创建数组,零值填充, 返回数组指针\n    p := new([5]int)\n    fmt.Println(*p)\n}\n\nfunc main(){\n    accessElem()\n}\n```\n\n示例演示效果:\n```bash\nroot@XIAOMO:~/gopro# ./main\n0 1\n1 3\n2 9\n0 1\n1 3\n2 9\n[0 0 0 0 0]\n```\n\n#### 4)在函数中传递数组\n和C++类似, 函数参数传递中可以传值或传指针:\n\n```golang\n// 传值, 每次调用foo1, 系统将分配16字节内存在栈上\n// 函数运行结束时, 会弹栈并释放16字节内存\nfunc foo1(arr [16]int) {\n   // ...\n}\nvar a [16]int\nfoo1(a)\n\n// 传指针, 每次调用foo2, 系统将只分配指针需要的内存空间\nfunc foo2(arr *[16]int){\n    // ...\n}\nvar b [16]int\nfoo2(&b)\n```\n\n### slice类型\n#### 1)基础特性\n+ slice是一种动态数组, 可以认为是指向数组的指针; 但其并不只是指针，本身有其数据结构, 该结构包含三个元素:\n    - 指向原生数组的指针(pointer)\n    - 数组切片的元素个数(len)\n    - 数组切片已分配的空间(cap)\n+ slice作为一个引用类型, 声明是不需要指定长度;\n+ 增长操作通过内建方法append实现, 内部实现自动扩容.\n\n#### 2)创建和初始化\nmain.go\n```golang\npackage main\n\nfunc createSlice() {\n    // 通过array创建slice, 用法神似python\n    arr := [5]int{1,2,3,4,5}\n    sli1 := arr[:3]  // 切出前三个元素\n    sli2 := arr[:4]  // 切出前四个元素\n    sli1[1] = 8\n    sli2[1] = 9\n    // 将打印 9 9 9, 可见修改的是同一个元素\n    println(arr[1], sli1[1], sli2[1])\n\n    // 通过make创建slice\n    sli3 := make([]int, 3)\n    sli4 := make([]int, 4, 8) //初始4个元素，预留8个元素的空间\n    sli5 := []int{1,2,3,4,5}  //初始化赋值\n    fmt.Printf(\"%v\\n\", sli3)\n    fmt.Printf(\"%v\\n\", sli4)\n    fmt.Printf(\"%v\\n\", sli5)\n}\n\nfunc main(){\n    createSlice()\n}\n```\n#### 3)元素访问\n```golang\npackage main\n\nfunc useSlice() {\n    slice := []int{10, 20, 30, 40, 50}\n    for index, value := range slice {\n        fmt.Printf(\"Index: %d  Value: %d\\n\", index, value)\n    }\n\n    for i := 0; i < len(slice); i++ {\n        fmt.Printf(\"Index: %d  Value: %d\\n\", i, slice[i])\n    }\n}\n\nfunc main(){\n    useSlice()\n}\n```\n#### 4)在函数间传递slice\n由于slice是指向底层数组的指针, 在函数间传递slice是开销很小的。\n在64位机器中, slice对象占24个字节, 三个元素分别占8个字节。\n作为参数在函数中传递的方式和数组类似。\n\n### 关于new与make的区别探讨\n主要区别:\n\n- new可以用来创建各种类型对象, 也即是各类型的空间分配;\n- make用来处理内建类型(slice, channel, map等)的内存分配.\n","source":"_posts/golang/golang_array-slice.md","raw":"---\nlayout: '[golang]array-slice'\ntitle: golang数组与切片\ndate: 2017-01-30 09:00:18\ntags: golang\n---\n\n### array类型\n#### 1)基础特性\n- array为固定长度的数组, 其内存分配为连续的, 使用前需确定长度;\n- 数组为值类型, 赋值操作的新变量是原数组的一份完整拷贝;\n- 作为函数的传递参数, 实际也是数组的一份拷贝, 效率也就比传递指针低;\n- 数组长度也是Type一部分, 如[4]int和[2]int类型不一样.\n\n<!--more-->\n\n#### 2)声明与初始化\n```golang\npackage main\nimport \"fmt\"\n\n// 只声明, 不作初始化\nvar a1 [3]int         //一维, [0 0 0]\nvar a2 [2][2]int      //二维, [[0,0],[0,0]]\n\n// 声明并初始化\nvar b1 [5]int = [5]int{1,2,3,4,5}\nvar b2 [4]string = [4]string{\"Red\", \"Blue\", \"Green\", \"Yellow\"}\nvar b3 [2][2]int = [2][2]int{[2]int{5,6}, [2]int{7,8}}\n// 不能在顶层进行快速声明和初始化, 需用: var b4 [3]string = ...\n//b4 := [3]string{\"a\", \"b\", \"c\"}\n\n// 几种常用初始化方法(在函数内使用)\nfunc arrInFunc(){\n    a := [3]int{1,2,3}    // 所有元素赋值\n    b := [5]int{1,2,3}    // 前三个元素赋值，其他默认0\n    c := [15]int{10:3}    // 指定第11个元素初始化为3，其他默认0\n    d := [...]int{4,5,6}  // 编译器自动推断长度\n    e := [...]int{0:1, 1:2, 5:7} //自动推断长度\n    fmt.Printf(\"%v\\n\", a)\n    fmt.Printf(\"%v\\n\", b)\n    fmt.Printf(\"%v\\n\", c)\n    fmt.Printf(\"%v\\n\", d)\n    fmt.Printf(\"%v\\n\", e)\n}\n\nfunc main(){\n    arrInFunc()\n}\n```\nmain.go演示效果如下:\n```bash\nroot@XIAOMO:~/gopro# ./main\n[1 2 3]\n[1 2 3 0 0]\n[0 0 0 0 0 0 0 0 0 0 3 0 0 0 0]\n[4 5 6]\n[1 2 0 0 0 7]\n```\n\n#### 3)元素访问\nmain.go示例\n```golang\npackage main\n\nfunc accessElem() {\n    array := [3]int{1, 3, 9}\n\n    // 通过下标访问\n    for i:=0; i < len(array); i++ {\n        fmt.Println(i, array[i])\n    }\n\n    // 迭代方式访问\n    for i, v := range array {\n        fmt.Println(i, v)\n    }\n\n    // 使用new创建数组,零值填充, 返回数组指针\n    p := new([5]int)\n    fmt.Println(*p)\n}\n\nfunc main(){\n    accessElem()\n}\n```\n\n示例演示效果:\n```bash\nroot@XIAOMO:~/gopro# ./main\n0 1\n1 3\n2 9\n0 1\n1 3\n2 9\n[0 0 0 0 0]\n```\n\n#### 4)在函数中传递数组\n和C++类似, 函数参数传递中可以传值或传指针:\n\n```golang\n// 传值, 每次调用foo1, 系统将分配16字节内存在栈上\n// 函数运行结束时, 会弹栈并释放16字节内存\nfunc foo1(arr [16]int) {\n   // ...\n}\nvar a [16]int\nfoo1(a)\n\n// 传指针, 每次调用foo2, 系统将只分配指针需要的内存空间\nfunc foo2(arr *[16]int){\n    // ...\n}\nvar b [16]int\nfoo2(&b)\n```\n\n### slice类型\n#### 1)基础特性\n+ slice是一种动态数组, 可以认为是指向数组的指针; 但其并不只是指针，本身有其数据结构, 该结构包含三个元素:\n    - 指向原生数组的指针(pointer)\n    - 数组切片的元素个数(len)\n    - 数组切片已分配的空间(cap)\n+ slice作为一个引用类型, 声明是不需要指定长度;\n+ 增长操作通过内建方法append实现, 内部实现自动扩容.\n\n#### 2)创建和初始化\nmain.go\n```golang\npackage main\n\nfunc createSlice() {\n    // 通过array创建slice, 用法神似python\n    arr := [5]int{1,2,3,4,5}\n    sli1 := arr[:3]  // 切出前三个元素\n    sli2 := arr[:4]  // 切出前四个元素\n    sli1[1] = 8\n    sli2[1] = 9\n    // 将打印 9 9 9, 可见修改的是同一个元素\n    println(arr[1], sli1[1], sli2[1])\n\n    // 通过make创建slice\n    sli3 := make([]int, 3)\n    sli4 := make([]int, 4, 8) //初始4个元素，预留8个元素的空间\n    sli5 := []int{1,2,3,4,5}  //初始化赋值\n    fmt.Printf(\"%v\\n\", sli3)\n    fmt.Printf(\"%v\\n\", sli4)\n    fmt.Printf(\"%v\\n\", sli5)\n}\n\nfunc main(){\n    createSlice()\n}\n```\n#### 3)元素访问\n```golang\npackage main\n\nfunc useSlice() {\n    slice := []int{10, 20, 30, 40, 50}\n    for index, value := range slice {\n        fmt.Printf(\"Index: %d  Value: %d\\n\", index, value)\n    }\n\n    for i := 0; i < len(slice); i++ {\n        fmt.Printf(\"Index: %d  Value: %d\\n\", i, slice[i])\n    }\n}\n\nfunc main(){\n    useSlice()\n}\n```\n#### 4)在函数间传递slice\n由于slice是指向底层数组的指针, 在函数间传递slice是开销很小的。\n在64位机器中, slice对象占24个字节, 三个元素分别占8个字节。\n作为参数在函数中传递的方式和数组类似。\n\n### 关于new与make的区别探讨\n主要区别:\n\n- new可以用来创建各种类型对象, 也即是各类型的空间分配;\n- make用来处理内建类型(slice, channel, map等)的内存分配.\n","slug":"golang/golang_array-slice","published":1,"updated":"2017-08-07T05:47:10.146Z","comments":1,"photos":[],"link":"","_id":"cj61qjrxf0000dd4dfo5bcjjn","content":"<h3 id=\"array类型\"><a href=\"#array类型\" class=\"headerlink\" title=\"array类型\"></a>array类型</h3><h4 id=\"1-基础特性\"><a href=\"#1-基础特性\" class=\"headerlink\" title=\"1)基础特性\"></a>1)基础特性</h4><ul>\n<li>array为固定长度的数组, 其内存分配为连续的, 使用前需确定长度;</li>\n<li>数组为值类型, 赋值操作的新变量是原数组的一份完整拷贝;</li>\n<li>作为函数的传递参数, 实际也是数组的一份拷贝, 效率也就比传递指针低;</li>\n<li>数组长度也是Type一部分, 如[4]int和[2]int类型不一样.</li>\n</ul>\n<a id=\"more\"></a>\n<h4 id=\"2-声明与初始化\"><a href=\"#2-声明与初始化\" class=\"headerlink\" title=\"2)声明与初始化\"></a>2)声明与初始化</h4><figure class=\"highlight golang\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">package</span> main</div><div class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">\"fmt\"</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 只声明, 不作初始化</span></div><div class=\"line\"><span class=\"keyword\">var</span> a1 [<span class=\"number\">3</span>]<span class=\"keyword\">int</span>         <span class=\"comment\">//一维, [0 0 0]</span></div><div class=\"line\"><span class=\"keyword\">var</span> a2 [<span class=\"number\">2</span>][<span class=\"number\">2</span>]<span class=\"keyword\">int</span>      <span class=\"comment\">//二维, [[0,0],[0,0]]</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 声明并初始化</span></div><div class=\"line\"><span class=\"keyword\">var</span> b1 [<span class=\"number\">5</span>]<span class=\"keyword\">int</span> = [<span class=\"number\">5</span>]<span class=\"keyword\">int</span>&#123;<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>,<span class=\"number\">5</span>&#125;</div><div class=\"line\"><span class=\"keyword\">var</span> b2 [<span class=\"number\">4</span>]<span class=\"keyword\">string</span> = [<span class=\"number\">4</span>]<span class=\"keyword\">string</span>&#123;<span class=\"string\">\"Red\"</span>, <span class=\"string\">\"Blue\"</span>, <span class=\"string\">\"Green\"</span>, <span class=\"string\">\"Yellow\"</span>&#125;</div><div class=\"line\"><span class=\"keyword\">var</span> b3 [<span class=\"number\">2</span>][<span class=\"number\">2</span>]<span class=\"keyword\">int</span> = [<span class=\"number\">2</span>][<span class=\"number\">2</span>]<span class=\"keyword\">int</span>&#123;[<span class=\"number\">2</span>]<span class=\"keyword\">int</span>&#123;<span class=\"number\">5</span>,<span class=\"number\">6</span>&#125;, [<span class=\"number\">2</span>]<span class=\"keyword\">int</span>&#123;<span class=\"number\">7</span>,<span class=\"number\">8</span>&#125;&#125;</div><div class=\"line\"><span class=\"comment\">// 不能在顶层进行快速声明和初始化, 需用: var b4 [3]string = ...</span></div><div class=\"line\"><span class=\"comment\">//b4 := [3]string&#123;\"a\", \"b\", \"c\"&#125;</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 几种常用初始化方法(在函数内使用)</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">arrInFunc</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">    a := [<span class=\"number\">3</span>]<span class=\"keyword\">int</span>&#123;<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>&#125;    <span class=\"comment\">// 所有元素赋值</span></div><div class=\"line\">    b := [<span class=\"number\">5</span>]<span class=\"keyword\">int</span>&#123;<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>&#125;    <span class=\"comment\">// 前三个元素赋值，其他默认0</span></div><div class=\"line\">    c := [<span class=\"number\">15</span>]<span class=\"keyword\">int</span>&#123;<span class=\"number\">10</span>:<span class=\"number\">3</span>&#125;    <span class=\"comment\">// 指定第11个元素初始化为3，其他默认0</span></div><div class=\"line\">    d := [...]<span class=\"keyword\">int</span>&#123;<span class=\"number\">4</span>,<span class=\"number\">5</span>,<span class=\"number\">6</span>&#125;  <span class=\"comment\">// 编译器自动推断长度</span></div><div class=\"line\">    e := [...]<span class=\"keyword\">int</span>&#123;<span class=\"number\">0</span>:<span class=\"number\">1</span>, <span class=\"number\">1</span>:<span class=\"number\">2</span>, <span class=\"number\">5</span>:<span class=\"number\">7</span>&#125; <span class=\"comment\">//自动推断长度</span></div><div class=\"line\">    fmt.Printf(<span class=\"string\">\"%v\\n\"</span>, a)</div><div class=\"line\">    fmt.Printf(<span class=\"string\">\"%v\\n\"</span>, b)</div><div class=\"line\">    fmt.Printf(<span class=\"string\">\"%v\\n\"</span>, c)</div><div class=\"line\">    fmt.Printf(<span class=\"string\">\"%v\\n\"</span>, d)</div><div class=\"line\">    fmt.Printf(<span class=\"string\">\"%v\\n\"</span>, e)</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">    arrInFunc()</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>main.go演示效果如下:<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">root@XIAOMO:~/gopro<span class=\"comment\"># ./main</span></div><div class=\"line\">[1 2 3]</div><div class=\"line\">[1 2 3 0 0]</div><div class=\"line\">[0 0 0 0 0 0 0 0 0 0 3 0 0 0 0]</div><div class=\"line\">[4 5 6]</div><div class=\"line\">[1 2 0 0 0 7]</div></pre></td></tr></table></figure></p>\n<h4 id=\"3-元素访问\"><a href=\"#3-元素访问\" class=\"headerlink\" title=\"3)元素访问\"></a>3)元素访问</h4><p>main.go示例<br><figure class=\"highlight golang\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">package</span> main</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">accessElem</span><span class=\"params\">()</span></span> &#123;</div><div class=\"line\">    array := [<span class=\"number\">3</span>]<span class=\"keyword\">int</span>&#123;<span class=\"number\">1</span>, <span class=\"number\">3</span>, <span class=\"number\">9</span>&#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// 通过下标访问</span></div><div class=\"line\">    <span class=\"keyword\">for</span> i:=<span class=\"number\">0</span>; i &lt; <span class=\"built_in\">len</span>(array); i++ &#123;</div><div class=\"line\">        fmt.Println(i, array[i])</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// 迭代方式访问</span></div><div class=\"line\">    <span class=\"keyword\">for</span> i, v := <span class=\"keyword\">range</span> array &#123;</div><div class=\"line\">        fmt.Println(i, v)</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// 使用new创建数组,零值填充, 返回数组指针</span></div><div class=\"line\">    p := <span class=\"built_in\">new</span>([<span class=\"number\">5</span>]<span class=\"keyword\">int</span>)</div><div class=\"line\">    fmt.Println(*p)</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">    accessElem()</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>示例演示效果:<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">root@XIAOMO:~/gopro<span class=\"comment\"># ./main</span></div><div class=\"line\">0 1</div><div class=\"line\">1 3</div><div class=\"line\">2 9</div><div class=\"line\">0 1</div><div class=\"line\">1 3</div><div class=\"line\">2 9</div><div class=\"line\">[0 0 0 0 0]</div></pre></td></tr></table></figure></p>\n<h4 id=\"4-在函数中传递数组\"><a href=\"#4-在函数中传递数组\" class=\"headerlink\" title=\"4)在函数中传递数组\"></a>4)在函数中传递数组</h4><p>和C++类似, 函数参数传递中可以传值或传指针:</p>\n<figure class=\"highlight golang\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 传值, 每次调用foo1, 系统将分配16字节内存在栈上</span></div><div class=\"line\"><span class=\"comment\">// 函数运行结束时, 会弹栈并释放16字节内存</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">foo1</span><span class=\"params\">(arr [16]<span class=\"keyword\">int</span>)</span></span> &#123;</div><div class=\"line\">   <span class=\"comment\">// ...</span></div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"keyword\">var</span> a [<span class=\"number\">16</span>]<span class=\"keyword\">int</span></div><div class=\"line\">foo1(a)</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 传指针, 每次调用foo2, 系统将只分配指针需要的内存空间</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">foo2</span><span class=\"params\">(arr *[16]<span class=\"keyword\">int</span>)</span></span>&#123;</div><div class=\"line\">    <span class=\"comment\">// ...</span></div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"keyword\">var</span> b [<span class=\"number\">16</span>]<span class=\"keyword\">int</span></div><div class=\"line\">foo2(&amp;b)</div></pre></td></tr></table></figure>\n<h3 id=\"slice类型\"><a href=\"#slice类型\" class=\"headerlink\" title=\"slice类型\"></a>slice类型</h3><h4 id=\"1-基础特性-1\"><a href=\"#1-基础特性-1\" class=\"headerlink\" title=\"1)基础特性\"></a>1)基础特性</h4><ul>\n<li>slice是一种动态数组, 可以认为是指向数组的指针; 但其并不只是指针，本身有其数据结构, 该结构包含三个元素:<ul>\n<li>指向原生数组的指针(pointer)</li>\n<li>数组切片的元素个数(len)</li>\n<li>数组切片已分配的空间(cap)</li>\n</ul>\n</li>\n<li>slice作为一个引用类型, 声明是不需要指定长度;</li>\n<li>增长操作通过内建方法append实现, 内部实现自动扩容.</li>\n</ul>\n<h4 id=\"2-创建和初始化\"><a href=\"#2-创建和初始化\" class=\"headerlink\" title=\"2)创建和初始化\"></a>2)创建和初始化</h4><p>main.go<br><figure class=\"highlight golang\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">package</span> main</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">createSlice</span><span class=\"params\">()</span></span> &#123;</div><div class=\"line\">    <span class=\"comment\">// 通过array创建slice, 用法神似python</span></div><div class=\"line\">    arr := [<span class=\"number\">5</span>]<span class=\"keyword\">int</span>&#123;<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>,<span class=\"number\">5</span>&#125;</div><div class=\"line\">    sli1 := arr[:<span class=\"number\">3</span>]  <span class=\"comment\">// 切出前三个元素</span></div><div class=\"line\">    sli2 := arr[:<span class=\"number\">4</span>]  <span class=\"comment\">// 切出前四个元素</span></div><div class=\"line\">    sli1[<span class=\"number\">1</span>] = <span class=\"number\">8</span></div><div class=\"line\">    sli2[<span class=\"number\">1</span>] = <span class=\"number\">9</span></div><div class=\"line\">    <span class=\"comment\">// 将打印 9 9 9, 可见修改的是同一个元素</span></div><div class=\"line\">    <span class=\"built_in\">println</span>(arr[<span class=\"number\">1</span>], sli1[<span class=\"number\">1</span>], sli2[<span class=\"number\">1</span>])</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// 通过make创建slice</span></div><div class=\"line\">    sli3 := <span class=\"built_in\">make</span>([]<span class=\"keyword\">int</span>, <span class=\"number\">3</span>)</div><div class=\"line\">    sli4 := <span class=\"built_in\">make</span>([]<span class=\"keyword\">int</span>, <span class=\"number\">4</span>, <span class=\"number\">8</span>) <span class=\"comment\">//初始4个元素，预留8个元素的空间</span></div><div class=\"line\">    sli5 := []<span class=\"keyword\">int</span>&#123;<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>,<span class=\"number\">5</span>&#125;  <span class=\"comment\">//初始化赋值</span></div><div class=\"line\">    fmt.Printf(<span class=\"string\">\"%v\\n\"</span>, sli3)</div><div class=\"line\">    fmt.Printf(<span class=\"string\">\"%v\\n\"</span>, sli4)</div><div class=\"line\">    fmt.Printf(<span class=\"string\">\"%v\\n\"</span>, sli5)</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">    createSlice()</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<h4 id=\"3-元素访问-1\"><a href=\"#3-元素访问-1\" class=\"headerlink\" title=\"3)元素访问\"></a>3)元素访问</h4><figure class=\"highlight golang\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">package</span> main</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">useSlice</span><span class=\"params\">()</span></span> &#123;</div><div class=\"line\">    slice := []<span class=\"keyword\">int</span>&#123;<span class=\"number\">10</span>, <span class=\"number\">20</span>, <span class=\"number\">30</span>, <span class=\"number\">40</span>, <span class=\"number\">50</span>&#125;</div><div class=\"line\">    <span class=\"keyword\">for</span> index, value := <span class=\"keyword\">range</span> slice &#123;</div><div class=\"line\">        fmt.Printf(<span class=\"string\">\"Index: %d  Value: %d\\n\"</span>, index, value)</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">for</span> i := <span class=\"number\">0</span>; i &lt; <span class=\"built_in\">len</span>(slice); i++ &#123;</div><div class=\"line\">        fmt.Printf(<span class=\"string\">\"Index: %d  Value: %d\\n\"</span>, i, slice[i])</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">    useSlice()</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h4 id=\"4-在函数间传递slice\"><a href=\"#4-在函数间传递slice\" class=\"headerlink\" title=\"4)在函数间传递slice\"></a>4)在函数间传递slice</h4><p>由于slice是指向底层数组的指针, 在函数间传递slice是开销很小的。<br>在64位机器中, slice对象占24个字节, 三个元素分别占8个字节。<br>作为参数在函数中传递的方式和数组类似。</p>\n<h3 id=\"关于new与make的区别探讨\"><a href=\"#关于new与make的区别探讨\" class=\"headerlink\" title=\"关于new与make的区别探讨\"></a>关于new与make的区别探讨</h3><p>主要区别:</p>\n<ul>\n<li>new可以用来创建各种类型对象, 也即是各类型的空间分配;</li>\n<li>make用来处理内建类型(slice, channel, map等)的内存分配.</li>\n</ul>\n","site":{"data":{}},"excerpt":"<h3 id=\"array类型\"><a href=\"#array类型\" class=\"headerlink\" title=\"array类型\"></a>array类型</h3><h4 id=\"1-基础特性\"><a href=\"#1-基础特性\" class=\"headerlink\" title=\"1)基础特性\"></a>1)基础特性</h4><ul>\n<li>array为固定长度的数组, 其内存分配为连续的, 使用前需确定长度;</li>\n<li>数组为值类型, 赋值操作的新变量是原数组的一份完整拷贝;</li>\n<li>作为函数的传递参数, 实际也是数组的一份拷贝, 效率也就比传递指针低;</li>\n<li>数组长度也是Type一部分, 如[4]int和[2]int类型不一样.</li>\n</ul>","more":"<h4 id=\"2-声明与初始化\"><a href=\"#2-声明与初始化\" class=\"headerlink\" title=\"2)声明与初始化\"></a>2)声明与初始化</h4><figure class=\"highlight golang\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">package</span> main</div><div class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">\"fmt\"</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 只声明, 不作初始化</span></div><div class=\"line\"><span class=\"keyword\">var</span> a1 [<span class=\"number\">3</span>]<span class=\"keyword\">int</span>         <span class=\"comment\">//一维, [0 0 0]</span></div><div class=\"line\"><span class=\"keyword\">var</span> a2 [<span class=\"number\">2</span>][<span class=\"number\">2</span>]<span class=\"keyword\">int</span>      <span class=\"comment\">//二维, [[0,0],[0,0]]</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 声明并初始化</span></div><div class=\"line\"><span class=\"keyword\">var</span> b1 [<span class=\"number\">5</span>]<span class=\"keyword\">int</span> = [<span class=\"number\">5</span>]<span class=\"keyword\">int</span>&#123;<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>,<span class=\"number\">5</span>&#125;</div><div class=\"line\"><span class=\"keyword\">var</span> b2 [<span class=\"number\">4</span>]<span class=\"keyword\">string</span> = [<span class=\"number\">4</span>]<span class=\"keyword\">string</span>&#123;<span class=\"string\">\"Red\"</span>, <span class=\"string\">\"Blue\"</span>, <span class=\"string\">\"Green\"</span>, <span class=\"string\">\"Yellow\"</span>&#125;</div><div class=\"line\"><span class=\"keyword\">var</span> b3 [<span class=\"number\">2</span>][<span class=\"number\">2</span>]<span class=\"keyword\">int</span> = [<span class=\"number\">2</span>][<span class=\"number\">2</span>]<span class=\"keyword\">int</span>&#123;[<span class=\"number\">2</span>]<span class=\"keyword\">int</span>&#123;<span class=\"number\">5</span>,<span class=\"number\">6</span>&#125;, [<span class=\"number\">2</span>]<span class=\"keyword\">int</span>&#123;<span class=\"number\">7</span>,<span class=\"number\">8</span>&#125;&#125;</div><div class=\"line\"><span class=\"comment\">// 不能在顶层进行快速声明和初始化, 需用: var b4 [3]string = ...</span></div><div class=\"line\"><span class=\"comment\">//b4 := [3]string&#123;\"a\", \"b\", \"c\"&#125;</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 几种常用初始化方法(在函数内使用)</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">arrInFunc</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">    a := [<span class=\"number\">3</span>]<span class=\"keyword\">int</span>&#123;<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>&#125;    <span class=\"comment\">// 所有元素赋值</span></div><div class=\"line\">    b := [<span class=\"number\">5</span>]<span class=\"keyword\">int</span>&#123;<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>&#125;    <span class=\"comment\">// 前三个元素赋值，其他默认0</span></div><div class=\"line\">    c := [<span class=\"number\">15</span>]<span class=\"keyword\">int</span>&#123;<span class=\"number\">10</span>:<span class=\"number\">3</span>&#125;    <span class=\"comment\">// 指定第11个元素初始化为3，其他默认0</span></div><div class=\"line\">    d := [...]<span class=\"keyword\">int</span>&#123;<span class=\"number\">4</span>,<span class=\"number\">5</span>,<span class=\"number\">6</span>&#125;  <span class=\"comment\">// 编译器自动推断长度</span></div><div class=\"line\">    e := [...]<span class=\"keyword\">int</span>&#123;<span class=\"number\">0</span>:<span class=\"number\">1</span>, <span class=\"number\">1</span>:<span class=\"number\">2</span>, <span class=\"number\">5</span>:<span class=\"number\">7</span>&#125; <span class=\"comment\">//自动推断长度</span></div><div class=\"line\">    fmt.Printf(<span class=\"string\">\"%v\\n\"</span>, a)</div><div class=\"line\">    fmt.Printf(<span class=\"string\">\"%v\\n\"</span>, b)</div><div class=\"line\">    fmt.Printf(<span class=\"string\">\"%v\\n\"</span>, c)</div><div class=\"line\">    fmt.Printf(<span class=\"string\">\"%v\\n\"</span>, d)</div><div class=\"line\">    fmt.Printf(<span class=\"string\">\"%v\\n\"</span>, e)</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">    arrInFunc()</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>main.go演示效果如下:<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">root@XIAOMO:~/gopro<span class=\"comment\"># ./main</span></div><div class=\"line\">[1 2 3]</div><div class=\"line\">[1 2 3 0 0]</div><div class=\"line\">[0 0 0 0 0 0 0 0 0 0 3 0 0 0 0]</div><div class=\"line\">[4 5 6]</div><div class=\"line\">[1 2 0 0 0 7]</div></pre></td></tr></table></figure></p>\n<h4 id=\"3-元素访问\"><a href=\"#3-元素访问\" class=\"headerlink\" title=\"3)元素访问\"></a>3)元素访问</h4><p>main.go示例<br><figure class=\"highlight golang\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">package</span> main</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">accessElem</span><span class=\"params\">()</span></span> &#123;</div><div class=\"line\">    array := [<span class=\"number\">3</span>]<span class=\"keyword\">int</span>&#123;<span class=\"number\">1</span>, <span class=\"number\">3</span>, <span class=\"number\">9</span>&#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// 通过下标访问</span></div><div class=\"line\">    <span class=\"keyword\">for</span> i:=<span class=\"number\">0</span>; i &lt; <span class=\"built_in\">len</span>(array); i++ &#123;</div><div class=\"line\">        fmt.Println(i, array[i])</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// 迭代方式访问</span></div><div class=\"line\">    <span class=\"keyword\">for</span> i, v := <span class=\"keyword\">range</span> array &#123;</div><div class=\"line\">        fmt.Println(i, v)</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// 使用new创建数组,零值填充, 返回数组指针</span></div><div class=\"line\">    p := <span class=\"built_in\">new</span>([<span class=\"number\">5</span>]<span class=\"keyword\">int</span>)</div><div class=\"line\">    fmt.Println(*p)</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">    accessElem()</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>示例演示效果:<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">root@XIAOMO:~/gopro<span class=\"comment\"># ./main</span></div><div class=\"line\">0 1</div><div class=\"line\">1 3</div><div class=\"line\">2 9</div><div class=\"line\">0 1</div><div class=\"line\">1 3</div><div class=\"line\">2 9</div><div class=\"line\">[0 0 0 0 0]</div></pre></td></tr></table></figure></p>\n<h4 id=\"4-在函数中传递数组\"><a href=\"#4-在函数中传递数组\" class=\"headerlink\" title=\"4)在函数中传递数组\"></a>4)在函数中传递数组</h4><p>和C++类似, 函数参数传递中可以传值或传指针:</p>\n<figure class=\"highlight golang\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 传值, 每次调用foo1, 系统将分配16字节内存在栈上</span></div><div class=\"line\"><span class=\"comment\">// 函数运行结束时, 会弹栈并释放16字节内存</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">foo1</span><span class=\"params\">(arr [16]<span class=\"keyword\">int</span>)</span></span> &#123;</div><div class=\"line\">   <span class=\"comment\">// ...</span></div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"keyword\">var</span> a [<span class=\"number\">16</span>]<span class=\"keyword\">int</span></div><div class=\"line\">foo1(a)</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 传指针, 每次调用foo2, 系统将只分配指针需要的内存空间</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">foo2</span><span class=\"params\">(arr *[16]<span class=\"keyword\">int</span>)</span></span>&#123;</div><div class=\"line\">    <span class=\"comment\">// ...</span></div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"keyword\">var</span> b [<span class=\"number\">16</span>]<span class=\"keyword\">int</span></div><div class=\"line\">foo2(&amp;b)</div></pre></td></tr></table></figure>\n<h3 id=\"slice类型\"><a href=\"#slice类型\" class=\"headerlink\" title=\"slice类型\"></a>slice类型</h3><h4 id=\"1-基础特性-1\"><a href=\"#1-基础特性-1\" class=\"headerlink\" title=\"1)基础特性\"></a>1)基础特性</h4><ul>\n<li>slice是一种动态数组, 可以认为是指向数组的指针; 但其并不只是指针，本身有其数据结构, 该结构包含三个元素:<ul>\n<li>指向原生数组的指针(pointer)</li>\n<li>数组切片的元素个数(len)</li>\n<li>数组切片已分配的空间(cap)</li>\n</ul>\n</li>\n<li>slice作为一个引用类型, 声明是不需要指定长度;</li>\n<li>增长操作通过内建方法append实现, 内部实现自动扩容.</li>\n</ul>\n<h4 id=\"2-创建和初始化\"><a href=\"#2-创建和初始化\" class=\"headerlink\" title=\"2)创建和初始化\"></a>2)创建和初始化</h4><p>main.go<br><figure class=\"highlight golang\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">package</span> main</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">createSlice</span><span class=\"params\">()</span></span> &#123;</div><div class=\"line\">    <span class=\"comment\">// 通过array创建slice, 用法神似python</span></div><div class=\"line\">    arr := [<span class=\"number\">5</span>]<span class=\"keyword\">int</span>&#123;<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>,<span class=\"number\">5</span>&#125;</div><div class=\"line\">    sli1 := arr[:<span class=\"number\">3</span>]  <span class=\"comment\">// 切出前三个元素</span></div><div class=\"line\">    sli2 := arr[:<span class=\"number\">4</span>]  <span class=\"comment\">// 切出前四个元素</span></div><div class=\"line\">    sli1[<span class=\"number\">1</span>] = <span class=\"number\">8</span></div><div class=\"line\">    sli2[<span class=\"number\">1</span>] = <span class=\"number\">9</span></div><div class=\"line\">    <span class=\"comment\">// 将打印 9 9 9, 可见修改的是同一个元素</span></div><div class=\"line\">    <span class=\"built_in\">println</span>(arr[<span class=\"number\">1</span>], sli1[<span class=\"number\">1</span>], sli2[<span class=\"number\">1</span>])</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// 通过make创建slice</span></div><div class=\"line\">    sli3 := <span class=\"built_in\">make</span>([]<span class=\"keyword\">int</span>, <span class=\"number\">3</span>)</div><div class=\"line\">    sli4 := <span class=\"built_in\">make</span>([]<span class=\"keyword\">int</span>, <span class=\"number\">4</span>, <span class=\"number\">8</span>) <span class=\"comment\">//初始4个元素，预留8个元素的空间</span></div><div class=\"line\">    sli5 := []<span class=\"keyword\">int</span>&#123;<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>,<span class=\"number\">5</span>&#125;  <span class=\"comment\">//初始化赋值</span></div><div class=\"line\">    fmt.Printf(<span class=\"string\">\"%v\\n\"</span>, sli3)</div><div class=\"line\">    fmt.Printf(<span class=\"string\">\"%v\\n\"</span>, sli4)</div><div class=\"line\">    fmt.Printf(<span class=\"string\">\"%v\\n\"</span>, sli5)</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">    createSlice()</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<h4 id=\"3-元素访问-1\"><a href=\"#3-元素访问-1\" class=\"headerlink\" title=\"3)元素访问\"></a>3)元素访问</h4><figure class=\"highlight golang\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">package</span> main</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">useSlice</span><span class=\"params\">()</span></span> &#123;</div><div class=\"line\">    slice := []<span class=\"keyword\">int</span>&#123;<span class=\"number\">10</span>, <span class=\"number\">20</span>, <span class=\"number\">30</span>, <span class=\"number\">40</span>, <span class=\"number\">50</span>&#125;</div><div class=\"line\">    <span class=\"keyword\">for</span> index, value := <span class=\"keyword\">range</span> slice &#123;</div><div class=\"line\">        fmt.Printf(<span class=\"string\">\"Index: %d  Value: %d\\n\"</span>, index, value)</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">for</span> i := <span class=\"number\">0</span>; i &lt; <span class=\"built_in\">len</span>(slice); i++ &#123;</div><div class=\"line\">        fmt.Printf(<span class=\"string\">\"Index: %d  Value: %d\\n\"</span>, i, slice[i])</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">    useSlice()</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h4 id=\"4-在函数间传递slice\"><a href=\"#4-在函数间传递slice\" class=\"headerlink\" title=\"4)在函数间传递slice\"></a>4)在函数间传递slice</h4><p>由于slice是指向底层数组的指针, 在函数间传递slice是开销很小的。<br>在64位机器中, slice对象占24个字节, 三个元素分别占8个字节。<br>作为参数在函数中传递的方式和数组类似。</p>\n<h3 id=\"关于new与make的区别探讨\"><a href=\"#关于new与make的区别探讨\" class=\"headerlink\" title=\"关于new与make的区别探讨\"></a>关于new与make的区别探讨</h3><p>主要区别:</p>\n<ul>\n<li>new可以用来创建各种类型对象, 也即是各类型的空间分配;</li>\n<li>make用来处理内建类型(slice, channel, map等)的内存分配.</li>\n</ul>"},{"title":"[golang]channel管道类型","date":"2016-03-04T01:00:11.000Z","_content":"\n在unix系统中, 管道是进程间通信的一种方式。那golang的channel和系统的管道有什么区别？\n\n### 什么是channel\n官方文档有个channel的定义:\n\n\n>    A channel provides a mechanism for concurrently executing functions to communicate\n>    by sending and receiving values of a specified element type.\n>    The value of an uninitialized channel is nil.\n\nchannel应该可以理解为: 一种为并行执行而提供函数间通信的机制, 通过传递send和recieve特定类型的值来实现。没有初始化值的channel对象, 默认为nil。\n<!--more-->\n\n也就是: 在管道的两端, 一个对象可以在一端进行写/读/读写的操作, 另一个对象可以在另一端进行读/写/读写的操作；能否读写, 取决于管道是否是双向的。默认情况下, 管道是双向的。\n\n### channel的基础特性\n- channel是一个作为队列queue的值。 当queue满时, 写操作是阻塞的; 当queue为空时, 读操作是阻塞的\n- 向一个nil channel读数据或写数据, 会造成一直阻塞\n- 向一个close了的channel写数据, 会引起panic\n- 向一个close了的channel读数据, 会立刻获取到一个零值\n\n### 一些用法示例\n#### 1.没有缓冲的channel\n当我们没有为channel指定容量时, 我们称这个channel是没有缓冲的。\n```golang\nfunc test_deadlock() {\n     c := make(chan string)\n     c <- \"test\"    // 写入channel\n     s := <-c       // 读取channel\n     println(s)\n}\n```\n运行效果:\n```bash\nfatal error: all goroutines are asleep - deadlock!\n\ngoroutine 1 [chan send]:\nmain.test_deadlock\n\t/root/gopro/channel.go:10\nmain.main\n\t/root/gopro/channel.go:53\n```\n提示出现了死锁。这是因为处在同一个单线程环境中, 两个goroutine互相等待对方释放资源, 造成双方都无法继续运行下去。Go运行时检测到了死锁并给出了错误报告。指定容量后可解决这个问题:\n```golang\nc := make(chan string, 3)  // 长度为3\n```\n\n#### 2. 使用range来进行读取操作\n- range会在close channel后读取完所有数据并自动结束循环\n- 有/无缓冲的channel在使用range时效果是一样的\n- range方法, 不需要知道channel中消息的准确数目, 使用人性化\n\n使用range示例:\n```golang\nfunc main() {\n     message := make(chan int)\n     count := 3\n\n     go func() {\n          for i := 1; i <= count; i++ {\n               fmt.Printf(\"send %v\\n\", i)\n               message <- i\n          }\n          //完成写入后, 需要关闭channel, 否则主goroutine会因一直等待而死锁\n          close(message)\n     }()\n     time.Sleep(time.Second * 3)\n\n     for msg := range message {\n          fmt.Printf(\"recieve: %v\\n\", msg)\n     }\n}\n```\n运行效果:\n```golang\nroot@XIAOMO:~/gopro# go build channel.go\nroot@XIAOMO:~/gopro# ./channel\nsend 1\n// 此处等待3秒\nrecieve: 1\nsend 2\nsend 3\nrecieve: 2\nrecieve: 3\n```\n\n#### 3. 多channel模式\n在程序中需要用到多个channel时, 我们可以使用select(类似于switch)来实现对channel的支持。\n\n以下示例中方法CreateMsgChannel()创建了一个channel和goroutine, 并向该channel中分三次写入数据; 在main()方法中通过select来读取三个channel中的数据:\n```golang\nfunc CreateMsgChannel(msg string, delay time.Duration) <-chan string {\n     c := make(chan string)\n     go func() {\n          for i := 1; i <= 3; i++ {\n               c <- fmt.Sprintf(\"%s\\tcur_loop:%d\", msg, i)\n               // 模拟处理时间\n               time.Sleep(time.Millisecond * delay)\n          }\n     }()\n     return c\n}\n\nfunc main() {\n    c1 := CreateMsgChannel(\"msg in channel 1\", 500)\n    c2 := CreateMsgChannel(\"msg in channel 2\", 260)\n    c3 := CreateMsgChannel(\"msg in channel 3\", 50)\n\n    for i := 1; i <= 9; i++ {\n        select {\n            case msg := <-c1:\n                println(msg)\n            case msg := <-c2:\n                println(msg)\n            case msg := <-c3:\n                println(msg)\n        }\n    }\n}\n```\n运行效果:\n```golang\nroot@XIAOMO:~/gopro# go build channel.go\nroot@XIAOMO:~/gopro# ./channel\nmsg in channel 1\tcur_loop:1\nmsg in channel 2\tcur_loop:1\nmsg in channel 3\tcur_loop:1\nmsg in channel 3\tcur_loop:2\nmsg in channel 3\tcur_loop:3\nmsg in channel 2\tcur_loop:2\nmsg in channel 1\tcur_loop:2\nmsg in channel 2\tcur_loop:3\nmsg in channel 1\tcur_loop:3\n```\n由结果可见, 每个channel中的消息都能尽快的被读取, 而不会因为一个channel的阻塞而导致了其他channel的消息无法被读取。","source":"_posts/golang/golang_channel.md","raw":"---\ntitle: '[golang]channel管道类型'\ndate: 2016-03-04 09:00:11\ntags: golang\n---\n\n在unix系统中, 管道是进程间通信的一种方式。那golang的channel和系统的管道有什么区别？\n\n### 什么是channel\n官方文档有个channel的定义:\n\n\n>    A channel provides a mechanism for concurrently executing functions to communicate\n>    by sending and receiving values of a specified element type.\n>    The value of an uninitialized channel is nil.\n\nchannel应该可以理解为: 一种为并行执行而提供函数间通信的机制, 通过传递send和recieve特定类型的值来实现。没有初始化值的channel对象, 默认为nil。\n<!--more-->\n\n也就是: 在管道的两端, 一个对象可以在一端进行写/读/读写的操作, 另一个对象可以在另一端进行读/写/读写的操作；能否读写, 取决于管道是否是双向的。默认情况下, 管道是双向的。\n\n### channel的基础特性\n- channel是一个作为队列queue的值。 当queue满时, 写操作是阻塞的; 当queue为空时, 读操作是阻塞的\n- 向一个nil channel读数据或写数据, 会造成一直阻塞\n- 向一个close了的channel写数据, 会引起panic\n- 向一个close了的channel读数据, 会立刻获取到一个零值\n\n### 一些用法示例\n#### 1.没有缓冲的channel\n当我们没有为channel指定容量时, 我们称这个channel是没有缓冲的。\n```golang\nfunc test_deadlock() {\n     c := make(chan string)\n     c <- \"test\"    // 写入channel\n     s := <-c       // 读取channel\n     println(s)\n}\n```\n运行效果:\n```bash\nfatal error: all goroutines are asleep - deadlock!\n\ngoroutine 1 [chan send]:\nmain.test_deadlock\n\t/root/gopro/channel.go:10\nmain.main\n\t/root/gopro/channel.go:53\n```\n提示出现了死锁。这是因为处在同一个单线程环境中, 两个goroutine互相等待对方释放资源, 造成双方都无法继续运行下去。Go运行时检测到了死锁并给出了错误报告。指定容量后可解决这个问题:\n```golang\nc := make(chan string, 3)  // 长度为3\n```\n\n#### 2. 使用range来进行读取操作\n- range会在close channel后读取完所有数据并自动结束循环\n- 有/无缓冲的channel在使用range时效果是一样的\n- range方法, 不需要知道channel中消息的准确数目, 使用人性化\n\n使用range示例:\n```golang\nfunc main() {\n     message := make(chan int)\n     count := 3\n\n     go func() {\n          for i := 1; i <= count; i++ {\n               fmt.Printf(\"send %v\\n\", i)\n               message <- i\n          }\n          //完成写入后, 需要关闭channel, 否则主goroutine会因一直等待而死锁\n          close(message)\n     }()\n     time.Sleep(time.Second * 3)\n\n     for msg := range message {\n          fmt.Printf(\"recieve: %v\\n\", msg)\n     }\n}\n```\n运行效果:\n```golang\nroot@XIAOMO:~/gopro# go build channel.go\nroot@XIAOMO:~/gopro# ./channel\nsend 1\n// 此处等待3秒\nrecieve: 1\nsend 2\nsend 3\nrecieve: 2\nrecieve: 3\n```\n\n#### 3. 多channel模式\n在程序中需要用到多个channel时, 我们可以使用select(类似于switch)来实现对channel的支持。\n\n以下示例中方法CreateMsgChannel()创建了一个channel和goroutine, 并向该channel中分三次写入数据; 在main()方法中通过select来读取三个channel中的数据:\n```golang\nfunc CreateMsgChannel(msg string, delay time.Duration) <-chan string {\n     c := make(chan string)\n     go func() {\n          for i := 1; i <= 3; i++ {\n               c <- fmt.Sprintf(\"%s\\tcur_loop:%d\", msg, i)\n               // 模拟处理时间\n               time.Sleep(time.Millisecond * delay)\n          }\n     }()\n     return c\n}\n\nfunc main() {\n    c1 := CreateMsgChannel(\"msg in channel 1\", 500)\n    c2 := CreateMsgChannel(\"msg in channel 2\", 260)\n    c3 := CreateMsgChannel(\"msg in channel 3\", 50)\n\n    for i := 1; i <= 9; i++ {\n        select {\n            case msg := <-c1:\n                println(msg)\n            case msg := <-c2:\n                println(msg)\n            case msg := <-c3:\n                println(msg)\n        }\n    }\n}\n```\n运行效果:\n```golang\nroot@XIAOMO:~/gopro# go build channel.go\nroot@XIAOMO:~/gopro# ./channel\nmsg in channel 1\tcur_loop:1\nmsg in channel 2\tcur_loop:1\nmsg in channel 3\tcur_loop:1\nmsg in channel 3\tcur_loop:2\nmsg in channel 3\tcur_loop:3\nmsg in channel 2\tcur_loop:2\nmsg in channel 1\tcur_loop:2\nmsg in channel 2\tcur_loop:3\nmsg in channel 1\tcur_loop:3\n```\n由结果可见, 每个channel中的消息都能尽快的被读取, 而不会因为一个channel的阻塞而导致了其他channel的消息无法被读取。","slug":"golang/golang_channel","published":1,"updated":"2017-08-07T05:47:10.146Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj61qjrxr0001dd4da1944wwq","content":"<p>在unix系统中, 管道是进程间通信的一种方式。那golang的channel和系统的管道有什么区别？</p>\n<h3 id=\"什么是channel\"><a href=\"#什么是channel\" class=\"headerlink\" title=\"什么是channel\"></a>什么是channel</h3><p>官方文档有个channel的定义:</p>\n<blockquote>\n<p>   A channel provides a mechanism for concurrently executing functions to communicate<br>   by sending and receiving values of a specified element type.<br>   The value of an uninitialized channel is nil.</p>\n</blockquote>\n<p>channel应该可以理解为: 一种为并行执行而提供函数间通信的机制, 通过传递send和recieve特定类型的值来实现。没有初始化值的channel对象, 默认为nil。<br><a id=\"more\"></a></p>\n<p>也就是: 在管道的两端, 一个对象可以在一端进行写/读/读写的操作, 另一个对象可以在另一端进行读/写/读写的操作；能否读写, 取决于管道是否是双向的。默认情况下, 管道是双向的。</p>\n<h3 id=\"channel的基础特性\"><a href=\"#channel的基础特性\" class=\"headerlink\" title=\"channel的基础特性\"></a>channel的基础特性</h3><ul>\n<li>channel是一个作为队列queue的值。 当queue满时, 写操作是阻塞的; 当queue为空时, 读操作是阻塞的</li>\n<li>向一个nil channel读数据或写数据, 会造成一直阻塞</li>\n<li>向一个close了的channel写数据, 会引起panic</li>\n<li>向一个close了的channel读数据, 会立刻获取到一个零值</li>\n</ul>\n<h3 id=\"一些用法示例\"><a href=\"#一些用法示例\" class=\"headerlink\" title=\"一些用法示例\"></a>一些用法示例</h3><h4 id=\"1-没有缓冲的channel\"><a href=\"#1-没有缓冲的channel\" class=\"headerlink\" title=\"1.没有缓冲的channel\"></a>1.没有缓冲的channel</h4><p>当我们没有为channel指定容量时, 我们称这个channel是没有缓冲的。<br><figure class=\"highlight golang\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">test_deadlock</span><span class=\"params\">()</span></span> &#123;</div><div class=\"line\">     c := <span class=\"built_in\">make</span>(<span class=\"keyword\">chan</span> <span class=\"keyword\">string</span>)</div><div class=\"line\">     c &lt;- <span class=\"string\">\"test\"</span>    <span class=\"comment\">// 写入channel</span></div><div class=\"line\">     s := &lt;-c       <span class=\"comment\">// 读取channel</span></div><div class=\"line\">     <span class=\"built_in\">println</span>(s)</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>运行效果:<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">fatal error: all goroutines are asleep - deadlock!</div><div class=\"line\"></div><div class=\"line\">goroutine 1 [chan send]:</div><div class=\"line\">main.test_deadlock</div><div class=\"line\">\t/root/gopro/channel.go:10</div><div class=\"line\">main.main</div><div class=\"line\">\t/root/gopro/channel.go:53</div></pre></td></tr></table></figure></p>\n<p>提示出现了死锁。这是因为处在同一个单线程环境中, 两个goroutine互相等待对方释放资源, 造成双方都无法继续运行下去。Go运行时检测到了死锁并给出了错误报告。指定容量后可解决这个问题:<br><figure class=\"highlight golang\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">c := <span class=\"built_in\">make</span>(<span class=\"keyword\">chan</span> <span class=\"keyword\">string</span>, <span class=\"number\">3</span>)  <span class=\"comment\">// 长度为3</span></div></pre></td></tr></table></figure></p>\n<h4 id=\"2-使用range来进行读取操作\"><a href=\"#2-使用range来进行读取操作\" class=\"headerlink\" title=\"2. 使用range来进行读取操作\"></a>2. 使用range来进行读取操作</h4><ul>\n<li>range会在close channel后读取完所有数据并自动结束循环</li>\n<li>有/无缓冲的channel在使用range时效果是一样的</li>\n<li>range方法, 不需要知道channel中消息的准确数目, 使用人性化</li>\n</ul>\n<p>使用range示例:<br><figure class=\"highlight golang\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</div><div class=\"line\">     message := <span class=\"built_in\">make</span>(<span class=\"keyword\">chan</span> <span class=\"keyword\">int</span>)</div><div class=\"line\">     count := <span class=\"number\">3</span></div><div class=\"line\"></div><div class=\"line\">     <span class=\"keyword\">go</span> <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">()</span></span> &#123;</div><div class=\"line\">          <span class=\"keyword\">for</span> i := <span class=\"number\">1</span>; i &lt;= count; i++ &#123;</div><div class=\"line\">               fmt.Printf(<span class=\"string\">\"send %v\\n\"</span>, i)</div><div class=\"line\">               message &lt;- i</div><div class=\"line\">          &#125;</div><div class=\"line\">          <span class=\"comment\">//完成写入后, 需要关闭channel, 否则主goroutine会因一直等待而死锁</span></div><div class=\"line\">          <span class=\"built_in\">close</span>(message)</div><div class=\"line\">     &#125;()</div><div class=\"line\">     time.Sleep(time.Second * <span class=\"number\">3</span>)</div><div class=\"line\"></div><div class=\"line\">     <span class=\"keyword\">for</span> msg := <span class=\"keyword\">range</span> message &#123;</div><div class=\"line\">          fmt.Printf(<span class=\"string\">\"recieve: %v\\n\"</span>, msg)</div><div class=\"line\">     &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>运行效果:<br><figure class=\"highlight golang\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">root@XIAOMO:~/gopro# <span class=\"keyword\">go</span> build channel.<span class=\"keyword\">go</span></div><div class=\"line\">root@XIAOMO:~/gopro# ./channel</div><div class=\"line\">send <span class=\"number\">1</span></div><div class=\"line\"><span class=\"comment\">// 此处等待3秒</span></div><div class=\"line\">recieve: <span class=\"number\">1</span></div><div class=\"line\">send <span class=\"number\">2</span></div><div class=\"line\">send <span class=\"number\">3</span></div><div class=\"line\">recieve: <span class=\"number\">2</span></div><div class=\"line\">recieve: <span class=\"number\">3</span></div></pre></td></tr></table></figure></p>\n<h4 id=\"3-多channel模式\"><a href=\"#3-多channel模式\" class=\"headerlink\" title=\"3. 多channel模式\"></a>3. 多channel模式</h4><p>在程序中需要用到多个channel时, 我们可以使用select(类似于switch)来实现对channel的支持。</p>\n<p>以下示例中方法CreateMsgChannel()创建了一个channel和goroutine, 并向该channel中分三次写入数据; 在main()方法中通过select来读取三个channel中的数据:<br><figure class=\"highlight golang\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">CreateMsgChannel</span><span class=\"params\">(msg <span class=\"keyword\">string</span>, delay time.Duration)</span> &lt;-<span class=\"title\">chan</span> <span class=\"title\">string</span></span> &#123;</div><div class=\"line\">     c := <span class=\"built_in\">make</span>(<span class=\"keyword\">chan</span> <span class=\"keyword\">string</span>)</div><div class=\"line\">     <span class=\"keyword\">go</span> <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">()</span></span> &#123;</div><div class=\"line\">          <span class=\"keyword\">for</span> i := <span class=\"number\">1</span>; i &lt;= <span class=\"number\">3</span>; i++ &#123;</div><div class=\"line\">               c &lt;- fmt.Sprintf(<span class=\"string\">\"%s\\tcur_loop:%d\"</span>, msg, i)</div><div class=\"line\">               <span class=\"comment\">// 模拟处理时间</span></div><div class=\"line\">               time.Sleep(time.Millisecond * delay)</div><div class=\"line\">          &#125;</div><div class=\"line\">     &#125;()</div><div class=\"line\">     <span class=\"keyword\">return</span> c</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</div><div class=\"line\">    c1 := CreateMsgChannel(<span class=\"string\">\"msg in channel 1\"</span>, <span class=\"number\">500</span>)</div><div class=\"line\">    c2 := CreateMsgChannel(<span class=\"string\">\"msg in channel 2\"</span>, <span class=\"number\">260</span>)</div><div class=\"line\">    c3 := CreateMsgChannel(<span class=\"string\">\"msg in channel 3\"</span>, <span class=\"number\">50</span>)</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">for</span> i := <span class=\"number\">1</span>; i &lt;= <span class=\"number\">9</span>; i++ &#123;</div><div class=\"line\">        <span class=\"keyword\">select</span> &#123;</div><div class=\"line\">            <span class=\"keyword\">case</span> msg := &lt;-c1:</div><div class=\"line\">                <span class=\"built_in\">println</span>(msg)</div><div class=\"line\">            <span class=\"keyword\">case</span> msg := &lt;-c2:</div><div class=\"line\">                <span class=\"built_in\">println</span>(msg)</div><div class=\"line\">            <span class=\"keyword\">case</span> msg := &lt;-c3:</div><div class=\"line\">                <span class=\"built_in\">println</span>(msg)</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>运行效果:<br><figure class=\"highlight golang\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">root@XIAOMO:~/gopro# <span class=\"keyword\">go</span> build channel.<span class=\"keyword\">go</span></div><div class=\"line\">root@XIAOMO:~/gopro# ./channel</div><div class=\"line\">msg in channel <span class=\"number\">1</span>\tcur_loop:<span class=\"number\">1</span></div><div class=\"line\">msg in channel <span class=\"number\">2</span>\tcur_loop:<span class=\"number\">1</span></div><div class=\"line\">msg in channel <span class=\"number\">3</span>\tcur_loop:<span class=\"number\">1</span></div><div class=\"line\">msg in channel <span class=\"number\">3</span>\tcur_loop:<span class=\"number\">2</span></div><div class=\"line\">msg in channel <span class=\"number\">3</span>\tcur_loop:<span class=\"number\">3</span></div><div class=\"line\">msg in channel <span class=\"number\">2</span>\tcur_loop:<span class=\"number\">2</span></div><div class=\"line\">msg in channel <span class=\"number\">1</span>\tcur_loop:<span class=\"number\">2</span></div><div class=\"line\">msg in channel <span class=\"number\">2</span>\tcur_loop:<span class=\"number\">3</span></div><div class=\"line\">msg in channel <span class=\"number\">1</span>\tcur_loop:<span class=\"number\">3</span></div></pre></td></tr></table></figure></p>\n<p>由结果可见, 每个channel中的消息都能尽快的被读取, 而不会因为一个channel的阻塞而导致了其他channel的消息无法被读取。</p>\n","site":{"data":{}},"excerpt":"<p>在unix系统中, 管道是进程间通信的一种方式。那golang的channel和系统的管道有什么区别？</p>\n<h3 id=\"什么是channel\"><a href=\"#什么是channel\" class=\"headerlink\" title=\"什么是channel\"></a>什么是channel</h3><p>官方文档有个channel的定义:</p>\n<blockquote>\n<p>   A channel provides a mechanism for concurrently executing functions to communicate<br>   by sending and receiving values of a specified element type.<br>   The value of an uninitialized channel is nil.</p>\n</blockquote>\n<p>channel应该可以理解为: 一种为并行执行而提供函数间通信的机制, 通过传递send和recieve特定类型的值来实现。没有初始化值的channel对象, 默认为nil。<br>","more":"</p>\n<p>也就是: 在管道的两端, 一个对象可以在一端进行写/读/读写的操作, 另一个对象可以在另一端进行读/写/读写的操作；能否读写, 取决于管道是否是双向的。默认情况下, 管道是双向的。</p>\n<h3 id=\"channel的基础特性\"><a href=\"#channel的基础特性\" class=\"headerlink\" title=\"channel的基础特性\"></a>channel的基础特性</h3><ul>\n<li>channel是一个作为队列queue的值。 当queue满时, 写操作是阻塞的; 当queue为空时, 读操作是阻塞的</li>\n<li>向一个nil channel读数据或写数据, 会造成一直阻塞</li>\n<li>向一个close了的channel写数据, 会引起panic</li>\n<li>向一个close了的channel读数据, 会立刻获取到一个零值</li>\n</ul>\n<h3 id=\"一些用法示例\"><a href=\"#一些用法示例\" class=\"headerlink\" title=\"一些用法示例\"></a>一些用法示例</h3><h4 id=\"1-没有缓冲的channel\"><a href=\"#1-没有缓冲的channel\" class=\"headerlink\" title=\"1.没有缓冲的channel\"></a>1.没有缓冲的channel</h4><p>当我们没有为channel指定容量时, 我们称这个channel是没有缓冲的。<br><figure class=\"highlight golang\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">test_deadlock</span><span class=\"params\">()</span></span> &#123;</div><div class=\"line\">     c := <span class=\"built_in\">make</span>(<span class=\"keyword\">chan</span> <span class=\"keyword\">string</span>)</div><div class=\"line\">     c &lt;- <span class=\"string\">\"test\"</span>    <span class=\"comment\">// 写入channel</span></div><div class=\"line\">     s := &lt;-c       <span class=\"comment\">// 读取channel</span></div><div class=\"line\">     <span class=\"built_in\">println</span>(s)</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>运行效果:<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">fatal error: all goroutines are asleep - deadlock!</div><div class=\"line\"></div><div class=\"line\">goroutine 1 [chan send]:</div><div class=\"line\">main.test_deadlock</div><div class=\"line\">\t/root/gopro/channel.go:10</div><div class=\"line\">main.main</div><div class=\"line\">\t/root/gopro/channel.go:53</div></pre></td></tr></table></figure></p>\n<p>提示出现了死锁。这是因为处在同一个单线程环境中, 两个goroutine互相等待对方释放资源, 造成双方都无法继续运行下去。Go运行时检测到了死锁并给出了错误报告。指定容量后可解决这个问题:<br><figure class=\"highlight golang\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">c := <span class=\"built_in\">make</span>(<span class=\"keyword\">chan</span> <span class=\"keyword\">string</span>, <span class=\"number\">3</span>)  <span class=\"comment\">// 长度为3</span></div></pre></td></tr></table></figure></p>\n<h4 id=\"2-使用range来进行读取操作\"><a href=\"#2-使用range来进行读取操作\" class=\"headerlink\" title=\"2. 使用range来进行读取操作\"></a>2. 使用range来进行读取操作</h4><ul>\n<li>range会在close channel后读取完所有数据并自动结束循环</li>\n<li>有/无缓冲的channel在使用range时效果是一样的</li>\n<li>range方法, 不需要知道channel中消息的准确数目, 使用人性化</li>\n</ul>\n<p>使用range示例:<br><figure class=\"highlight golang\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</div><div class=\"line\">     message := <span class=\"built_in\">make</span>(<span class=\"keyword\">chan</span> <span class=\"keyword\">int</span>)</div><div class=\"line\">     count := <span class=\"number\">3</span></div><div class=\"line\"></div><div class=\"line\">     <span class=\"keyword\">go</span> <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">()</span></span> &#123;</div><div class=\"line\">          <span class=\"keyword\">for</span> i := <span class=\"number\">1</span>; i &lt;= count; i++ &#123;</div><div class=\"line\">               fmt.Printf(<span class=\"string\">\"send %v\\n\"</span>, i)</div><div class=\"line\">               message &lt;- i</div><div class=\"line\">          &#125;</div><div class=\"line\">          <span class=\"comment\">//完成写入后, 需要关闭channel, 否则主goroutine会因一直等待而死锁</span></div><div class=\"line\">          <span class=\"built_in\">close</span>(message)</div><div class=\"line\">     &#125;()</div><div class=\"line\">     time.Sleep(time.Second * <span class=\"number\">3</span>)</div><div class=\"line\"></div><div class=\"line\">     <span class=\"keyword\">for</span> msg := <span class=\"keyword\">range</span> message &#123;</div><div class=\"line\">          fmt.Printf(<span class=\"string\">\"recieve: %v\\n\"</span>, msg)</div><div class=\"line\">     &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>运行效果:<br><figure class=\"highlight golang\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">root@XIAOMO:~/gopro# <span class=\"keyword\">go</span> build channel.<span class=\"keyword\">go</span></div><div class=\"line\">root@XIAOMO:~/gopro# ./channel</div><div class=\"line\">send <span class=\"number\">1</span></div><div class=\"line\"><span class=\"comment\">// 此处等待3秒</span></div><div class=\"line\">recieve: <span class=\"number\">1</span></div><div class=\"line\">send <span class=\"number\">2</span></div><div class=\"line\">send <span class=\"number\">3</span></div><div class=\"line\">recieve: <span class=\"number\">2</span></div><div class=\"line\">recieve: <span class=\"number\">3</span></div></pre></td></tr></table></figure></p>\n<h4 id=\"3-多channel模式\"><a href=\"#3-多channel模式\" class=\"headerlink\" title=\"3. 多channel模式\"></a>3. 多channel模式</h4><p>在程序中需要用到多个channel时, 我们可以使用select(类似于switch)来实现对channel的支持。</p>\n<p>以下示例中方法CreateMsgChannel()创建了一个channel和goroutine, 并向该channel中分三次写入数据; 在main()方法中通过select来读取三个channel中的数据:<br><figure class=\"highlight golang\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">CreateMsgChannel</span><span class=\"params\">(msg <span class=\"keyword\">string</span>, delay time.Duration)</span> &lt;-<span class=\"title\">chan</span> <span class=\"title\">string</span></span> &#123;</div><div class=\"line\">     c := <span class=\"built_in\">make</span>(<span class=\"keyword\">chan</span> <span class=\"keyword\">string</span>)</div><div class=\"line\">     <span class=\"keyword\">go</span> <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">()</span></span> &#123;</div><div class=\"line\">          <span class=\"keyword\">for</span> i := <span class=\"number\">1</span>; i &lt;= <span class=\"number\">3</span>; i++ &#123;</div><div class=\"line\">               c &lt;- fmt.Sprintf(<span class=\"string\">\"%s\\tcur_loop:%d\"</span>, msg, i)</div><div class=\"line\">               <span class=\"comment\">// 模拟处理时间</span></div><div class=\"line\">               time.Sleep(time.Millisecond * delay)</div><div class=\"line\">          &#125;</div><div class=\"line\">     &#125;()</div><div class=\"line\">     <span class=\"keyword\">return</span> c</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</div><div class=\"line\">    c1 := CreateMsgChannel(<span class=\"string\">\"msg in channel 1\"</span>, <span class=\"number\">500</span>)</div><div class=\"line\">    c2 := CreateMsgChannel(<span class=\"string\">\"msg in channel 2\"</span>, <span class=\"number\">260</span>)</div><div class=\"line\">    c3 := CreateMsgChannel(<span class=\"string\">\"msg in channel 3\"</span>, <span class=\"number\">50</span>)</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">for</span> i := <span class=\"number\">1</span>; i &lt;= <span class=\"number\">9</span>; i++ &#123;</div><div class=\"line\">        <span class=\"keyword\">select</span> &#123;</div><div class=\"line\">            <span class=\"keyword\">case</span> msg := &lt;-c1:</div><div class=\"line\">                <span class=\"built_in\">println</span>(msg)</div><div class=\"line\">            <span class=\"keyword\">case</span> msg := &lt;-c2:</div><div class=\"line\">                <span class=\"built_in\">println</span>(msg)</div><div class=\"line\">            <span class=\"keyword\">case</span> msg := &lt;-c3:</div><div class=\"line\">                <span class=\"built_in\">println</span>(msg)</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>运行效果:<br><figure class=\"highlight golang\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">root@XIAOMO:~/gopro# <span class=\"keyword\">go</span> build channel.<span class=\"keyword\">go</span></div><div class=\"line\">root@XIAOMO:~/gopro# ./channel</div><div class=\"line\">msg in channel <span class=\"number\">1</span>\tcur_loop:<span class=\"number\">1</span></div><div class=\"line\">msg in channel <span class=\"number\">2</span>\tcur_loop:<span class=\"number\">1</span></div><div class=\"line\">msg in channel <span class=\"number\">3</span>\tcur_loop:<span class=\"number\">1</span></div><div class=\"line\">msg in channel <span class=\"number\">3</span>\tcur_loop:<span class=\"number\">2</span></div><div class=\"line\">msg in channel <span class=\"number\">3</span>\tcur_loop:<span class=\"number\">3</span></div><div class=\"line\">msg in channel <span class=\"number\">2</span>\tcur_loop:<span class=\"number\">2</span></div><div class=\"line\">msg in channel <span class=\"number\">1</span>\tcur_loop:<span class=\"number\">2</span></div><div class=\"line\">msg in channel <span class=\"number\">2</span>\tcur_loop:<span class=\"number\">3</span></div><div class=\"line\">msg in channel <span class=\"number\">1</span>\tcur_loop:<span class=\"number\">3</span></div></pre></td></tr></table></figure></p>\n<p>由结果可见, 每个channel中的消息都能尽快的被读取, 而不会因为一个channel的阻塞而导致了其他channel的消息无法被读取。</p>"},{"title":"[golang]function","date":"2016-02-07T02:07:46.000Z","_content":"\n### 基本用法\ngolang函数是不支持嵌套(但是可以使用匿名函数实现嵌套)、默认参数、重载, 但支持:\n- 不定长度的变参\n- 多返回值(类似python的返回元组?)\n- 显式命名返回值参数\n- 匿名函数\n- 函数闭包\n\n<!--more-->\n\n以下是一些基本用法示例:\n```golang\n// 一般用法, 无返回值\nfunc funcName1(input1 type1){\n    //do something\n}\n\n// 多参数, 一个返回值\nfunc funcName2(input1 type1, input2 type2) (output1 type1) {\n    //do something\n    return value1\n}\n\n// 多参数, 多返回值\nfunc funcName3(input1 type1, input2 type2) (output1 type1, output2 type2) {\n    //do something\n    return value1, value2\n}\n\n// 传入参数同类型\nfunc funcName4(i, j int) int {\n    return i*j\n}\n\n// 命名返回参数\nfunc funcName5(a, b int) (x, y int) {\n    x = a+b\n    y = a*b\n    return          // 返回 x, y\n    // return x, y  // 返回的结果和函数头声明一样: x,y,  可以不写\n    // return y, x  // 返回的结果就是y,x 而不是x, y\n}\n\n```\n### 参数传递\n#### 1.传递可变参数\n- 可变参数实际为一个slice, 必须作为一个形参放在最后的位置.\n- python中变参可用**dict方式传递; golang中需要用 ... 来展开, 否则会被当做一个参数传递\n\n```golang\npackage main\n\nimport (\n    \"fmt\"\n)\n\nfunc testListArg(x int, args ...string) {\n    str := \"\"\n    for _, s := range args {\n        str += s\n    }\n    fmt.Printf(\"%v %v\\n\", x, str)\n}\n\nfunc main() {\n    a := []string{\"a\", \"d\", \"v\", \"m\"}\n    testListArg(5, a...)\n    testListArg(6, a[:3]...)\n}\n\n```\n演示效果:\n```bash\nroot@XIAOMO:~/gopro# go build main.go\nroot@XIAOMO:~/gopro# ./main\n5 advm\n6 adv\n```\n#### 2.传递指针类型\n- string, slice, map的传递实际为指针方式传递, 无需取值后显式传递指针\n- C/C++指针通过 -> 来获取指针对象成员, golang则通过 . 来实现操作。\n\n```golang\npackage main\n\nimport (\n    \"fmt\"\n)\n\nfunc testPointer(user *User) {\n    fmt.Printf(\"name: %v, id: %v\\n\", (*user).name, (*user).id)\n}\n\nfunc main() {\n    user := User{name:\"xiaomo\",id:1}\n    testPointer(&user)\n}\n```\n#### 3.匿名函数与闭包\n匿名方法经常和闭包配套使用\n```golang\npackage main\n\nimport (\n    \"fmt\"\n)\n\n// 匿名方法\nvar f1 = func(a,b int) int {\n    return (a+b)*2\n}\n\n// 匿名方法与闭包\nfunc f2(name string) {\n    f_inner := func (x,y int) int {\n        return x+y\n    }\n    sum := f_inner(7, 8)\n    fmt.Printf(\"name:%v sum:%v\\n\", name, sum)\n\n    // 匿名函数访问外部方法局部变量\n    extra := 15\n    f_inner2 := func(x,y int) int {\n        return x+y+extra\n    }\n    sum2 := f_inner2(9, 10)\n    fmt.Printf(\"name:%v sum2:%v\\n\", name, sum2)\n}\n\nfunc main() {\n    res := f1(3,4)\n    fmt.Printf(\"%v\\n\", res)\n\n    f2(\"xiaomo\")\n}\n```\n演示效果:\n```golang\nroot@XIAOMO:~/gopro# go build main.go\nroot@XIAOMO:~/gopro# ./main\n14\nname:xiaomo sum:15\nname:xiaomo sum2:34\n\n```","source":"_posts/golang/golang_function.md","raw":"---\ntitle: '[golang]function'\ndate: 2016-02-07 10:07:46\ntags: golang\n---\n\n### 基本用法\ngolang函数是不支持嵌套(但是可以使用匿名函数实现嵌套)、默认参数、重载, 但支持:\n- 不定长度的变参\n- 多返回值(类似python的返回元组?)\n- 显式命名返回值参数\n- 匿名函数\n- 函数闭包\n\n<!--more-->\n\n以下是一些基本用法示例:\n```golang\n// 一般用法, 无返回值\nfunc funcName1(input1 type1){\n    //do something\n}\n\n// 多参数, 一个返回值\nfunc funcName2(input1 type1, input2 type2) (output1 type1) {\n    //do something\n    return value1\n}\n\n// 多参数, 多返回值\nfunc funcName3(input1 type1, input2 type2) (output1 type1, output2 type2) {\n    //do something\n    return value1, value2\n}\n\n// 传入参数同类型\nfunc funcName4(i, j int) int {\n    return i*j\n}\n\n// 命名返回参数\nfunc funcName5(a, b int) (x, y int) {\n    x = a+b\n    y = a*b\n    return          // 返回 x, y\n    // return x, y  // 返回的结果和函数头声明一样: x,y,  可以不写\n    // return y, x  // 返回的结果就是y,x 而不是x, y\n}\n\n```\n### 参数传递\n#### 1.传递可变参数\n- 可变参数实际为一个slice, 必须作为一个形参放在最后的位置.\n- python中变参可用**dict方式传递; golang中需要用 ... 来展开, 否则会被当做一个参数传递\n\n```golang\npackage main\n\nimport (\n    \"fmt\"\n)\n\nfunc testListArg(x int, args ...string) {\n    str := \"\"\n    for _, s := range args {\n        str += s\n    }\n    fmt.Printf(\"%v %v\\n\", x, str)\n}\n\nfunc main() {\n    a := []string{\"a\", \"d\", \"v\", \"m\"}\n    testListArg(5, a...)\n    testListArg(6, a[:3]...)\n}\n\n```\n演示效果:\n```bash\nroot@XIAOMO:~/gopro# go build main.go\nroot@XIAOMO:~/gopro# ./main\n5 advm\n6 adv\n```\n#### 2.传递指针类型\n- string, slice, map的传递实际为指针方式传递, 无需取值后显式传递指针\n- C/C++指针通过 -> 来获取指针对象成员, golang则通过 . 来实现操作。\n\n```golang\npackage main\n\nimport (\n    \"fmt\"\n)\n\nfunc testPointer(user *User) {\n    fmt.Printf(\"name: %v, id: %v\\n\", (*user).name, (*user).id)\n}\n\nfunc main() {\n    user := User{name:\"xiaomo\",id:1}\n    testPointer(&user)\n}\n```\n#### 3.匿名函数与闭包\n匿名方法经常和闭包配套使用\n```golang\npackage main\n\nimport (\n    \"fmt\"\n)\n\n// 匿名方法\nvar f1 = func(a,b int) int {\n    return (a+b)*2\n}\n\n// 匿名方法与闭包\nfunc f2(name string) {\n    f_inner := func (x,y int) int {\n        return x+y\n    }\n    sum := f_inner(7, 8)\n    fmt.Printf(\"name:%v sum:%v\\n\", name, sum)\n\n    // 匿名函数访问外部方法局部变量\n    extra := 15\n    f_inner2 := func(x,y int) int {\n        return x+y+extra\n    }\n    sum2 := f_inner2(9, 10)\n    fmt.Printf(\"name:%v sum2:%v\\n\", name, sum2)\n}\n\nfunc main() {\n    res := f1(3,4)\n    fmt.Printf(\"%v\\n\", res)\n\n    f2(\"xiaomo\")\n}\n```\n演示效果:\n```golang\nroot@XIAOMO:~/gopro# go build main.go\nroot@XIAOMO:~/gopro# ./main\n14\nname:xiaomo sum:15\nname:xiaomo sum2:34\n\n```","slug":"golang/golang_function","published":1,"updated":"2017-08-07T05:47:10.146Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj61qjrxv0003dd4d6zsadb4o","content":"<h3 id=\"基本用法\"><a href=\"#基本用法\" class=\"headerlink\" title=\"基本用法\"></a>基本用法</h3><p>golang函数是不支持嵌套(但是可以使用匿名函数实现嵌套)、默认参数、重载, 但支持:</p>\n<ul>\n<li>不定长度的变参</li>\n<li>多返回值(类似python的返回元组?)</li>\n<li>显式命名返回值参数</li>\n<li>匿名函数</li>\n<li>函数闭包</li>\n</ul>\n<a id=\"more\"></a>\n<p>以下是一些基本用法示例:<br><figure class=\"highlight golang\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 一般用法, 无返回值</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">funcName1</span><span class=\"params\">(input1 type1)</span></span>&#123;</div><div class=\"line\">    <span class=\"comment\">//do something</span></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 多参数, 一个返回值</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">funcName2</span><span class=\"params\">(input1 type1, input2 type2)</span> <span class=\"params\">(output1 type1)</span></span> &#123;</div><div class=\"line\">    <span class=\"comment\">//do something</span></div><div class=\"line\">    <span class=\"keyword\">return</span> value1</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 多参数, 多返回值</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">funcName3</span><span class=\"params\">(input1 type1, input2 type2)</span> <span class=\"params\">(output1 type1, output2 type2)</span></span> &#123;</div><div class=\"line\">    <span class=\"comment\">//do something</span></div><div class=\"line\">    <span class=\"keyword\">return</span> value1, value2</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 传入参数同类型</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">funcName4</span><span class=\"params\">(i, j <span class=\"keyword\">int</span>)</span> <span class=\"title\">int</span></span> &#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> i*j</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 命名返回参数</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">funcName5</span><span class=\"params\">(a, b <span class=\"keyword\">int</span>)</span> <span class=\"params\">(x, y <span class=\"keyword\">int</span>)</span></span> &#123;</div><div class=\"line\">    x = a+b</div><div class=\"line\">    y = a*b</div><div class=\"line\">    <span class=\"keyword\">return</span>          <span class=\"comment\">// 返回 x, y</span></div><div class=\"line\">    <span class=\"comment\">// return x, y  // 返回的结果和函数头声明一样: x,y,  可以不写</span></div><div class=\"line\">    <span class=\"comment\">// return y, x  // 返回的结果就是y,x 而不是x, y</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<h3 id=\"参数传递\"><a href=\"#参数传递\" class=\"headerlink\" title=\"参数传递\"></a>参数传递</h3><h4 id=\"1-传递可变参数\"><a href=\"#1-传递可变参数\" class=\"headerlink\" title=\"1.传递可变参数\"></a>1.传递可变参数</h4><ul>\n<li>可变参数实际为一个slice, 必须作为一个形参放在最后的位置.</li>\n<li>python中变参可用**dict方式传递; golang中需要用 … 来展开, 否则会被当做一个参数传递</li>\n</ul>\n<figure class=\"highlight golang\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">package</span> main</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">import</span> (</div><div class=\"line\">    <span class=\"string\">\"fmt\"</span></div><div class=\"line\">)</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">testListArg</span><span class=\"params\">(x <span class=\"keyword\">int</span>, args ...<span class=\"keyword\">string</span>)</span></span> &#123;</div><div class=\"line\">    str := <span class=\"string\">\"\"</span></div><div class=\"line\">    <span class=\"keyword\">for</span> _, s := <span class=\"keyword\">range</span> args &#123;</div><div class=\"line\">        str += s</div><div class=\"line\">    &#125;</div><div class=\"line\">    fmt.Printf(<span class=\"string\">\"%v %v\\n\"</span>, x, str)</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</div><div class=\"line\">    a := []<span class=\"keyword\">string</span>&#123;<span class=\"string\">\"a\"</span>, <span class=\"string\">\"d\"</span>, <span class=\"string\">\"v\"</span>, <span class=\"string\">\"m\"</span>&#125;</div><div class=\"line\">    testListArg(<span class=\"number\">5</span>, a...)</div><div class=\"line\">    testListArg(<span class=\"number\">6</span>, a[:<span class=\"number\">3</span>]...)</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>演示效果:<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">root@XIAOMO:~/gopro<span class=\"comment\"># go build main.go</span></div><div class=\"line\">root@XIAOMO:~/gopro<span class=\"comment\"># ./main</span></div><div class=\"line\">5 advm</div><div class=\"line\">6 adv</div></pre></td></tr></table></figure></p>\n<h4 id=\"2-传递指针类型\"><a href=\"#2-传递指针类型\" class=\"headerlink\" title=\"2.传递指针类型\"></a>2.传递指针类型</h4><ul>\n<li>string, slice, map的传递实际为指针方式传递, 无需取值后显式传递指针</li>\n<li>C/C++指针通过 -&gt; 来获取指针对象成员, golang则通过 . 来实现操作。</li>\n</ul>\n<figure class=\"highlight golang\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">package</span> main</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">import</span> (</div><div class=\"line\">    <span class=\"string\">\"fmt\"</span></div><div class=\"line\">)</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">testPointer</span><span class=\"params\">(user *User)</span></span> &#123;</div><div class=\"line\">    fmt.Printf(<span class=\"string\">\"name: %v, id: %v\\n\"</span>, (*user).name, (*user).id)</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</div><div class=\"line\">    user := User&#123;name:<span class=\"string\">\"xiaomo\"</span>,id:<span class=\"number\">1</span>&#125;</div><div class=\"line\">    testPointer(&amp;user)</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h4 id=\"3-匿名函数与闭包\"><a href=\"#3-匿名函数与闭包\" class=\"headerlink\" title=\"3.匿名函数与闭包\"></a>3.匿名函数与闭包</h4><p>匿名方法经常和闭包配套使用<br><figure class=\"highlight golang\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">package</span> main</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">import</span> (</div><div class=\"line\">    <span class=\"string\">\"fmt\"</span></div><div class=\"line\">)</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 匿名方法</span></div><div class=\"line\"><span class=\"keyword\">var</span> f1 = <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">(a,b <span class=\"keyword\">int</span>)</span> <span class=\"title\">int</span></span> &#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> (a+b)*<span class=\"number\">2</span></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 匿名方法与闭包</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">f2</span><span class=\"params\">(name <span class=\"keyword\">string</span>)</span></span> &#123;</div><div class=\"line\">    f_inner := <span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(x,y <span class=\"keyword\">int</span>)</span> <span class=\"title\">int</span></span> &#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> x+y</div><div class=\"line\">    &#125;</div><div class=\"line\">    sum := f_inner(<span class=\"number\">7</span>, <span class=\"number\">8</span>)</div><div class=\"line\">    fmt.Printf(<span class=\"string\">\"name:%v sum:%v\\n\"</span>, name, sum)</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// 匿名函数访问外部方法局部变量</span></div><div class=\"line\">    extra := <span class=\"number\">15</span></div><div class=\"line\">    f_inner2 := <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">(x,y <span class=\"keyword\">int</span>)</span> <span class=\"title\">int</span></span> &#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> x+y+extra</div><div class=\"line\">    &#125;</div><div class=\"line\">    sum2 := f_inner2(<span class=\"number\">9</span>, <span class=\"number\">10</span>)</div><div class=\"line\">    fmt.Printf(<span class=\"string\">\"name:%v sum2:%v\\n\"</span>, name, sum2)</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</div><div class=\"line\">    res := f1(<span class=\"number\">3</span>,<span class=\"number\">4</span>)</div><div class=\"line\">    fmt.Printf(<span class=\"string\">\"%v\\n\"</span>, res)</div><div class=\"line\"></div><div class=\"line\">    f2(<span class=\"string\">\"xiaomo\"</span>)</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>演示效果:<br><figure class=\"highlight golang\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">root@XIAOMO:~/gopro# <span class=\"keyword\">go</span> build main.<span class=\"keyword\">go</span></div><div class=\"line\">root@XIAOMO:~/gopro# ./main</div><div class=\"line\"><span class=\"number\">14</span></div><div class=\"line\">name:xiaomo sum:<span class=\"number\">15</span></div><div class=\"line\">name:xiaomo sum2:<span class=\"number\">34</span></div></pre></td></tr></table></figure></p>\n","site":{"data":{}},"excerpt":"<h3 id=\"基本用法\"><a href=\"#基本用法\" class=\"headerlink\" title=\"基本用法\"></a>基本用法</h3><p>golang函数是不支持嵌套(但是可以使用匿名函数实现嵌套)、默认参数、重载, 但支持:</p>\n<ul>\n<li>不定长度的变参</li>\n<li>多返回值(类似python的返回元组?)</li>\n<li>显式命名返回值参数</li>\n<li>匿名函数</li>\n<li>函数闭包</li>\n</ul>","more":"<p>以下是一些基本用法示例:<br><figure class=\"highlight golang\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 一般用法, 无返回值</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">funcName1</span><span class=\"params\">(input1 type1)</span></span>&#123;</div><div class=\"line\">    <span class=\"comment\">//do something</span></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 多参数, 一个返回值</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">funcName2</span><span class=\"params\">(input1 type1, input2 type2)</span> <span class=\"params\">(output1 type1)</span></span> &#123;</div><div class=\"line\">    <span class=\"comment\">//do something</span></div><div class=\"line\">    <span class=\"keyword\">return</span> value1</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 多参数, 多返回值</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">funcName3</span><span class=\"params\">(input1 type1, input2 type2)</span> <span class=\"params\">(output1 type1, output2 type2)</span></span> &#123;</div><div class=\"line\">    <span class=\"comment\">//do something</span></div><div class=\"line\">    <span class=\"keyword\">return</span> value1, value2</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 传入参数同类型</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">funcName4</span><span class=\"params\">(i, j <span class=\"keyword\">int</span>)</span> <span class=\"title\">int</span></span> &#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> i*j</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 命名返回参数</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">funcName5</span><span class=\"params\">(a, b <span class=\"keyword\">int</span>)</span> <span class=\"params\">(x, y <span class=\"keyword\">int</span>)</span></span> &#123;</div><div class=\"line\">    x = a+b</div><div class=\"line\">    y = a*b</div><div class=\"line\">    <span class=\"keyword\">return</span>          <span class=\"comment\">// 返回 x, y</span></div><div class=\"line\">    <span class=\"comment\">// return x, y  // 返回的结果和函数头声明一样: x,y,  可以不写</span></div><div class=\"line\">    <span class=\"comment\">// return y, x  // 返回的结果就是y,x 而不是x, y</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<h3 id=\"参数传递\"><a href=\"#参数传递\" class=\"headerlink\" title=\"参数传递\"></a>参数传递</h3><h4 id=\"1-传递可变参数\"><a href=\"#1-传递可变参数\" class=\"headerlink\" title=\"1.传递可变参数\"></a>1.传递可变参数</h4><ul>\n<li>可变参数实际为一个slice, 必须作为一个形参放在最后的位置.</li>\n<li>python中变参可用**dict方式传递; golang中需要用 … 来展开, 否则会被当做一个参数传递</li>\n</ul>\n<figure class=\"highlight golang\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">package</span> main</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">import</span> (</div><div class=\"line\">    <span class=\"string\">\"fmt\"</span></div><div class=\"line\">)</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">testListArg</span><span class=\"params\">(x <span class=\"keyword\">int</span>, args ...<span class=\"keyword\">string</span>)</span></span> &#123;</div><div class=\"line\">    str := <span class=\"string\">\"\"</span></div><div class=\"line\">    <span class=\"keyword\">for</span> _, s := <span class=\"keyword\">range</span> args &#123;</div><div class=\"line\">        str += s</div><div class=\"line\">    &#125;</div><div class=\"line\">    fmt.Printf(<span class=\"string\">\"%v %v\\n\"</span>, x, str)</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</div><div class=\"line\">    a := []<span class=\"keyword\">string</span>&#123;<span class=\"string\">\"a\"</span>, <span class=\"string\">\"d\"</span>, <span class=\"string\">\"v\"</span>, <span class=\"string\">\"m\"</span>&#125;</div><div class=\"line\">    testListArg(<span class=\"number\">5</span>, a...)</div><div class=\"line\">    testListArg(<span class=\"number\">6</span>, a[:<span class=\"number\">3</span>]...)</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>演示效果:<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">root@XIAOMO:~/gopro<span class=\"comment\"># go build main.go</span></div><div class=\"line\">root@XIAOMO:~/gopro<span class=\"comment\"># ./main</span></div><div class=\"line\">5 advm</div><div class=\"line\">6 adv</div></pre></td></tr></table></figure></p>\n<h4 id=\"2-传递指针类型\"><a href=\"#2-传递指针类型\" class=\"headerlink\" title=\"2.传递指针类型\"></a>2.传递指针类型</h4><ul>\n<li>string, slice, map的传递实际为指针方式传递, 无需取值后显式传递指针</li>\n<li>C/C++指针通过 -&gt; 来获取指针对象成员, golang则通过 . 来实现操作。</li>\n</ul>\n<figure class=\"highlight golang\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">package</span> main</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">import</span> (</div><div class=\"line\">    <span class=\"string\">\"fmt\"</span></div><div class=\"line\">)</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">testPointer</span><span class=\"params\">(user *User)</span></span> &#123;</div><div class=\"line\">    fmt.Printf(<span class=\"string\">\"name: %v, id: %v\\n\"</span>, (*user).name, (*user).id)</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</div><div class=\"line\">    user := User&#123;name:<span class=\"string\">\"xiaomo\"</span>,id:<span class=\"number\">1</span>&#125;</div><div class=\"line\">    testPointer(&amp;user)</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h4 id=\"3-匿名函数与闭包\"><a href=\"#3-匿名函数与闭包\" class=\"headerlink\" title=\"3.匿名函数与闭包\"></a>3.匿名函数与闭包</h4><p>匿名方法经常和闭包配套使用<br><figure class=\"highlight golang\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">package</span> main</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">import</span> (</div><div class=\"line\">    <span class=\"string\">\"fmt\"</span></div><div class=\"line\">)</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 匿名方法</span></div><div class=\"line\"><span class=\"keyword\">var</span> f1 = <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">(a,b <span class=\"keyword\">int</span>)</span> <span class=\"title\">int</span></span> &#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> (a+b)*<span class=\"number\">2</span></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 匿名方法与闭包</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">f2</span><span class=\"params\">(name <span class=\"keyword\">string</span>)</span></span> &#123;</div><div class=\"line\">    f_inner := <span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(x,y <span class=\"keyword\">int</span>)</span> <span class=\"title\">int</span></span> &#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> x+y</div><div class=\"line\">    &#125;</div><div class=\"line\">    sum := f_inner(<span class=\"number\">7</span>, <span class=\"number\">8</span>)</div><div class=\"line\">    fmt.Printf(<span class=\"string\">\"name:%v sum:%v\\n\"</span>, name, sum)</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// 匿名函数访问外部方法局部变量</span></div><div class=\"line\">    extra := <span class=\"number\">15</span></div><div class=\"line\">    f_inner2 := <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">(x,y <span class=\"keyword\">int</span>)</span> <span class=\"title\">int</span></span> &#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> x+y+extra</div><div class=\"line\">    &#125;</div><div class=\"line\">    sum2 := f_inner2(<span class=\"number\">9</span>, <span class=\"number\">10</span>)</div><div class=\"line\">    fmt.Printf(<span class=\"string\">\"name:%v sum2:%v\\n\"</span>, name, sum2)</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</div><div class=\"line\">    res := f1(<span class=\"number\">3</span>,<span class=\"number\">4</span>)</div><div class=\"line\">    fmt.Printf(<span class=\"string\">\"%v\\n\"</span>, res)</div><div class=\"line\"></div><div class=\"line\">    f2(<span class=\"string\">\"xiaomo\"</span>)</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>演示效果:<br><figure class=\"highlight golang\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">root@XIAOMO:~/gopro# <span class=\"keyword\">go</span> build main.<span class=\"keyword\">go</span></div><div class=\"line\">root@XIAOMO:~/gopro# ./main</div><div class=\"line\"><span class=\"number\">14</span></div><div class=\"line\">name:xiaomo sum:<span class=\"number\">15</span></div><div class=\"line\">name:xiaomo sum2:<span class=\"number\">34</span></div></pre></td></tr></table></figure></p>"},{"title":"[golang]gRPC通信协议","date":"2017-02-09T02:10:53.000Z","_content":"\n#### 关于gRPC\ngRPC是google公司面向移动应用, 基于http2.0协议标准而设计, 基于Protocol Buffers而开发的一种开源RPC框架。<br>\nProtoBuf可以用于通讯协议、数据存储等一些语言/平台无关的数据序列化, 号称高性能, 通用性强, 具体可以看下这里的分析：\n[Google Protocol Buffer 的使用和原理](https://www.ibm.com/developerworks/cn/linux/l-cn-gpb/)\n<br>gRPC提供了一种相对简单的方法来精确地定义服务, 和为ios/andoird/后台服务自动生成可靠的数据结构功能库; 通过它可以节省带宽和CPU资源, 降低TCP连接次数, 和延长电池寿命。\n<!--more-->\n\n#### 1.安装protobuf与gRPC of go\n去到[Protocol Buffers](https://github.com/google/protobuf/releases)下载器最新版。 笔者当前获取的版本为3.0.0, 安装过程如下：\n```\ntar -zxf protobuf-cpp-3.0.0-beta-2.tar.gz\ncd protobuf-3.0.0-beta-2/\n./configure\nmake && sudo make install\ngo get -u github.com/golang/protobuf/protoc-gen-go   # proto for golang\ngo get -u google.golang.org/grpc                     # grpc for golang\n```\n#### 2.定义proto文件\n```protobuf\n//protobuf3 protocol\nsyntax = \"proto3\";\npackage account;\n\n// request struct\nmessage UserRq {\n    int32 id = 1;\n}\n\n// response struct\nmessage UserRp {\n    string name = 1;\n}\n\n// service\nservice Data {\n    rpc GetUser(UserRq) returns (UserRp);\n}\n```\n上面定义了一个服务Data，有一个API叫GetUser，接收参数类型UserRq, 返回参数类型UserRp。\n\n<br>在proto中, service可以定义server， 有四种实现方式:(参考http://www.jianshu.com/p/774b38306c30)\n\n- rpc GetFeature(Point) returns (Feature) {}\n  <br>类似普通的函数调用，客户端发送请求Point到服务器，服务器返回相应Feature.\n\n- rpc ListFeatures(Rectangle) returns (stream Feature) {}\n  <br>客户端发起一次请求，服务器端返回一个流式数据，比如一个数组中的逐个元素\n\n- rpc RecordRoute(stream Point) returns (RouteSummary) {}\n  <br>客户端发起的请求是一个流式的数据，比如数组中的逐个元素，服务器返回一个相应\n\n- rpc RouteChat(stream RouteNote) returns (stream RouteNote) {}\n  <br>客户端发起的请求是一个流式数据，比如数组中的逐个元素，二服务器返回的也是一个类似的数据结构\n\n上面的proto定义实现的是第一种方式。\n\n#### 3.使用protoc command生成go源文件\n```bash\nprotoc --go_out=plugins=grpc:. account.proto\nls\naccount.pb.go  account.proto\n```\n通过protoc生成了account.pb.go，其源码看起来是这样子的:\n```golang\n// Code generated by protoc-gen-go.\n// source: account.proto\n// DO NOT EDIT!\n\n/*\nPackage account is a generated protocol buffer package.\n\nIt is generated from these files:\n\taccount.proto\n\nIt has these top-level messages:\n\tUserRq\n\tUserRp\n*/\npackage account\n\nimport proto \"github.com/golang/protobuf/proto\"\nimport fmt \"fmt\"\nimport math \"math\"\n\nimport (\n\tcontext \"golang.org/x/net/context\"\n\tgrpc \"google.golang.org/grpc\"\n)\n\n// Reference imports to suppress errors if they are not otherwise used.\nvar _ = proto.Marshal\nvar _ = fmt.Errorf\nvar _ = math.Inf\n\n// This is a compile-time assertion to ensure that this generated file\n// is compatible with the proto package it is being compiled against.\nconst _ = proto.ProtoPackageIsVersion1\n\n// request struct\ntype UserRq struct {\n\tId int32 `protobuf:\"varint,1,opt,name=id\" json:\"id,omitempty\"`\n}\n\nfunc (m *UserRq) Reset()                    { *m = UserRq{} }\nfunc (m *UserRq) String() string            { return proto.CompactTextString(m) }\nfunc (*UserRq) ProtoMessage()               {}\nfunc (*UserRq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }\n\n// response struct\ntype UserRp struct {\n\tName string `protobuf:\"bytes,1,opt,name=name\" json:\"name,omitempty\"`\n}\n\nfunc (m *UserRp) Reset()                    { *m = UserRp{} }\nfunc (m *UserRp) String() string            { return proto.CompactTextString(m) }\nfunc (*UserRp) ProtoMessage()               {}\nfunc (*UserRp) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }\n\nfunc init() {\n\tproto.RegisterType((*UserRq)(nil), \"account.UserRq\")\n\tproto.RegisterType((*UserRp)(nil), \"account.UserRp\")\n}\n\n// Reference imports to suppress errors if they are not otherwise used.\nvar _ context.Context\nvar _ grpc.ClientConn\n\n// This is a compile-time assertion to ensure that this generated file\n// is compatible with the grpc package it is being compiled against.\nconst _ = grpc.SupportPackageIsVersion1\n\n// Client API for Data service\n\ntype DataClient interface {\n\tGetUser(ctx context.Context, in *UserRq, opts ...grpc.CallOption) (*UserRp, error)\n}\n\ntype dataClient struct {\n\tcc *grpc.ClientConn\n}\n\nfunc NewDataClient(cc *grpc.ClientConn) DataClient {\n\treturn &dataClient{cc}\n}\n\nfunc (c *dataClient) GetUser(ctx context.Context, in *UserRq, opts ...grpc.CallOption) (*UserRp, error) {\n\tout := new(UserRp)\n\terr := grpc.Invoke(ctx, \"/account.Data/GetUser\", in, out, c.cc, opts...)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\treturn out, nil\n}\n\n// Server API for Data service\n\ntype DataServer interface {\n\tGetUser(context.Context, *UserRq) (*UserRp, error)\n}\n\nfunc RegisterDataServer(s *grpc.Server, srv DataServer) {\n\ts.RegisterService(&_Data_serviceDesc, srv)\n}\n\nfunc _Data_GetUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error) (interface{}, error) {\n\tin := new(UserRq)\n\tif err := dec(in); err != nil {\n\t\treturn nil, err\n\t}\n\tout, err := srv.(DataServer).GetUser(ctx, in)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\treturn out, nil\n}\n\nvar _Data_serviceDesc = grpc.ServiceDesc{\n\tServiceName: \"account.Data\",\n\tHandlerType: (*DataServer)(nil),\n\tMethods: []grpc.MethodDesc{\n\t\t{\n\t\t\tMethodName: \"GetUser\",\n\t\t\tHandler:    _Data_GetUser_Handler,\n\t\t},\n\t},\n\tStreams: []grpc.StreamDesc{},\n}\n\nvar fileDescriptor0 = []byte{\n\t// 119 bytes of a gzipped FileDescriptorProto\n\t0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0xe2, 0xe2, 0x4d, 0x4c, 0x4e, 0xce,\n\t0x2f, 0xcd, 0x2b, 0xd1, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x62, 0x87, 0x72, 0x95, 0x24, 0xb8,\n\t0xd8, 0x42, 0x8b, 0x53, 0x8b, 0x82, 0x0a, 0x85, 0xf8, 0xb8, 0x98, 0x32, 0x53, 0x24, 0x18, 0x15,\n\t0x18, 0x35, 0x58, 0x83, 0x80, 0x2c, 0x25, 0x19, 0xa8, 0x4c, 0x81, 0x90, 0x10, 0x17, 0x4b, 0x5e,\n\t0x62, 0x6e, 0x2a, 0x58, 0x8e, 0x33, 0x08, 0xcc, 0x36, 0x32, 0xe6, 0x62, 0x71, 0x49, 0x2c, 0x49,\n\t0x14, 0xd2, 0xe6, 0x62, 0x77, 0x4f, 0x2d, 0x01, 0x29, 0x14, 0xe2, 0xd7, 0x83, 0xd9, 0x01, 0x31,\n\t0x51, 0x0a, 0x4d, 0xa0, 0x20, 0x89, 0x0d, 0x6c, 0xb9, 0x31, 0x20, 0x00, 0x00, 0xff, 0xff, 0xa6,\n\t0x63, 0xe9, 0x2f, 0x8d, 0x00, 0x00, 0x00,\n}\n```\n\n#### 4. 服务端svr.go\n```\npackage main\n\n// created by moguang(moxiaomomo@gmail.com)\n// created at 2016-01-10\n\nimport (\n\t\"account\"\n\t\"golang.org/x/net/context\"\n\t\"google.golang.org/grpc\"\n\t\"log\"\n\t\"net\"\n\t\"strconv\"\n)\n\ntype Data struct{}\n\nfunc main() {\n\thost := \"127.0.0.1:8080\"\n\t//listen on port\n\tlis, err := net.Listen(\"tcp\", host)\n\tif err != nil {\n\t\tlog.Fatalf(\"Failed to listen: %v\", err)\n\t}\n\ts := grpc.NewServer()\n\taccount.RegisterDataServer(s, &Data{})\n\t// accept message\n\tlog.Printf(\"Begin to serve on %v\", host)\n\ts.Serve(lis)\n\tlog.Println(\"Server is shutdown.\")\n}\n\n// 给Data类型定义方法\nfunc (t *Data) GetUser(ctx context.Context, request *account.UserRq) (response *account.UserRp, err error) {\n\tlog.Printf(\"To get user, request.Id: %v\", request.Id)\n\tresponse = &account.UserRp{\n\t\tName: strconv.Itoa(int(request.Id)) + \"_test\",\n\t}\n\treturn response, err\n}\n```\n\n#### 5. 客户端cli.go\n```golang\npackage main\n\n// created by moguang(moxiaomomo@gmail.com)\n// created at 2016-01-10\n\nimport (\n\t\"account\"\n\t\"golang.org/x/net/context\"\n\t\"google.golang.org/grpc\"\n\t\"log\"\n\t\"math/rand\"\n\t\"strconv\"\n\t\"strings\"\n\t\"sync\"\n\t\"time\"\n)\n\nvar (\n\twg sync.WaitGroup\n)\n\nconst (\n\tserver      = \"127.0.0.1\"\n\tport        = \"8080\"\n\tparallel    = 10 //连接并行数\n\ttimes       = 10 //每连接请求次数\n)\n\nfunc main() {\n\tbeginTime := time.Now()\n\t//结合WaitGroup, 实现并行请求\n\tfor i := 0; i < int(parallel); i++ {\n\t\twg.Add(1)\n\t\tgo execRPC(&wg)\n\t}\n\twg.Wait()\n\n\tendTime := time.Now()\n\tlog.Printf(\"Exec time secs: %.2f \", endTime.Sub(beginTime).Seconds())\n}\n\nfunc execRPC(wg *sync.WaitGroup) {\n\tdefer wg.Done()\n\t// 建立连接\n\thost := server + \":\" + port\n\tconn, err := grpc.Dial(host, grpc.WithInsecure())\n\tif err != nil {\n\t\tlog.Printf(\"Dial Err: %v\", err)\n\t\treturn\n\t}\n\tdefer conn.Close()\n\n\tclient := account.NewDataClient(conn)\n\t// 连续发起多次请求\n\tfor i := 0; i < int(times); i++ {\n\t\tgetUser(client)\n\t}\n}\n\nfunc getUser(client account.DataClient) {\n\tvar request account.UserRq\n\tr := rand.Intn(parallel)\n\trequest.Id = int32(r)\n\n\t// 调用远程方法\n\tresponse, _ := client.GetUser(context.Background(), &request)\n\t// 判断返回结果\n\tif id, _ := strconv.Atoi(strings.Split(response.Name, \":\")[0]); id != r {\n\t\tlog.Printf(\"Response error %#v\", response)\n\t} else {\n\t\tlog.Printf(\"Response ok %#v\", response)\n\t}\n}\n```\n","source":"_posts/golang/golang_gRPC.md","raw":"---\ntitle: '[golang]gRPC通信协议'\ndate: 2017-02-09 10:10:53\ntags: golang\n---\n\n#### 关于gRPC\ngRPC是google公司面向移动应用, 基于http2.0协议标准而设计, 基于Protocol Buffers而开发的一种开源RPC框架。<br>\nProtoBuf可以用于通讯协议、数据存储等一些语言/平台无关的数据序列化, 号称高性能, 通用性强, 具体可以看下这里的分析：\n[Google Protocol Buffer 的使用和原理](https://www.ibm.com/developerworks/cn/linux/l-cn-gpb/)\n<br>gRPC提供了一种相对简单的方法来精确地定义服务, 和为ios/andoird/后台服务自动生成可靠的数据结构功能库; 通过它可以节省带宽和CPU资源, 降低TCP连接次数, 和延长电池寿命。\n<!--more-->\n\n#### 1.安装protobuf与gRPC of go\n去到[Protocol Buffers](https://github.com/google/protobuf/releases)下载器最新版。 笔者当前获取的版本为3.0.0, 安装过程如下：\n```\ntar -zxf protobuf-cpp-3.0.0-beta-2.tar.gz\ncd protobuf-3.0.0-beta-2/\n./configure\nmake && sudo make install\ngo get -u github.com/golang/protobuf/protoc-gen-go   # proto for golang\ngo get -u google.golang.org/grpc                     # grpc for golang\n```\n#### 2.定义proto文件\n```protobuf\n//protobuf3 protocol\nsyntax = \"proto3\";\npackage account;\n\n// request struct\nmessage UserRq {\n    int32 id = 1;\n}\n\n// response struct\nmessage UserRp {\n    string name = 1;\n}\n\n// service\nservice Data {\n    rpc GetUser(UserRq) returns (UserRp);\n}\n```\n上面定义了一个服务Data，有一个API叫GetUser，接收参数类型UserRq, 返回参数类型UserRp。\n\n<br>在proto中, service可以定义server， 有四种实现方式:(参考http://www.jianshu.com/p/774b38306c30)\n\n- rpc GetFeature(Point) returns (Feature) {}\n  <br>类似普通的函数调用，客户端发送请求Point到服务器，服务器返回相应Feature.\n\n- rpc ListFeatures(Rectangle) returns (stream Feature) {}\n  <br>客户端发起一次请求，服务器端返回一个流式数据，比如一个数组中的逐个元素\n\n- rpc RecordRoute(stream Point) returns (RouteSummary) {}\n  <br>客户端发起的请求是一个流式的数据，比如数组中的逐个元素，服务器返回一个相应\n\n- rpc RouteChat(stream RouteNote) returns (stream RouteNote) {}\n  <br>客户端发起的请求是一个流式数据，比如数组中的逐个元素，二服务器返回的也是一个类似的数据结构\n\n上面的proto定义实现的是第一种方式。\n\n#### 3.使用protoc command生成go源文件\n```bash\nprotoc --go_out=plugins=grpc:. account.proto\nls\naccount.pb.go  account.proto\n```\n通过protoc生成了account.pb.go，其源码看起来是这样子的:\n```golang\n// Code generated by protoc-gen-go.\n// source: account.proto\n// DO NOT EDIT!\n\n/*\nPackage account is a generated protocol buffer package.\n\nIt is generated from these files:\n\taccount.proto\n\nIt has these top-level messages:\n\tUserRq\n\tUserRp\n*/\npackage account\n\nimport proto \"github.com/golang/protobuf/proto\"\nimport fmt \"fmt\"\nimport math \"math\"\n\nimport (\n\tcontext \"golang.org/x/net/context\"\n\tgrpc \"google.golang.org/grpc\"\n)\n\n// Reference imports to suppress errors if they are not otherwise used.\nvar _ = proto.Marshal\nvar _ = fmt.Errorf\nvar _ = math.Inf\n\n// This is a compile-time assertion to ensure that this generated file\n// is compatible with the proto package it is being compiled against.\nconst _ = proto.ProtoPackageIsVersion1\n\n// request struct\ntype UserRq struct {\n\tId int32 `protobuf:\"varint,1,opt,name=id\" json:\"id,omitempty\"`\n}\n\nfunc (m *UserRq) Reset()                    { *m = UserRq{} }\nfunc (m *UserRq) String() string            { return proto.CompactTextString(m) }\nfunc (*UserRq) ProtoMessage()               {}\nfunc (*UserRq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }\n\n// response struct\ntype UserRp struct {\n\tName string `protobuf:\"bytes,1,opt,name=name\" json:\"name,omitempty\"`\n}\n\nfunc (m *UserRp) Reset()                    { *m = UserRp{} }\nfunc (m *UserRp) String() string            { return proto.CompactTextString(m) }\nfunc (*UserRp) ProtoMessage()               {}\nfunc (*UserRp) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }\n\nfunc init() {\n\tproto.RegisterType((*UserRq)(nil), \"account.UserRq\")\n\tproto.RegisterType((*UserRp)(nil), \"account.UserRp\")\n}\n\n// Reference imports to suppress errors if they are not otherwise used.\nvar _ context.Context\nvar _ grpc.ClientConn\n\n// This is a compile-time assertion to ensure that this generated file\n// is compatible with the grpc package it is being compiled against.\nconst _ = grpc.SupportPackageIsVersion1\n\n// Client API for Data service\n\ntype DataClient interface {\n\tGetUser(ctx context.Context, in *UserRq, opts ...grpc.CallOption) (*UserRp, error)\n}\n\ntype dataClient struct {\n\tcc *grpc.ClientConn\n}\n\nfunc NewDataClient(cc *grpc.ClientConn) DataClient {\n\treturn &dataClient{cc}\n}\n\nfunc (c *dataClient) GetUser(ctx context.Context, in *UserRq, opts ...grpc.CallOption) (*UserRp, error) {\n\tout := new(UserRp)\n\terr := grpc.Invoke(ctx, \"/account.Data/GetUser\", in, out, c.cc, opts...)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\treturn out, nil\n}\n\n// Server API for Data service\n\ntype DataServer interface {\n\tGetUser(context.Context, *UserRq) (*UserRp, error)\n}\n\nfunc RegisterDataServer(s *grpc.Server, srv DataServer) {\n\ts.RegisterService(&_Data_serviceDesc, srv)\n}\n\nfunc _Data_GetUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error) (interface{}, error) {\n\tin := new(UserRq)\n\tif err := dec(in); err != nil {\n\t\treturn nil, err\n\t}\n\tout, err := srv.(DataServer).GetUser(ctx, in)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\treturn out, nil\n}\n\nvar _Data_serviceDesc = grpc.ServiceDesc{\n\tServiceName: \"account.Data\",\n\tHandlerType: (*DataServer)(nil),\n\tMethods: []grpc.MethodDesc{\n\t\t{\n\t\t\tMethodName: \"GetUser\",\n\t\t\tHandler:    _Data_GetUser_Handler,\n\t\t},\n\t},\n\tStreams: []grpc.StreamDesc{},\n}\n\nvar fileDescriptor0 = []byte{\n\t// 119 bytes of a gzipped FileDescriptorProto\n\t0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0xe2, 0xe2, 0x4d, 0x4c, 0x4e, 0xce,\n\t0x2f, 0xcd, 0x2b, 0xd1, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x62, 0x87, 0x72, 0x95, 0x24, 0xb8,\n\t0xd8, 0x42, 0x8b, 0x53, 0x8b, 0x82, 0x0a, 0x85, 0xf8, 0xb8, 0x98, 0x32, 0x53, 0x24, 0x18, 0x15,\n\t0x18, 0x35, 0x58, 0x83, 0x80, 0x2c, 0x25, 0x19, 0xa8, 0x4c, 0x81, 0x90, 0x10, 0x17, 0x4b, 0x5e,\n\t0x62, 0x6e, 0x2a, 0x58, 0x8e, 0x33, 0x08, 0xcc, 0x36, 0x32, 0xe6, 0x62, 0x71, 0x49, 0x2c, 0x49,\n\t0x14, 0xd2, 0xe6, 0x62, 0x77, 0x4f, 0x2d, 0x01, 0x29, 0x14, 0xe2, 0xd7, 0x83, 0xd9, 0x01, 0x31,\n\t0x51, 0x0a, 0x4d, 0xa0, 0x20, 0x89, 0x0d, 0x6c, 0xb9, 0x31, 0x20, 0x00, 0x00, 0xff, 0xff, 0xa6,\n\t0x63, 0xe9, 0x2f, 0x8d, 0x00, 0x00, 0x00,\n}\n```\n\n#### 4. 服务端svr.go\n```\npackage main\n\n// created by moguang(moxiaomomo@gmail.com)\n// created at 2016-01-10\n\nimport (\n\t\"account\"\n\t\"golang.org/x/net/context\"\n\t\"google.golang.org/grpc\"\n\t\"log\"\n\t\"net\"\n\t\"strconv\"\n)\n\ntype Data struct{}\n\nfunc main() {\n\thost := \"127.0.0.1:8080\"\n\t//listen on port\n\tlis, err := net.Listen(\"tcp\", host)\n\tif err != nil {\n\t\tlog.Fatalf(\"Failed to listen: %v\", err)\n\t}\n\ts := grpc.NewServer()\n\taccount.RegisterDataServer(s, &Data{})\n\t// accept message\n\tlog.Printf(\"Begin to serve on %v\", host)\n\ts.Serve(lis)\n\tlog.Println(\"Server is shutdown.\")\n}\n\n// 给Data类型定义方法\nfunc (t *Data) GetUser(ctx context.Context, request *account.UserRq) (response *account.UserRp, err error) {\n\tlog.Printf(\"To get user, request.Id: %v\", request.Id)\n\tresponse = &account.UserRp{\n\t\tName: strconv.Itoa(int(request.Id)) + \"_test\",\n\t}\n\treturn response, err\n}\n```\n\n#### 5. 客户端cli.go\n```golang\npackage main\n\n// created by moguang(moxiaomomo@gmail.com)\n// created at 2016-01-10\n\nimport (\n\t\"account\"\n\t\"golang.org/x/net/context\"\n\t\"google.golang.org/grpc\"\n\t\"log\"\n\t\"math/rand\"\n\t\"strconv\"\n\t\"strings\"\n\t\"sync\"\n\t\"time\"\n)\n\nvar (\n\twg sync.WaitGroup\n)\n\nconst (\n\tserver      = \"127.0.0.1\"\n\tport        = \"8080\"\n\tparallel    = 10 //连接并行数\n\ttimes       = 10 //每连接请求次数\n)\n\nfunc main() {\n\tbeginTime := time.Now()\n\t//结合WaitGroup, 实现并行请求\n\tfor i := 0; i < int(parallel); i++ {\n\t\twg.Add(1)\n\t\tgo execRPC(&wg)\n\t}\n\twg.Wait()\n\n\tendTime := time.Now()\n\tlog.Printf(\"Exec time secs: %.2f \", endTime.Sub(beginTime).Seconds())\n}\n\nfunc execRPC(wg *sync.WaitGroup) {\n\tdefer wg.Done()\n\t// 建立连接\n\thost := server + \":\" + port\n\tconn, err := grpc.Dial(host, grpc.WithInsecure())\n\tif err != nil {\n\t\tlog.Printf(\"Dial Err: %v\", err)\n\t\treturn\n\t}\n\tdefer conn.Close()\n\n\tclient := account.NewDataClient(conn)\n\t// 连续发起多次请求\n\tfor i := 0; i < int(times); i++ {\n\t\tgetUser(client)\n\t}\n}\n\nfunc getUser(client account.DataClient) {\n\tvar request account.UserRq\n\tr := rand.Intn(parallel)\n\trequest.Id = int32(r)\n\n\t// 调用远程方法\n\tresponse, _ := client.GetUser(context.Background(), &request)\n\t// 判断返回结果\n\tif id, _ := strconv.Atoi(strings.Split(response.Name, \":\")[0]); id != r {\n\t\tlog.Printf(\"Response error %#v\", response)\n\t} else {\n\t\tlog.Printf(\"Response ok %#v\", response)\n\t}\n}\n```\n","slug":"golang/golang_gRPC","published":1,"updated":"2017-08-07T05:47:10.146Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj61qjrxy0005dd4dq6tisjz1","content":"<h4 id=\"关于gRPC\"><a href=\"#关于gRPC\" class=\"headerlink\" title=\"关于gRPC\"></a>关于gRPC</h4><p>gRPC是google公司面向移动应用, 基于http2.0协议标准而设计, 基于Protocol Buffers而开发的一种开源RPC框架。<br><br>ProtoBuf可以用于通讯协议、数据存储等一些语言/平台无关的数据序列化, 号称高性能, 通用性强, 具体可以看下这里的分析：<br><a href=\"https://www.ibm.com/developerworks/cn/linux/l-cn-gpb/\" target=\"_blank\" rel=\"external\">Google Protocol Buffer 的使用和原理</a><br><br>gRPC提供了一种相对简单的方法来精确地定义服务, 和为ios/andoird/后台服务自动生成可靠的数据结构功能库; 通过它可以节省带宽和CPU资源, 降低TCP连接次数, 和延长电池寿命。<br><a id=\"more\"></a></p>\n<h4 id=\"1-安装protobuf与gRPC-of-go\"><a href=\"#1-安装protobuf与gRPC-of-go\" class=\"headerlink\" title=\"1.安装protobuf与gRPC of go\"></a>1.安装protobuf与gRPC of go</h4><p>去到<a href=\"https://github.com/google/protobuf/releases\" target=\"_blank\" rel=\"external\">Protocol Buffers</a>下载器最新版。 笔者当前获取的版本为3.0.0, 安装过程如下：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">tar -zxf protobuf-cpp-3.0.0-beta-2.tar.gz</div><div class=\"line\">cd protobuf-3.0.0-beta-2/</div><div class=\"line\">./configure</div><div class=\"line\">make &amp;&amp; sudo make install</div><div class=\"line\">go get -u github.com/golang/protobuf/protoc-gen-go   # proto for golang</div><div class=\"line\">go get -u google.golang.org/grpc                     # grpc for golang</div></pre></td></tr></table></figure></p>\n<h4 id=\"2-定义proto文件\"><a href=\"#2-定义proto文件\" class=\"headerlink\" title=\"2.定义proto文件\"></a>2.定义proto文件</h4><figure class=\"highlight protobuf\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\">//protobuf3 protocol</div><div class=\"line\">syntax = &quot;proto3&quot;;</div><div class=\"line\">package account;</div><div class=\"line\"></div><div class=\"line\">// request struct</div><div class=\"line\">message UserRq &#123;</div><div class=\"line\">    int32 id = 1;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">// response struct</div><div class=\"line\">message UserRp &#123;</div><div class=\"line\">    string name = 1;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">// service</div><div class=\"line\">service Data &#123;</div><div class=\"line\">    rpc GetUser(UserRq) returns (UserRp);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>上面定义了一个服务Data，有一个API叫GetUser，接收参数类型UserRq, 返回参数类型UserRp。</p>\n<p><br>在proto中, service可以定义server， 有四种实现方式:(参考<a href=\"http://www.jianshu.com/p/774b38306c30\" target=\"_blank\" rel=\"external\">http://www.jianshu.com/p/774b38306c30</a>)</p>\n<ul>\n<li><p>rpc GetFeature(Point) returns (Feature) {}<br><br>类似普通的函数调用，客户端发送请求Point到服务器，服务器返回相应Feature.</p>\n</li>\n<li><p>rpc ListFeatures(Rectangle) returns (stream Feature) {}<br><br>客户端发起一次请求，服务器端返回一个流式数据，比如一个数组中的逐个元素</p>\n</li>\n<li><p>rpc RecordRoute(stream Point) returns (RouteSummary) {}<br><br>客户端发起的请求是一个流式的数据，比如数组中的逐个元素，服务器返回一个相应</p>\n</li>\n<li><p>rpc RouteChat(stream RouteNote) returns (stream RouteNote) {}<br><br>客户端发起的请求是一个流式数据，比如数组中的逐个元素，二服务器返回的也是一个类似的数据结构</p>\n</li>\n</ul>\n<p>上面的proto定义实现的是第一种方式。</p>\n<h4 id=\"3-使用protoc-command生成go源文件\"><a href=\"#3-使用protoc-command生成go源文件\" class=\"headerlink\" title=\"3.使用protoc command生成go源文件\"></a>3.使用protoc command生成go源文件</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">protoc --go_out=plugins=grpc:. account.proto</div><div class=\"line\">ls</div><div class=\"line\">account.pb.go  account.proto</div></pre></td></tr></table></figure>\n<p>通过protoc生成了account.pb.go，其源码看起来是这样子的:<br><figure class=\"highlight golang\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div><div class=\"line\">94</div><div class=\"line\">95</div><div class=\"line\">96</div><div class=\"line\">97</div><div class=\"line\">98</div><div class=\"line\">99</div><div class=\"line\">100</div><div class=\"line\">101</div><div class=\"line\">102</div><div class=\"line\">103</div><div class=\"line\">104</div><div class=\"line\">105</div><div class=\"line\">106</div><div class=\"line\">107</div><div class=\"line\">108</div><div class=\"line\">109</div><div class=\"line\">110</div><div class=\"line\">111</div><div class=\"line\">112</div><div class=\"line\">113</div><div class=\"line\">114</div><div class=\"line\">115</div><div class=\"line\">116</div><div class=\"line\">117</div><div class=\"line\">118</div><div class=\"line\">119</div><div class=\"line\">120</div><div class=\"line\">121</div><div class=\"line\">122</div><div class=\"line\">123</div><div class=\"line\">124</div><div class=\"line\">125</div><div class=\"line\">126</div><div class=\"line\">127</div><div class=\"line\">128</div><div class=\"line\">129</div><div class=\"line\">130</div><div class=\"line\">131</div><div class=\"line\">132</div><div class=\"line\">133</div><div class=\"line\">134</div><div class=\"line\">135</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// Code generated by protoc-gen-go.</span></div><div class=\"line\"><span class=\"comment\">// source: account.proto</span></div><div class=\"line\"><span class=\"comment\">// DO NOT EDIT!</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/*</span></div><div class=\"line\">Package account is a generated protocol buffer package.</div><div class=\"line\"></div><div class=\"line\">It is generated from these files:</div><div class=\"line\">\taccount.proto</div><div class=\"line\"></div><div class=\"line\">It has these top-level messages:</div><div class=\"line\">\tUserRq</div><div class=\"line\">\tUserRp</div><div class=\"line\">*/</div><div class=\"line\"><span class=\"keyword\">package</span> account</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">import</span> proto <span class=\"string\">\"github.com/golang/protobuf/proto\"</span></div><div class=\"line\"><span class=\"keyword\">import</span> fmt <span class=\"string\">\"fmt\"</span></div><div class=\"line\"><span class=\"keyword\">import</span> math <span class=\"string\">\"math\"</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">import</span> (</div><div class=\"line\">\tcontext <span class=\"string\">\"golang.org/x/net/context\"</span></div><div class=\"line\">\tgrpc <span class=\"string\">\"google.golang.org/grpc\"</span></div><div class=\"line\">)</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// Reference imports to suppress errors if they are not otherwise used.</span></div><div class=\"line\"><span class=\"keyword\">var</span> _ = proto.Marshal</div><div class=\"line\"><span class=\"keyword\">var</span> _ = fmt.Errorf</div><div class=\"line\"><span class=\"keyword\">var</span> _ = math.Inf</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// This is a compile-time assertion to ensure that this generated file</span></div><div class=\"line\"><span class=\"comment\">// is compatible with the proto package it is being compiled against.</span></div><div class=\"line\"><span class=\"keyword\">const</span> _ = proto.ProtoPackageIsVersion1</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// request struct</span></div><div class=\"line\"><span class=\"keyword\">type</span> UserRq <span class=\"keyword\">struct</span> &#123;</div><div class=\"line\">\tId <span class=\"keyword\">int32</span> <span class=\"string\">`protobuf:\"varint,1,opt,name=id\" json:\"id,omitempty\"`</span></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(m *UserRq)</span> <span class=\"title\">Reset</span><span class=\"params\">()</span></span>                    &#123; *m = UserRq&#123;&#125; &#125;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(m *UserRq)</span> <span class=\"title\">String</span><span class=\"params\">()</span> <span class=\"title\">string</span></span>            &#123; <span class=\"keyword\">return</span> proto.CompactTextString(m) &#125;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(*UserRq)</span> <span class=\"title\">ProtoMessage</span><span class=\"params\">()</span></span>               &#123;&#125;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(*UserRq)</span> <span class=\"title\">Descriptor</span><span class=\"params\">()</span> <span class=\"params\">([]<span class=\"keyword\">byte</span>, []<span class=\"keyword\">int</span>)</span></span> &#123; <span class=\"keyword\">return</span> fileDescriptor0, []<span class=\"keyword\">int</span>&#123;<span class=\"number\">0</span>&#125; &#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// response struct</span></div><div class=\"line\"><span class=\"keyword\">type</span> UserRp <span class=\"keyword\">struct</span> &#123;</div><div class=\"line\">\tName <span class=\"keyword\">string</span> <span class=\"string\">`protobuf:\"bytes,1,opt,name=name\" json:\"name,omitempty\"`</span></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(m *UserRp)</span> <span class=\"title\">Reset</span><span class=\"params\">()</span></span>                    &#123; *m = UserRp&#123;&#125; &#125;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(m *UserRp)</span> <span class=\"title\">String</span><span class=\"params\">()</span> <span class=\"title\">string</span></span>            &#123; <span class=\"keyword\">return</span> proto.CompactTextString(m) &#125;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(*UserRp)</span> <span class=\"title\">ProtoMessage</span><span class=\"params\">()</span></span>               &#123;&#125;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(*UserRp)</span> <span class=\"title\">Descriptor</span><span class=\"params\">()</span> <span class=\"params\">([]<span class=\"keyword\">byte</span>, []<span class=\"keyword\">int</span>)</span></span> &#123; <span class=\"keyword\">return</span> fileDescriptor0, []<span class=\"keyword\">int</span>&#123;<span class=\"number\">1</span>&#125; &#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">init</span><span class=\"params\">()</span></span> &#123;</div><div class=\"line\">\tproto.RegisterType((*UserRq)(<span class=\"literal\">nil</span>), <span class=\"string\">\"account.UserRq\"</span>)</div><div class=\"line\">\tproto.RegisterType((*UserRp)(<span class=\"literal\">nil</span>), <span class=\"string\">\"account.UserRp\"</span>)</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// Reference imports to suppress errors if they are not otherwise used.</span></div><div class=\"line\"><span class=\"keyword\">var</span> _ context.Context</div><div class=\"line\"><span class=\"keyword\">var</span> _ grpc.ClientConn</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// This is a compile-time assertion to ensure that this generated file</span></div><div class=\"line\"><span class=\"comment\">// is compatible with the grpc package it is being compiled against.</span></div><div class=\"line\"><span class=\"keyword\">const</span> _ = grpc.SupportPackageIsVersion1</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// Client API for Data service</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">type</span> DataClient <span class=\"keyword\">interface</span> &#123;</div><div class=\"line\">\tGetUser(ctx context.Context, in *UserRq, opts ...grpc.CallOption) (*UserRp, error)</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">type</span> dataClient <span class=\"keyword\">struct</span> &#123;</div><div class=\"line\">\tcc *grpc.ClientConn</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">NewDataClient</span><span class=\"params\">(cc *grpc.ClientConn)</span> <span class=\"title\">DataClient</span></span> &#123;</div><div class=\"line\">\t<span class=\"keyword\">return</span> &amp;dataClient&#123;cc&#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(c *dataClient)</span> <span class=\"title\">GetUser</span><span class=\"params\">(ctx context.Context, in *UserRq, opts ...grpc.CallOption)</span> <span class=\"params\">(*UserRp, error)</span></span> &#123;</div><div class=\"line\">\tout := <span class=\"built_in\">new</span>(UserRp)</div><div class=\"line\">\terr := grpc.Invoke(ctx, <span class=\"string\">\"/account.Data/GetUser\"</span>, in, out, c.cc, opts...)</div><div class=\"line\">\t<span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"literal\">nil</span>, err</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t<span class=\"keyword\">return</span> out, <span class=\"literal\">nil</span></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// Server API for Data service</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">type</span> DataServer <span class=\"keyword\">interface</span> &#123;</div><div class=\"line\">\tGetUser(context.Context, *UserRq) (*UserRp, error)</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">RegisterDataServer</span><span class=\"params\">(s *grpc.Server, srv DataServer)</span></span> &#123;</div><div class=\"line\">\ts.RegisterService(&amp;_Data_serviceDesc, srv)</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> _<span class=\"title\">Data_GetUser_Handler</span><span class=\"params\">(srv <span class=\"keyword\">interface</span>&#123;&#125;, ctx context.Context, dec <span class=\"keyword\">func</span>(<span class=\"keyword\">interface</span>&#123;&#125;)</span> <span class=\"title\">error</span>) <span class=\"params\">(<span class=\"keyword\">interface</span>&#123;&#125;, error)</span></span> &#123;</div><div class=\"line\">\tin := <span class=\"built_in\">new</span>(UserRq)</div><div class=\"line\">\t<span class=\"keyword\">if</span> err := dec(in); err != <span class=\"literal\">nil</span> &#123;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"literal\">nil</span>, err</div><div class=\"line\">\t&#125;</div><div class=\"line\">\tout, err := srv.(DataServer).GetUser(ctx, in)</div><div class=\"line\">\t<span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"literal\">nil</span>, err</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t<span class=\"keyword\">return</span> out, <span class=\"literal\">nil</span></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> _Data_serviceDesc = grpc.ServiceDesc&#123;</div><div class=\"line\">\tServiceName: <span class=\"string\">\"account.Data\"</span>,</div><div class=\"line\">\tHandlerType: (*DataServer)(<span class=\"literal\">nil</span>),</div><div class=\"line\">\tMethods: []grpc.MethodDesc&#123;</div><div class=\"line\">\t\t&#123;</div><div class=\"line\">\t\t\tMethodName: <span class=\"string\">\"GetUser\"</span>,</div><div class=\"line\">\t\t\tHandler:    _Data_GetUser_Handler,</div><div class=\"line\">\t\t&#125;,</div><div class=\"line\">\t&#125;,</div><div class=\"line\">\tStreams: []grpc.StreamDesc&#123;&#125;,</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> fileDescriptor0 = []<span class=\"keyword\">byte</span>&#123;</div><div class=\"line\">\t<span class=\"comment\">// 119 bytes of a gzipped FileDescriptorProto</span></div><div class=\"line\">\t<span class=\"number\">0x1f</span>, <span class=\"number\">0x8b</span>, <span class=\"number\">0x08</span>, <span class=\"number\">0x00</span>, <span class=\"number\">0x00</span>, <span class=\"number\">0x09</span>, <span class=\"number\">0x6e</span>, <span class=\"number\">0x88</span>, <span class=\"number\">0x02</span>, <span class=\"number\">0xff</span>, <span class=\"number\">0xe2</span>, <span class=\"number\">0xe2</span>, <span class=\"number\">0x4d</span>, <span class=\"number\">0x4c</span>, <span class=\"number\">0x4e</span>, <span class=\"number\">0xce</span>,</div><div class=\"line\">\t<span class=\"number\">0x2f</span>, <span class=\"number\">0xcd</span>, <span class=\"number\">0x2b</span>, <span class=\"number\">0xd1</span>, <span class=\"number\">0x2b</span>, <span class=\"number\">0x28</span>, <span class=\"number\">0xca</span>, <span class=\"number\">0x2f</span>, <span class=\"number\">0xc9</span>, <span class=\"number\">0x17</span>, <span class=\"number\">0x62</span>, <span class=\"number\">0x87</span>, <span class=\"number\">0x72</span>, <span class=\"number\">0x95</span>, <span class=\"number\">0x24</span>, <span class=\"number\">0xb8</span>,</div><div class=\"line\">\t<span class=\"number\">0xd8</span>, <span class=\"number\">0x42</span>, <span class=\"number\">0x8b</span>, <span class=\"number\">0x53</span>, <span class=\"number\">0x8b</span>, <span class=\"number\">0x82</span>, <span class=\"number\">0x0a</span>, <span class=\"number\">0x85</span>, <span class=\"number\">0xf8</span>, <span class=\"number\">0xb8</span>, <span class=\"number\">0x98</span>, <span class=\"number\">0x32</span>, <span class=\"number\">0x53</span>, <span class=\"number\">0x24</span>, <span class=\"number\">0x18</span>, <span class=\"number\">0x15</span>,</div><div class=\"line\">\t<span class=\"number\">0x18</span>, <span class=\"number\">0x35</span>, <span class=\"number\">0x58</span>, <span class=\"number\">0x83</span>, <span class=\"number\">0x80</span>, <span class=\"number\">0x2c</span>, <span class=\"number\">0x25</span>, <span class=\"number\">0x19</span>, <span class=\"number\">0xa8</span>, <span class=\"number\">0x4c</span>, <span class=\"number\">0x81</span>, <span class=\"number\">0x90</span>, <span class=\"number\">0x10</span>, <span class=\"number\">0x17</span>, <span class=\"number\">0x4b</span>, <span class=\"number\">0x5e</span>,</div><div class=\"line\">\t<span class=\"number\">0x62</span>, <span class=\"number\">0x6e</span>, <span class=\"number\">0x2a</span>, <span class=\"number\">0x58</span>, <span class=\"number\">0x8e</span>, <span class=\"number\">0x33</span>, <span class=\"number\">0x08</span>, <span class=\"number\">0xcc</span>, <span class=\"number\">0x36</span>, <span class=\"number\">0x32</span>, <span class=\"number\">0xe6</span>, <span class=\"number\">0x62</span>, <span class=\"number\">0x71</span>, <span class=\"number\">0x49</span>, <span class=\"number\">0x2c</span>, <span class=\"number\">0x49</span>,</div><div class=\"line\">\t<span class=\"number\">0x14</span>, <span class=\"number\">0xd2</span>, <span class=\"number\">0xe6</span>, <span class=\"number\">0x62</span>, <span class=\"number\">0x77</span>, <span class=\"number\">0x4f</span>, <span class=\"number\">0x2d</span>, <span class=\"number\">0x01</span>, <span class=\"number\">0x29</span>, <span class=\"number\">0x14</span>, <span class=\"number\">0xe2</span>, <span class=\"number\">0xd7</span>, <span class=\"number\">0x83</span>, <span class=\"number\">0xd9</span>, <span class=\"number\">0x01</span>, <span class=\"number\">0x31</span>,</div><div class=\"line\">\t<span class=\"number\">0x51</span>, <span class=\"number\">0x0a</span>, <span class=\"number\">0x4d</span>, <span class=\"number\">0xa0</span>, <span class=\"number\">0x20</span>, <span class=\"number\">0x89</span>, <span class=\"number\">0x0d</span>, <span class=\"number\">0x6c</span>, <span class=\"number\">0xb9</span>, <span class=\"number\">0x31</span>, <span class=\"number\">0x20</span>, <span class=\"number\">0x00</span>, <span class=\"number\">0x00</span>, <span class=\"number\">0xff</span>, <span class=\"number\">0xff</span>, <span class=\"number\">0xa6</span>,</div><div class=\"line\">\t<span class=\"number\">0x63</span>, <span class=\"number\">0xe9</span>, <span class=\"number\">0x2f</span>, <span class=\"number\">0x8d</span>, <span class=\"number\">0x00</span>, <span class=\"number\">0x00</span>, <span class=\"number\">0x00</span>,</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<h4 id=\"4-服务端svr-go\"><a href=\"#4-服务端svr-go\" class=\"headerlink\" title=\"4. 服务端svr.go\"></a>4. 服务端svr.go</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div></pre></td><td class=\"code\"><pre><div class=\"line\">package main</div><div class=\"line\"></div><div class=\"line\">// created by moguang(moxiaomomo@gmail.com)</div><div class=\"line\">// created at 2016-01-10</div><div class=\"line\"></div><div class=\"line\">import (</div><div class=\"line\">\t&quot;account&quot;</div><div class=\"line\">\t&quot;golang.org/x/net/context&quot;</div><div class=\"line\">\t&quot;google.golang.org/grpc&quot;</div><div class=\"line\">\t&quot;log&quot;</div><div class=\"line\">\t&quot;net&quot;</div><div class=\"line\">\t&quot;strconv&quot;</div><div class=\"line\">)</div><div class=\"line\"></div><div class=\"line\">type Data struct&#123;&#125;</div><div class=\"line\"></div><div class=\"line\">func main() &#123;</div><div class=\"line\">\thost := &quot;127.0.0.1:8080&quot;</div><div class=\"line\">\t//listen on port</div><div class=\"line\">\tlis, err := net.Listen(&quot;tcp&quot;, host)</div><div class=\"line\">\tif err != nil &#123;</div><div class=\"line\">\t\tlog.Fatalf(&quot;Failed to listen: %v&quot;, err)</div><div class=\"line\">\t&#125;</div><div class=\"line\">\ts := grpc.NewServer()</div><div class=\"line\">\taccount.RegisterDataServer(s, &amp;Data&#123;&#125;)</div><div class=\"line\">\t// accept message</div><div class=\"line\">\tlog.Printf(&quot;Begin to serve on %v&quot;, host)</div><div class=\"line\">\ts.Serve(lis)</div><div class=\"line\">\tlog.Println(&quot;Server is shutdown.&quot;)</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">// 给Data类型定义方法</div><div class=\"line\">func (t *Data) GetUser(ctx context.Context, request *account.UserRq) (response *account.UserRp, err error) &#123;</div><div class=\"line\">\tlog.Printf(&quot;To get user, request.Id: %v&quot;, request.Id)</div><div class=\"line\">\tresponse = &amp;account.UserRp&#123;</div><div class=\"line\">\t\tName: strconv.Itoa(int(request.Id)) + &quot;_test&quot;,</div><div class=\"line\">\t&#125;</div><div class=\"line\">\treturn response, err</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h4 id=\"5-客户端cli-go\"><a href=\"#5-客户端cli-go\" class=\"headerlink\" title=\"5. 客户端cli.go\"></a>5. 客户端cli.go</h4><figure class=\"highlight golang\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">package</span> main</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// created by moguang(moxiaomomo@gmail.com)</span></div><div class=\"line\"><span class=\"comment\">// created at 2016-01-10</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">import</span> (</div><div class=\"line\">\t<span class=\"string\">\"account\"</span></div><div class=\"line\">\t<span class=\"string\">\"golang.org/x/net/context\"</span></div><div class=\"line\">\t<span class=\"string\">\"google.golang.org/grpc\"</span></div><div class=\"line\">\t<span class=\"string\">\"log\"</span></div><div class=\"line\">\t<span class=\"string\">\"math/rand\"</span></div><div class=\"line\">\t<span class=\"string\">\"strconv\"</span></div><div class=\"line\">\t<span class=\"string\">\"strings\"</span></div><div class=\"line\">\t<span class=\"string\">\"sync\"</span></div><div class=\"line\">\t<span class=\"string\">\"time\"</span></div><div class=\"line\">)</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> (</div><div class=\"line\">\twg sync.WaitGroup</div><div class=\"line\">)</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">const</span> (</div><div class=\"line\">\tserver      = <span class=\"string\">\"127.0.0.1\"</span></div><div class=\"line\">\tport        = <span class=\"string\">\"8080\"</span></div><div class=\"line\">\tparallel    = <span class=\"number\">10</span> <span class=\"comment\">//连接并行数</span></div><div class=\"line\">\ttimes       = <span class=\"number\">10</span> <span class=\"comment\">//每连接请求次数</span></div><div class=\"line\">)</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</div><div class=\"line\">\tbeginTime := time.Now()</div><div class=\"line\">\t<span class=\"comment\">//结合WaitGroup, 实现并行请求</span></div><div class=\"line\">\t<span class=\"keyword\">for</span> i := <span class=\"number\">0</span>; i &lt; <span class=\"keyword\">int</span>(parallel); i++ &#123;</div><div class=\"line\">\t\twg.Add(<span class=\"number\">1</span>)</div><div class=\"line\">\t\t<span class=\"keyword\">go</span> execRPC(&amp;wg)</div><div class=\"line\">\t&#125;</div><div class=\"line\">\twg.Wait()</div><div class=\"line\"></div><div class=\"line\">\tendTime := time.Now()</div><div class=\"line\">\tlog.Printf(<span class=\"string\">\"Exec time secs: %.2f \"</span>, endTime.Sub(beginTime).Seconds())</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">execRPC</span><span class=\"params\">(wg *sync.WaitGroup)</span></span> &#123;</div><div class=\"line\">\t<span class=\"keyword\">defer</span> wg.Done()</div><div class=\"line\">\t<span class=\"comment\">// 建立连接</span></div><div class=\"line\">\thost := server + <span class=\"string\">\":\"</span> + port</div><div class=\"line\">\tconn, err := grpc.Dial(host, grpc.WithInsecure())</div><div class=\"line\">\t<span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</div><div class=\"line\">\t\tlog.Printf(<span class=\"string\">\"Dial Err: %v\"</span>, err)</div><div class=\"line\">\t\t<span class=\"keyword\">return</span></div><div class=\"line\">\t&#125;</div><div class=\"line\">\t<span class=\"keyword\">defer</span> conn.Close()</div><div class=\"line\"></div><div class=\"line\">\tclient := account.NewDataClient(conn)</div><div class=\"line\">\t<span class=\"comment\">// 连续发起多次请求</span></div><div class=\"line\">\t<span class=\"keyword\">for</span> i := <span class=\"number\">0</span>; i &lt; <span class=\"keyword\">int</span>(times); i++ &#123;</div><div class=\"line\">\t\tgetUser(client)</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">getUser</span><span class=\"params\">(client account.DataClient)</span></span> &#123;</div><div class=\"line\">\t<span class=\"keyword\">var</span> request account.UserRq</div><div class=\"line\">\tr := rand.Intn(parallel)</div><div class=\"line\">\trequest.Id = <span class=\"keyword\">int32</span>(r)</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"comment\">// 调用远程方法</span></div><div class=\"line\">\tresponse, _ := client.GetUser(context.Background(), &amp;request)</div><div class=\"line\">\t<span class=\"comment\">// 判断返回结果</span></div><div class=\"line\">\t<span class=\"keyword\">if</span> id, _ := strconv.Atoi(strings.Split(response.Name, <span class=\"string\">\":\"</span>)[<span class=\"number\">0</span>]); id != r &#123;</div><div class=\"line\">\t\tlog.Printf(<span class=\"string\">\"Response error %#v\"</span>, response)</div><div class=\"line\">\t&#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">\t\tlog.Printf(<span class=\"string\">\"Response ok %#v\"</span>, response)</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"<h4 id=\"关于gRPC\"><a href=\"#关于gRPC\" class=\"headerlink\" title=\"关于gRPC\"></a>关于gRPC</h4><p>gRPC是google公司面向移动应用, 基于http2.0协议标准而设计, 基于Protocol Buffers而开发的一种开源RPC框架。<br><br>ProtoBuf可以用于通讯协议、数据存储等一些语言/平台无关的数据序列化, 号称高性能, 通用性强, 具体可以看下这里的分析：<br><a href=\"https://www.ibm.com/developerworks/cn/linux/l-cn-gpb/\" target=\"_blank\" rel=\"external\">Google Protocol Buffer 的使用和原理</a><br><br>gRPC提供了一种相对简单的方法来精确地定义服务, 和为ios/andoird/后台服务自动生成可靠的数据结构功能库; 通过它可以节省带宽和CPU资源, 降低TCP连接次数, 和延长电池寿命。<br>","more":"</p>\n<h4 id=\"1-安装protobuf与gRPC-of-go\"><a href=\"#1-安装protobuf与gRPC-of-go\" class=\"headerlink\" title=\"1.安装protobuf与gRPC of go\"></a>1.安装protobuf与gRPC of go</h4><p>去到<a href=\"https://github.com/google/protobuf/releases\" target=\"_blank\" rel=\"external\">Protocol Buffers</a>下载器最新版。 笔者当前获取的版本为3.0.0, 安装过程如下：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">tar -zxf protobuf-cpp-3.0.0-beta-2.tar.gz</div><div class=\"line\">cd protobuf-3.0.0-beta-2/</div><div class=\"line\">./configure</div><div class=\"line\">make &amp;&amp; sudo make install</div><div class=\"line\">go get -u github.com/golang/protobuf/protoc-gen-go   # proto for golang</div><div class=\"line\">go get -u google.golang.org/grpc                     # grpc for golang</div></pre></td></tr></table></figure></p>\n<h4 id=\"2-定义proto文件\"><a href=\"#2-定义proto文件\" class=\"headerlink\" title=\"2.定义proto文件\"></a>2.定义proto文件</h4><figure class=\"highlight protobuf\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\">//protobuf3 protocol</div><div class=\"line\">syntax = &quot;proto3&quot;;</div><div class=\"line\">package account;</div><div class=\"line\"></div><div class=\"line\">// request struct</div><div class=\"line\">message UserRq &#123;</div><div class=\"line\">    int32 id = 1;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">// response struct</div><div class=\"line\">message UserRp &#123;</div><div class=\"line\">    string name = 1;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">// service</div><div class=\"line\">service Data &#123;</div><div class=\"line\">    rpc GetUser(UserRq) returns (UserRp);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>上面定义了一个服务Data，有一个API叫GetUser，接收参数类型UserRq, 返回参数类型UserRp。</p>\n<p><br>在proto中, service可以定义server， 有四种实现方式:(参考<a href=\"http://www.jianshu.com/p/774b38306c30\" target=\"_blank\" rel=\"external\">http://www.jianshu.com/p/774b38306c30</a>)</p>\n<ul>\n<li><p>rpc GetFeature(Point) returns (Feature) {}<br><br>类似普通的函数调用，客户端发送请求Point到服务器，服务器返回相应Feature.</p>\n</li>\n<li><p>rpc ListFeatures(Rectangle) returns (stream Feature) {}<br><br>客户端发起一次请求，服务器端返回一个流式数据，比如一个数组中的逐个元素</p>\n</li>\n<li><p>rpc RecordRoute(stream Point) returns (RouteSummary) {}<br><br>客户端发起的请求是一个流式的数据，比如数组中的逐个元素，服务器返回一个相应</p>\n</li>\n<li><p>rpc RouteChat(stream RouteNote) returns (stream RouteNote) {}<br><br>客户端发起的请求是一个流式数据，比如数组中的逐个元素，二服务器返回的也是一个类似的数据结构</p>\n</li>\n</ul>\n<p>上面的proto定义实现的是第一种方式。</p>\n<h4 id=\"3-使用protoc-command生成go源文件\"><a href=\"#3-使用protoc-command生成go源文件\" class=\"headerlink\" title=\"3.使用protoc command生成go源文件\"></a>3.使用protoc command生成go源文件</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">protoc --go_out=plugins=grpc:. account.proto</div><div class=\"line\">ls</div><div class=\"line\">account.pb.go  account.proto</div></pre></td></tr></table></figure>\n<p>通过protoc生成了account.pb.go，其源码看起来是这样子的:<br><figure class=\"highlight golang\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div><div class=\"line\">94</div><div class=\"line\">95</div><div class=\"line\">96</div><div class=\"line\">97</div><div class=\"line\">98</div><div class=\"line\">99</div><div class=\"line\">100</div><div class=\"line\">101</div><div class=\"line\">102</div><div class=\"line\">103</div><div class=\"line\">104</div><div class=\"line\">105</div><div class=\"line\">106</div><div class=\"line\">107</div><div class=\"line\">108</div><div class=\"line\">109</div><div class=\"line\">110</div><div class=\"line\">111</div><div class=\"line\">112</div><div class=\"line\">113</div><div class=\"line\">114</div><div class=\"line\">115</div><div class=\"line\">116</div><div class=\"line\">117</div><div class=\"line\">118</div><div class=\"line\">119</div><div class=\"line\">120</div><div class=\"line\">121</div><div class=\"line\">122</div><div class=\"line\">123</div><div class=\"line\">124</div><div class=\"line\">125</div><div class=\"line\">126</div><div class=\"line\">127</div><div class=\"line\">128</div><div class=\"line\">129</div><div class=\"line\">130</div><div class=\"line\">131</div><div class=\"line\">132</div><div class=\"line\">133</div><div class=\"line\">134</div><div class=\"line\">135</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// Code generated by protoc-gen-go.</span></div><div class=\"line\"><span class=\"comment\">// source: account.proto</span></div><div class=\"line\"><span class=\"comment\">// DO NOT EDIT!</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/*</span></div><div class=\"line\">Package account is a generated protocol buffer package.</div><div class=\"line\"></div><div class=\"line\">It is generated from these files:</div><div class=\"line\">\taccount.proto</div><div class=\"line\"></div><div class=\"line\">It has these top-level messages:</div><div class=\"line\">\tUserRq</div><div class=\"line\">\tUserRp</div><div class=\"line\">*/</div><div class=\"line\"><span class=\"keyword\">package</span> account</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">import</span> proto <span class=\"string\">\"github.com/golang/protobuf/proto\"</span></div><div class=\"line\"><span class=\"keyword\">import</span> fmt <span class=\"string\">\"fmt\"</span></div><div class=\"line\"><span class=\"keyword\">import</span> math <span class=\"string\">\"math\"</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">import</span> (</div><div class=\"line\">\tcontext <span class=\"string\">\"golang.org/x/net/context\"</span></div><div class=\"line\">\tgrpc <span class=\"string\">\"google.golang.org/grpc\"</span></div><div class=\"line\">)</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// Reference imports to suppress errors if they are not otherwise used.</span></div><div class=\"line\"><span class=\"keyword\">var</span> _ = proto.Marshal</div><div class=\"line\"><span class=\"keyword\">var</span> _ = fmt.Errorf</div><div class=\"line\"><span class=\"keyword\">var</span> _ = math.Inf</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// This is a compile-time assertion to ensure that this generated file</span></div><div class=\"line\"><span class=\"comment\">// is compatible with the proto package it is being compiled against.</span></div><div class=\"line\"><span class=\"keyword\">const</span> _ = proto.ProtoPackageIsVersion1</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// request struct</span></div><div class=\"line\"><span class=\"keyword\">type</span> UserRq <span class=\"keyword\">struct</span> &#123;</div><div class=\"line\">\tId <span class=\"keyword\">int32</span> <span class=\"string\">`protobuf:\"varint,1,opt,name=id\" json:\"id,omitempty\"`</span></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(m *UserRq)</span> <span class=\"title\">Reset</span><span class=\"params\">()</span></span>                    &#123; *m = UserRq&#123;&#125; &#125;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(m *UserRq)</span> <span class=\"title\">String</span><span class=\"params\">()</span> <span class=\"title\">string</span></span>            &#123; <span class=\"keyword\">return</span> proto.CompactTextString(m) &#125;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(*UserRq)</span> <span class=\"title\">ProtoMessage</span><span class=\"params\">()</span></span>               &#123;&#125;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(*UserRq)</span> <span class=\"title\">Descriptor</span><span class=\"params\">()</span> <span class=\"params\">([]<span class=\"keyword\">byte</span>, []<span class=\"keyword\">int</span>)</span></span> &#123; <span class=\"keyword\">return</span> fileDescriptor0, []<span class=\"keyword\">int</span>&#123;<span class=\"number\">0</span>&#125; &#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// response struct</span></div><div class=\"line\"><span class=\"keyword\">type</span> UserRp <span class=\"keyword\">struct</span> &#123;</div><div class=\"line\">\tName <span class=\"keyword\">string</span> <span class=\"string\">`protobuf:\"bytes,1,opt,name=name\" json:\"name,omitempty\"`</span></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(m *UserRp)</span> <span class=\"title\">Reset</span><span class=\"params\">()</span></span>                    &#123; *m = UserRp&#123;&#125; &#125;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(m *UserRp)</span> <span class=\"title\">String</span><span class=\"params\">()</span> <span class=\"title\">string</span></span>            &#123; <span class=\"keyword\">return</span> proto.CompactTextString(m) &#125;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(*UserRp)</span> <span class=\"title\">ProtoMessage</span><span class=\"params\">()</span></span>               &#123;&#125;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(*UserRp)</span> <span class=\"title\">Descriptor</span><span class=\"params\">()</span> <span class=\"params\">([]<span class=\"keyword\">byte</span>, []<span class=\"keyword\">int</span>)</span></span> &#123; <span class=\"keyword\">return</span> fileDescriptor0, []<span class=\"keyword\">int</span>&#123;<span class=\"number\">1</span>&#125; &#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">init</span><span class=\"params\">()</span></span> &#123;</div><div class=\"line\">\tproto.RegisterType((*UserRq)(<span class=\"literal\">nil</span>), <span class=\"string\">\"account.UserRq\"</span>)</div><div class=\"line\">\tproto.RegisterType((*UserRp)(<span class=\"literal\">nil</span>), <span class=\"string\">\"account.UserRp\"</span>)</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// Reference imports to suppress errors if they are not otherwise used.</span></div><div class=\"line\"><span class=\"keyword\">var</span> _ context.Context</div><div class=\"line\"><span class=\"keyword\">var</span> _ grpc.ClientConn</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// This is a compile-time assertion to ensure that this generated file</span></div><div class=\"line\"><span class=\"comment\">// is compatible with the grpc package it is being compiled against.</span></div><div class=\"line\"><span class=\"keyword\">const</span> _ = grpc.SupportPackageIsVersion1</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// Client API for Data service</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">type</span> DataClient <span class=\"keyword\">interface</span> &#123;</div><div class=\"line\">\tGetUser(ctx context.Context, in *UserRq, opts ...grpc.CallOption) (*UserRp, error)</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">type</span> dataClient <span class=\"keyword\">struct</span> &#123;</div><div class=\"line\">\tcc *grpc.ClientConn</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">NewDataClient</span><span class=\"params\">(cc *grpc.ClientConn)</span> <span class=\"title\">DataClient</span></span> &#123;</div><div class=\"line\">\t<span class=\"keyword\">return</span> &amp;dataClient&#123;cc&#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(c *dataClient)</span> <span class=\"title\">GetUser</span><span class=\"params\">(ctx context.Context, in *UserRq, opts ...grpc.CallOption)</span> <span class=\"params\">(*UserRp, error)</span></span> &#123;</div><div class=\"line\">\tout := <span class=\"built_in\">new</span>(UserRp)</div><div class=\"line\">\terr := grpc.Invoke(ctx, <span class=\"string\">\"/account.Data/GetUser\"</span>, in, out, c.cc, opts...)</div><div class=\"line\">\t<span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"literal\">nil</span>, err</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t<span class=\"keyword\">return</span> out, <span class=\"literal\">nil</span></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// Server API for Data service</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">type</span> DataServer <span class=\"keyword\">interface</span> &#123;</div><div class=\"line\">\tGetUser(context.Context, *UserRq) (*UserRp, error)</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">RegisterDataServer</span><span class=\"params\">(s *grpc.Server, srv DataServer)</span></span> &#123;</div><div class=\"line\">\ts.RegisterService(&amp;_Data_serviceDesc, srv)</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> _<span class=\"title\">Data_GetUser_Handler</span><span class=\"params\">(srv <span class=\"keyword\">interface</span>&#123;&#125;, ctx context.Context, dec <span class=\"keyword\">func</span>(<span class=\"keyword\">interface</span>&#123;&#125;)</span> <span class=\"title\">error</span>) <span class=\"params\">(<span class=\"keyword\">interface</span>&#123;&#125;, error)</span></span> &#123;</div><div class=\"line\">\tin := <span class=\"built_in\">new</span>(UserRq)</div><div class=\"line\">\t<span class=\"keyword\">if</span> err := dec(in); err != <span class=\"literal\">nil</span> &#123;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"literal\">nil</span>, err</div><div class=\"line\">\t&#125;</div><div class=\"line\">\tout, err := srv.(DataServer).GetUser(ctx, in)</div><div class=\"line\">\t<span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"literal\">nil</span>, err</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t<span class=\"keyword\">return</span> out, <span class=\"literal\">nil</span></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> _Data_serviceDesc = grpc.ServiceDesc&#123;</div><div class=\"line\">\tServiceName: <span class=\"string\">\"account.Data\"</span>,</div><div class=\"line\">\tHandlerType: (*DataServer)(<span class=\"literal\">nil</span>),</div><div class=\"line\">\tMethods: []grpc.MethodDesc&#123;</div><div class=\"line\">\t\t&#123;</div><div class=\"line\">\t\t\tMethodName: <span class=\"string\">\"GetUser\"</span>,</div><div class=\"line\">\t\t\tHandler:    _Data_GetUser_Handler,</div><div class=\"line\">\t\t&#125;,</div><div class=\"line\">\t&#125;,</div><div class=\"line\">\tStreams: []grpc.StreamDesc&#123;&#125;,</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> fileDescriptor0 = []<span class=\"keyword\">byte</span>&#123;</div><div class=\"line\">\t<span class=\"comment\">// 119 bytes of a gzipped FileDescriptorProto</span></div><div class=\"line\">\t<span class=\"number\">0x1f</span>, <span class=\"number\">0x8b</span>, <span class=\"number\">0x08</span>, <span class=\"number\">0x00</span>, <span class=\"number\">0x00</span>, <span class=\"number\">0x09</span>, <span class=\"number\">0x6e</span>, <span class=\"number\">0x88</span>, <span class=\"number\">0x02</span>, <span class=\"number\">0xff</span>, <span class=\"number\">0xe2</span>, <span class=\"number\">0xe2</span>, <span class=\"number\">0x4d</span>, <span class=\"number\">0x4c</span>, <span class=\"number\">0x4e</span>, <span class=\"number\">0xce</span>,</div><div class=\"line\">\t<span class=\"number\">0x2f</span>, <span class=\"number\">0xcd</span>, <span class=\"number\">0x2b</span>, <span class=\"number\">0xd1</span>, <span class=\"number\">0x2b</span>, <span class=\"number\">0x28</span>, <span class=\"number\">0xca</span>, <span class=\"number\">0x2f</span>, <span class=\"number\">0xc9</span>, <span class=\"number\">0x17</span>, <span class=\"number\">0x62</span>, <span class=\"number\">0x87</span>, <span class=\"number\">0x72</span>, <span class=\"number\">0x95</span>, <span class=\"number\">0x24</span>, <span class=\"number\">0xb8</span>,</div><div class=\"line\">\t<span class=\"number\">0xd8</span>, <span class=\"number\">0x42</span>, <span class=\"number\">0x8b</span>, <span class=\"number\">0x53</span>, <span class=\"number\">0x8b</span>, <span class=\"number\">0x82</span>, <span class=\"number\">0x0a</span>, <span class=\"number\">0x85</span>, <span class=\"number\">0xf8</span>, <span class=\"number\">0xb8</span>, <span class=\"number\">0x98</span>, <span class=\"number\">0x32</span>, <span class=\"number\">0x53</span>, <span class=\"number\">0x24</span>, <span class=\"number\">0x18</span>, <span class=\"number\">0x15</span>,</div><div class=\"line\">\t<span class=\"number\">0x18</span>, <span class=\"number\">0x35</span>, <span class=\"number\">0x58</span>, <span class=\"number\">0x83</span>, <span class=\"number\">0x80</span>, <span class=\"number\">0x2c</span>, <span class=\"number\">0x25</span>, <span class=\"number\">0x19</span>, <span class=\"number\">0xa8</span>, <span class=\"number\">0x4c</span>, <span class=\"number\">0x81</span>, <span class=\"number\">0x90</span>, <span class=\"number\">0x10</span>, <span class=\"number\">0x17</span>, <span class=\"number\">0x4b</span>, <span class=\"number\">0x5e</span>,</div><div class=\"line\">\t<span class=\"number\">0x62</span>, <span class=\"number\">0x6e</span>, <span class=\"number\">0x2a</span>, <span class=\"number\">0x58</span>, <span class=\"number\">0x8e</span>, <span class=\"number\">0x33</span>, <span class=\"number\">0x08</span>, <span class=\"number\">0xcc</span>, <span class=\"number\">0x36</span>, <span class=\"number\">0x32</span>, <span class=\"number\">0xe6</span>, <span class=\"number\">0x62</span>, <span class=\"number\">0x71</span>, <span class=\"number\">0x49</span>, <span class=\"number\">0x2c</span>, <span class=\"number\">0x49</span>,</div><div class=\"line\">\t<span class=\"number\">0x14</span>, <span class=\"number\">0xd2</span>, <span class=\"number\">0xe6</span>, <span class=\"number\">0x62</span>, <span class=\"number\">0x77</span>, <span class=\"number\">0x4f</span>, <span class=\"number\">0x2d</span>, <span class=\"number\">0x01</span>, <span class=\"number\">0x29</span>, <span class=\"number\">0x14</span>, <span class=\"number\">0xe2</span>, <span class=\"number\">0xd7</span>, <span class=\"number\">0x83</span>, <span class=\"number\">0xd9</span>, <span class=\"number\">0x01</span>, <span class=\"number\">0x31</span>,</div><div class=\"line\">\t<span class=\"number\">0x51</span>, <span class=\"number\">0x0a</span>, <span class=\"number\">0x4d</span>, <span class=\"number\">0xa0</span>, <span class=\"number\">0x20</span>, <span class=\"number\">0x89</span>, <span class=\"number\">0x0d</span>, <span class=\"number\">0x6c</span>, <span class=\"number\">0xb9</span>, <span class=\"number\">0x31</span>, <span class=\"number\">0x20</span>, <span class=\"number\">0x00</span>, <span class=\"number\">0x00</span>, <span class=\"number\">0xff</span>, <span class=\"number\">0xff</span>, <span class=\"number\">0xa6</span>,</div><div class=\"line\">\t<span class=\"number\">0x63</span>, <span class=\"number\">0xe9</span>, <span class=\"number\">0x2f</span>, <span class=\"number\">0x8d</span>, <span class=\"number\">0x00</span>, <span class=\"number\">0x00</span>, <span class=\"number\">0x00</span>,</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<h4 id=\"4-服务端svr-go\"><a href=\"#4-服务端svr-go\" class=\"headerlink\" title=\"4. 服务端svr.go\"></a>4. 服务端svr.go</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div></pre></td><td class=\"code\"><pre><div class=\"line\">package main</div><div class=\"line\"></div><div class=\"line\">// created by moguang(moxiaomomo@gmail.com)</div><div class=\"line\">// created at 2016-01-10</div><div class=\"line\"></div><div class=\"line\">import (</div><div class=\"line\">\t&quot;account&quot;</div><div class=\"line\">\t&quot;golang.org/x/net/context&quot;</div><div class=\"line\">\t&quot;google.golang.org/grpc&quot;</div><div class=\"line\">\t&quot;log&quot;</div><div class=\"line\">\t&quot;net&quot;</div><div class=\"line\">\t&quot;strconv&quot;</div><div class=\"line\">)</div><div class=\"line\"></div><div class=\"line\">type Data struct&#123;&#125;</div><div class=\"line\"></div><div class=\"line\">func main() &#123;</div><div class=\"line\">\thost := &quot;127.0.0.1:8080&quot;</div><div class=\"line\">\t//listen on port</div><div class=\"line\">\tlis, err := net.Listen(&quot;tcp&quot;, host)</div><div class=\"line\">\tif err != nil &#123;</div><div class=\"line\">\t\tlog.Fatalf(&quot;Failed to listen: %v&quot;, err)</div><div class=\"line\">\t&#125;</div><div class=\"line\">\ts := grpc.NewServer()</div><div class=\"line\">\taccount.RegisterDataServer(s, &amp;Data&#123;&#125;)</div><div class=\"line\">\t// accept message</div><div class=\"line\">\tlog.Printf(&quot;Begin to serve on %v&quot;, host)</div><div class=\"line\">\ts.Serve(lis)</div><div class=\"line\">\tlog.Println(&quot;Server is shutdown.&quot;)</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">// 给Data类型定义方法</div><div class=\"line\">func (t *Data) GetUser(ctx context.Context, request *account.UserRq) (response *account.UserRp, err error) &#123;</div><div class=\"line\">\tlog.Printf(&quot;To get user, request.Id: %v&quot;, request.Id)</div><div class=\"line\">\tresponse = &amp;account.UserRp&#123;</div><div class=\"line\">\t\tName: strconv.Itoa(int(request.Id)) + &quot;_test&quot;,</div><div class=\"line\">\t&#125;</div><div class=\"line\">\treturn response, err</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h4 id=\"5-客户端cli-go\"><a href=\"#5-客户端cli-go\" class=\"headerlink\" title=\"5. 客户端cli.go\"></a>5. 客户端cli.go</h4><figure class=\"highlight golang\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">package</span> main</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// created by moguang(moxiaomomo@gmail.com)</span></div><div class=\"line\"><span class=\"comment\">// created at 2016-01-10</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">import</span> (</div><div class=\"line\">\t<span class=\"string\">\"account\"</span></div><div class=\"line\">\t<span class=\"string\">\"golang.org/x/net/context\"</span></div><div class=\"line\">\t<span class=\"string\">\"google.golang.org/grpc\"</span></div><div class=\"line\">\t<span class=\"string\">\"log\"</span></div><div class=\"line\">\t<span class=\"string\">\"math/rand\"</span></div><div class=\"line\">\t<span class=\"string\">\"strconv\"</span></div><div class=\"line\">\t<span class=\"string\">\"strings\"</span></div><div class=\"line\">\t<span class=\"string\">\"sync\"</span></div><div class=\"line\">\t<span class=\"string\">\"time\"</span></div><div class=\"line\">)</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> (</div><div class=\"line\">\twg sync.WaitGroup</div><div class=\"line\">)</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">const</span> (</div><div class=\"line\">\tserver      = <span class=\"string\">\"127.0.0.1\"</span></div><div class=\"line\">\tport        = <span class=\"string\">\"8080\"</span></div><div class=\"line\">\tparallel    = <span class=\"number\">10</span> <span class=\"comment\">//连接并行数</span></div><div class=\"line\">\ttimes       = <span class=\"number\">10</span> <span class=\"comment\">//每连接请求次数</span></div><div class=\"line\">)</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</div><div class=\"line\">\tbeginTime := time.Now()</div><div class=\"line\">\t<span class=\"comment\">//结合WaitGroup, 实现并行请求</span></div><div class=\"line\">\t<span class=\"keyword\">for</span> i := <span class=\"number\">0</span>; i &lt; <span class=\"keyword\">int</span>(parallel); i++ &#123;</div><div class=\"line\">\t\twg.Add(<span class=\"number\">1</span>)</div><div class=\"line\">\t\t<span class=\"keyword\">go</span> execRPC(&amp;wg)</div><div class=\"line\">\t&#125;</div><div class=\"line\">\twg.Wait()</div><div class=\"line\"></div><div class=\"line\">\tendTime := time.Now()</div><div class=\"line\">\tlog.Printf(<span class=\"string\">\"Exec time secs: %.2f \"</span>, endTime.Sub(beginTime).Seconds())</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">execRPC</span><span class=\"params\">(wg *sync.WaitGroup)</span></span> &#123;</div><div class=\"line\">\t<span class=\"keyword\">defer</span> wg.Done()</div><div class=\"line\">\t<span class=\"comment\">// 建立连接</span></div><div class=\"line\">\thost := server + <span class=\"string\">\":\"</span> + port</div><div class=\"line\">\tconn, err := grpc.Dial(host, grpc.WithInsecure())</div><div class=\"line\">\t<span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</div><div class=\"line\">\t\tlog.Printf(<span class=\"string\">\"Dial Err: %v\"</span>, err)</div><div class=\"line\">\t\t<span class=\"keyword\">return</span></div><div class=\"line\">\t&#125;</div><div class=\"line\">\t<span class=\"keyword\">defer</span> conn.Close()</div><div class=\"line\"></div><div class=\"line\">\tclient := account.NewDataClient(conn)</div><div class=\"line\">\t<span class=\"comment\">// 连续发起多次请求</span></div><div class=\"line\">\t<span class=\"keyword\">for</span> i := <span class=\"number\">0</span>; i &lt; <span class=\"keyword\">int</span>(times); i++ &#123;</div><div class=\"line\">\t\tgetUser(client)</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">getUser</span><span class=\"params\">(client account.DataClient)</span></span> &#123;</div><div class=\"line\">\t<span class=\"keyword\">var</span> request account.UserRq</div><div class=\"line\">\tr := rand.Intn(parallel)</div><div class=\"line\">\trequest.Id = <span class=\"keyword\">int32</span>(r)</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"comment\">// 调用远程方法</span></div><div class=\"line\">\tresponse, _ := client.GetUser(context.Background(), &amp;request)</div><div class=\"line\">\t<span class=\"comment\">// 判断返回结果</span></div><div class=\"line\">\t<span class=\"keyword\">if</span> id, _ := strconv.Atoi(strings.Split(response.Name, <span class=\"string\">\":\"</span>)[<span class=\"number\">0</span>]); id != r &#123;</div><div class=\"line\">\t\tlog.Printf(<span class=\"string\">\"Response error %#v\"</span>, response)</div><div class=\"line\">\t&#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">\t\tlog.Printf(<span class=\"string\">\"Response ok %#v\"</span>, response)</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>"},{"title":"[golang]goroutine学习小结","date":"2016-03-03T01:34:55.000Z","_content":"\n关于gorountine的特性, 我还是借鉴以下这篇文章来学习和总结一下, 至于一些用法在下一节channel再进行小结。\n\n源地址:\n[goroutine背后的系统知识](http://www.infoq.com/cn/articles/knowledge-behind-goroutine \"goroutine\")\n\n节选(goroutine的特性):\n\n>1.Go语言通过goroutine提供了目前为止所有(我所了解的)语言里对于并发编程的最清晰最直接的支持，Go语言的文档里对其特性也描述的非常全面甚至超过了，在这里，基于我们上面的系统知识介绍，列举一下goroutine的特性，算是小结：\n<!--more-->\n\n>2.goroutine是Go语言运行库的功能，不是操作系统提供的功能，goroutine不是用线程实现的。具体可参见Go语言源码里的pkg/runtime/proc.c\n\n>3.goroutine就是一段代码，一个函数入口，以及在堆上为其分配的一个堆栈。所以它非常廉价，我们可以很轻松的创建上万个goroutine，但它们并不是被操作系统所调度执行\n\n>4.除了被系统调用阻塞的线程外，Go运行库最多会启动$GOMAXPROCS个线程来运行goroutine\n\n>5.goroutine是协作式调度的，如果goroutine会执行很长时间，而且不是通过等待读取或写入channel的数据来同步的话，就需要主动调用Gosched()来让出CPU\n\n>6.和所有其他并发框架里的协程一样，goroutine里所谓“无锁”的优点只在单线程下有效，如果$GOMAXPROCS > 1并且协程间需要通信，Go运行库会负责加锁保护数据，这也是为什么sieve.go这样的例子在多CPU多线程时反而更慢的原因\n\n>7.Web等服务端程序要处理的请求从本质上来讲是并行处理的问题，每个请求基本独立，互不依赖，几乎没有数据交互，这不是一个并发编程的模型，而并发编程框架只是解决了其语义表述的复杂性，并不是从根本上提高处理的效率，也许是并发连接和并发编程的英文都是concurrent吧，很容易产生“并发编程框架和coroutine可以高效处理大量并发连接”的误解。\n\n>8.Go语言运行库封装了异步IO，所以可以写出貌似并发数很多的服务端，可即使我们通过调整$GOMAXPROCS来充分利用多核CPU并行处理，其效率也不如我们利用IO事件驱动设计的、按照事务类型划分好合适比例的线程池。在响应时间上，协作式调度是硬伤。\n\n>9.goroutine最大的价值是其实现了并发协程和实际并行执行的线程的映射以及动态扩展，随着其运行库的不断发展和完善，其性能一定会越来越好，尤其是在CPU核数越来越多的未来，终有一天我们会为了代码的简洁和可维护性而放弃那一点点性能的差别。\n","source":"_posts/golang/golang_goroutine.md","raw":"---\ntitle: '[golang]goroutine学习小结'\ndate: 2016-03-03 09:34:55\ntags: golang\n---\n\n关于gorountine的特性, 我还是借鉴以下这篇文章来学习和总结一下, 至于一些用法在下一节channel再进行小结。\n\n源地址:\n[goroutine背后的系统知识](http://www.infoq.com/cn/articles/knowledge-behind-goroutine \"goroutine\")\n\n节选(goroutine的特性):\n\n>1.Go语言通过goroutine提供了目前为止所有(我所了解的)语言里对于并发编程的最清晰最直接的支持，Go语言的文档里对其特性也描述的非常全面甚至超过了，在这里，基于我们上面的系统知识介绍，列举一下goroutine的特性，算是小结：\n<!--more-->\n\n>2.goroutine是Go语言运行库的功能，不是操作系统提供的功能，goroutine不是用线程实现的。具体可参见Go语言源码里的pkg/runtime/proc.c\n\n>3.goroutine就是一段代码，一个函数入口，以及在堆上为其分配的一个堆栈。所以它非常廉价，我们可以很轻松的创建上万个goroutine，但它们并不是被操作系统所调度执行\n\n>4.除了被系统调用阻塞的线程外，Go运行库最多会启动$GOMAXPROCS个线程来运行goroutine\n\n>5.goroutine是协作式调度的，如果goroutine会执行很长时间，而且不是通过等待读取或写入channel的数据来同步的话，就需要主动调用Gosched()来让出CPU\n\n>6.和所有其他并发框架里的协程一样，goroutine里所谓“无锁”的优点只在单线程下有效，如果$GOMAXPROCS > 1并且协程间需要通信，Go运行库会负责加锁保护数据，这也是为什么sieve.go这样的例子在多CPU多线程时反而更慢的原因\n\n>7.Web等服务端程序要处理的请求从本质上来讲是并行处理的问题，每个请求基本独立，互不依赖，几乎没有数据交互，这不是一个并发编程的模型，而并发编程框架只是解决了其语义表述的复杂性，并不是从根本上提高处理的效率，也许是并发连接和并发编程的英文都是concurrent吧，很容易产生“并发编程框架和coroutine可以高效处理大量并发连接”的误解。\n\n>8.Go语言运行库封装了异步IO，所以可以写出貌似并发数很多的服务端，可即使我们通过调整$GOMAXPROCS来充分利用多核CPU并行处理，其效率也不如我们利用IO事件驱动设计的、按照事务类型划分好合适比例的线程池。在响应时间上，协作式调度是硬伤。\n\n>9.goroutine最大的价值是其实现了并发协程和实际并行执行的线程的映射以及动态扩展，随着其运行库的不断发展和完善，其性能一定会越来越好，尤其是在CPU核数越来越多的未来，终有一天我们会为了代码的简洁和可维护性而放弃那一点点性能的差别。\n","slug":"golang/golang_goroutine","published":1,"updated":"2017-08-07T05:47:10.146Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj61qjry00007dd4dxid1r2n5","content":"<p>关于gorountine的特性, 我还是借鉴以下这篇文章来学习和总结一下, 至于一些用法在下一节channel再进行小结。</p>\n<p>源地址:<br><a href=\"http://www.infoq.com/cn/articles/knowledge-behind-goroutine\" title=\"goroutine\" target=\"_blank\" rel=\"external\">goroutine背后的系统知识</a></p>\n<p>节选(goroutine的特性):</p>\n<blockquote>\n<p>1.Go语言通过goroutine提供了目前为止所有(我所了解的)语言里对于并发编程的最清晰最直接的支持，Go语言的文档里对其特性也描述的非常全面甚至超过了，在这里，基于我们上面的系统知识介绍，列举一下goroutine的特性，算是小结：<br><a id=\"more\"></a></p>\n<p>2.goroutine是Go语言运行库的功能，不是操作系统提供的功能，goroutine不是用线程实现的。具体可参见Go语言源码里的pkg/runtime/proc.c</p>\n<p>3.goroutine就是一段代码，一个函数入口，以及在堆上为其分配的一个堆栈。所以它非常廉价，我们可以很轻松的创建上万个goroutine，但它们并不是被操作系统所调度执行</p>\n<p>4.除了被系统调用阻塞的线程外，Go运行库最多会启动$GOMAXPROCS个线程来运行goroutine</p>\n<p>5.goroutine是协作式调度的，如果goroutine会执行很长时间，而且不是通过等待读取或写入channel的数据来同步的话，就需要主动调用Gosched()来让出CPU</p>\n<p>6.和所有其他并发框架里的协程一样，goroutine里所谓“无锁”的优点只在单线程下有效，如果$GOMAXPROCS &gt; 1并且协程间需要通信，Go运行库会负责加锁保护数据，这也是为什么sieve.go这样的例子在多CPU多线程时反而更慢的原因</p>\n<p>7.Web等服务端程序要处理的请求从本质上来讲是并行处理的问题，每个请求基本独立，互不依赖，几乎没有数据交互，这不是一个并发编程的模型，而并发编程框架只是解决了其语义表述的复杂性，并不是从根本上提高处理的效率，也许是并发连接和并发编程的英文都是concurrent吧，很容易产生“并发编程框架和coroutine可以高效处理大量并发连接”的误解。</p>\n<p>8.Go语言运行库封装了异步IO，所以可以写出貌似并发数很多的服务端，可即使我们通过调整$GOMAXPROCS来充分利用多核CPU并行处理，其效率也不如我们利用IO事件驱动设计的、按照事务类型划分好合适比例的线程池。在响应时间上，协作式调度是硬伤。</p>\n<p>9.goroutine最大的价值是其实现了并发协程和实际并行执行的线程的映射以及动态扩展，随着其运行库的不断发展和完善，其性能一定会越来越好，尤其是在CPU核数越来越多的未来，终有一天我们会为了代码的简洁和可维护性而放弃那一点点性能的差别。</p>\n</blockquote>\n","site":{"data":{}},"excerpt":"<p>关于gorountine的特性, 我还是借鉴以下这篇文章来学习和总结一下, 至于一些用法在下一节channel再进行小结。</p>\n<p>源地址:<br><a href=\"http://www.infoq.com/cn/articles/knowledge-behind-goroutine\" title=\"goroutine\" target=\"_blank\" rel=\"external\">goroutine背后的系统知识</a></p>\n<p>节选(goroutine的特性):</p>\n<blockquote>\n<p>1.Go语言通过goroutine提供了目前为止所有(我所了解的)语言里对于并发编程的最清晰最直接的支持，Go语言的文档里对其特性也描述的非常全面甚至超过了，在这里，基于我们上面的系统知识介绍，列举一下goroutine的特性，算是小结：<br>","more":"</p>\n<p>2.goroutine是Go语言运行库的功能，不是操作系统提供的功能，goroutine不是用线程实现的。具体可参见Go语言源码里的pkg/runtime/proc.c</p>\n<p>3.goroutine就是一段代码，一个函数入口，以及在堆上为其分配的一个堆栈。所以它非常廉价，我们可以很轻松的创建上万个goroutine，但它们并不是被操作系统所调度执行</p>\n<p>4.除了被系统调用阻塞的线程外，Go运行库最多会启动$GOMAXPROCS个线程来运行goroutine</p>\n<p>5.goroutine是协作式调度的，如果goroutine会执行很长时间，而且不是通过等待读取或写入channel的数据来同步的话，就需要主动调用Gosched()来让出CPU</p>\n<p>6.和所有其他并发框架里的协程一样，goroutine里所谓“无锁”的优点只在单线程下有效，如果$GOMAXPROCS &gt; 1并且协程间需要通信，Go运行库会负责加锁保护数据，这也是为什么sieve.go这样的例子在多CPU多线程时反而更慢的原因</p>\n<p>7.Web等服务端程序要处理的请求从本质上来讲是并行处理的问题，每个请求基本独立，互不依赖，几乎没有数据交互，这不是一个并发编程的模型，而并发编程框架只是解决了其语义表述的复杂性，并不是从根本上提高处理的效率，也许是并发连接和并发编程的英文都是concurrent吧，很容易产生“并发编程框架和coroutine可以高效处理大量并发连接”的误解。</p>\n<p>8.Go语言运行库封装了异步IO，所以可以写出貌似并发数很多的服务端，可即使我们通过调整$GOMAXPROCS来充分利用多核CPU并行处理，其效率也不如我们利用IO事件驱动设计的、按照事务类型划分好合适比例的线程池。在响应时间上，协作式调度是硬伤。</p>\n<p>9.goroutine最大的价值是其实现了并发协程和实际并行执行的线程的映射以及动态扩展，随着其运行库的不断发展和完善，其性能一定会越来越好，尤其是在CPU核数越来越多的未来，终有一天我们会为了代码的简洁和可维护性而放弃那一点点性能的差别。</p>\n</blockquote>"},{"title":"[golang]HTTP webserver","date":"2016-12-03T06:11:45.000Z","_content":"\n### 简单示例\ngolang对http网络模块有比较完备的标准库支持, 如下示例:\n\n<!--more-->\n\n```golang\npackage main\n\nimport (\n    \"io\"\n    \"net/http\"\n    \"log\"\n)\n\n\nfunc LogicServer(w http.ResponseWriter, req *http.Request) {\n    io.WriteString(w, \"I'm logic server.\")\n}\n\n\nfunc main() {\n    http.HandleFunc(\"/test\", LogicServer)\n    err := http.ListenAndServe(\":8888\", nil)\n    if err != nil {\n        log.Fatal(\"ListenAndServe Err:\", err)\n    }\n}\n```\n运行效果:\n```bash\nxiaomo@XIAOMO:~$ curl \"http://127.0.0.1:8888/test\"\nI'm logic server.xiaomo\n```\n\n### golang http包的执行流程\n参考:[Go如何使得Web工作](https://astaxie.gitbooks.io/build-web-application-with-golang/content/zh/03.3.html \"http\")\n![http包运行机制](/img/golang_http.png)\n\n### 结合goroutine处理并发\n在golang中, 为了实现高并发与高性能, 处理连接的读写事件使用了goroutine机制。因此, 对于每个请求都能保持独立性, 相互没有阻塞, 能高效响应网络请求事件。\n\n","source":"_posts/golang/golang_http-server.md","raw":"---\ntitle: '[golang]HTTP webserver'\ndate: 2016-12-03 14:11:45\ntags: golang\n---\n\n### 简单示例\ngolang对http网络模块有比较完备的标准库支持, 如下示例:\n\n<!--more-->\n\n```golang\npackage main\n\nimport (\n    \"io\"\n    \"net/http\"\n    \"log\"\n)\n\n\nfunc LogicServer(w http.ResponseWriter, req *http.Request) {\n    io.WriteString(w, \"I'm logic server.\")\n}\n\n\nfunc main() {\n    http.HandleFunc(\"/test\", LogicServer)\n    err := http.ListenAndServe(\":8888\", nil)\n    if err != nil {\n        log.Fatal(\"ListenAndServe Err:\", err)\n    }\n}\n```\n运行效果:\n```bash\nxiaomo@XIAOMO:~$ curl \"http://127.0.0.1:8888/test\"\nI'm logic server.xiaomo\n```\n\n### golang http包的执行流程\n参考:[Go如何使得Web工作](https://astaxie.gitbooks.io/build-web-application-with-golang/content/zh/03.3.html \"http\")\n![http包运行机制](/img/golang_http.png)\n\n### 结合goroutine处理并发\n在golang中, 为了实现高并发与高性能, 处理连接的读写事件使用了goroutine机制。因此, 对于每个请求都能保持独立性, 相互没有阻塞, 能高效响应网络请求事件。\n\n","slug":"golang/golang_http-server","published":1,"updated":"2017-08-07T05:47:10.146Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj61qjry20009dd4d565q00yi","content":"<h3 id=\"简单示例\"><a href=\"#简单示例\" class=\"headerlink\" title=\"简单示例\"></a>简单示例</h3><p>golang对http网络模块有比较完备的标准库支持, 如下示例:</p>\n<a id=\"more\"></a>\n<figure class=\"highlight golang\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">package</span> main</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">import</span> (</div><div class=\"line\">    <span class=\"string\">\"io\"</span></div><div class=\"line\">    <span class=\"string\">\"net/http\"</span></div><div class=\"line\">    <span class=\"string\">\"log\"</span></div><div class=\"line\">)</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">LogicServer</span><span class=\"params\">(w http.ResponseWriter, req *http.Request)</span></span> &#123;</div><div class=\"line\">    io.WriteString(w, <span class=\"string\">\"I'm logic server.\"</span>)</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</div><div class=\"line\">    http.HandleFunc(<span class=\"string\">\"/test\"</span>, LogicServer)</div><div class=\"line\">    err := http.ListenAndServe(<span class=\"string\">\":8888\"</span>, <span class=\"literal\">nil</span>)</div><div class=\"line\">    <span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</div><div class=\"line\">        log.Fatal(<span class=\"string\">\"ListenAndServe Err:\"</span>, err)</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>运行效果:<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">xiaomo@XIAOMO:~$ curl <span class=\"string\">\"http://127.0.0.1:8888/test\"</span></div><div class=\"line\">I<span class=\"string\">'m logic server.xiaomo</span></div></pre></td></tr></table></figure></p>\n<h3 id=\"golang-http包的执行流程\"><a href=\"#golang-http包的执行流程\" class=\"headerlink\" title=\"golang http包的执行流程\"></a>golang http包的执行流程</h3><p>参考:<a href=\"https://astaxie.gitbooks.io/build-web-application-with-golang/content/zh/03.3.html\" title=\"http\" target=\"_blank\" rel=\"external\">Go如何使得Web工作</a><br><img src=\"/img/golang_http.png\" alt=\"http包运行机制\"></p>\n<h3 id=\"结合goroutine处理并发\"><a href=\"#结合goroutine处理并发\" class=\"headerlink\" title=\"结合goroutine处理并发\"></a>结合goroutine处理并发</h3><p>在golang中, 为了实现高并发与高性能, 处理连接的读写事件使用了goroutine机制。因此, 对于每个请求都能保持独立性, 相互没有阻塞, 能高效响应网络请求事件。</p>\n","site":{"data":{}},"excerpt":"<h3 id=\"简单示例\"><a href=\"#简单示例\" class=\"headerlink\" title=\"简单示例\"></a>简单示例</h3><p>golang对http网络模块有比较完备的标准库支持, 如下示例:</p>","more":"<figure class=\"highlight golang\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">package</span> main</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">import</span> (</div><div class=\"line\">    <span class=\"string\">\"io\"</span></div><div class=\"line\">    <span class=\"string\">\"net/http\"</span></div><div class=\"line\">    <span class=\"string\">\"log\"</span></div><div class=\"line\">)</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">LogicServer</span><span class=\"params\">(w http.ResponseWriter, req *http.Request)</span></span> &#123;</div><div class=\"line\">    io.WriteString(w, <span class=\"string\">\"I'm logic server.\"</span>)</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</div><div class=\"line\">    http.HandleFunc(<span class=\"string\">\"/test\"</span>, LogicServer)</div><div class=\"line\">    err := http.ListenAndServe(<span class=\"string\">\":8888\"</span>, <span class=\"literal\">nil</span>)</div><div class=\"line\">    <span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</div><div class=\"line\">        log.Fatal(<span class=\"string\">\"ListenAndServe Err:\"</span>, err)</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>运行效果:<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">xiaomo@XIAOMO:~$ curl <span class=\"string\">\"http://127.0.0.1:8888/test\"</span></div><div class=\"line\">I<span class=\"string\">'m logic server.xiaomo</span></div></pre></td></tr></table></figure></p>\n<h3 id=\"golang-http包的执行流程\"><a href=\"#golang-http包的执行流程\" class=\"headerlink\" title=\"golang http包的执行流程\"></a>golang http包的执行流程</h3><p>参考:<a href=\"https://astaxie.gitbooks.io/build-web-application-with-golang/content/zh/03.3.html\" title=\"http\" target=\"_blank\" rel=\"external\">Go如何使得Web工作</a><br><img src=\"/img/golang_http.png\" alt=\"http包运行机制\"></p>\n<h3 id=\"结合goroutine处理并发\"><a href=\"#结合goroutine处理并发\" class=\"headerlink\" title=\"结合goroutine处理并发\"></a>结合goroutine处理并发</h3><p>在golang中, 为了实现高并发与高性能, 处理连接的读写事件使用了goroutine机制。因此, 对于每个请求都能保持独立性, 相互没有阻塞, 能高效响应网络请求事件。</p>"},{"title":"[golang]interface","date":"2016-01-02T07:22:43.000Z","_content":"\n\n第一次接触golang, 应该是2013那年在某沙龙听许大神在介绍golang特性。<br>\n那时候据说interface可以说是golang中最具特色、设计精妙的特性之一。<br>\n现在计划写个demo， 重新学习一下interface的设计模式。\n\n### 什么是interface\n- 在golang中, interface简单可认为是一组函数的组合, 通过interface可以定义对象的一组行为。\n- interface定义了一组方法, 如果某个对象实现了某个interface的所有方法， 则我们可以认为这个对象实现了这个接口。\n- 由此可见, 不像C++、java， golang实现接口并不需要显式的implements。。。\n\n<!--more-->\n\n### interface的一些基础特性\n- interface类型不包含任何的成员变量, 只有方法;\n- interface类型进行类型转换时, 默认返回的是对象拷贝; 如果需要修改源对象, 需使用指针;\n- interface类型可以嵌套, 但不支持两个对象互相嵌套.\n\n\n### 接口的定义与实现\n一个例子\n```golang\npackage main\n\nimport (\n    \"fmt\"\n)\n\ntype Human interface {\n    GetName() string\n    GetAge() int\n    GetGender() string\n}\n\n// 定义struct Employee\ntype Employee struct {\n    name   string\n    age    int\n    salary int\n    gender string\n}\n\n// 定义struct Employee 的方法\nfunc (self *Employee) GetName() string {\n    return self.name\n}\n\nfunc (self *Employee) GetAge() int {\n    return self.age\n}\n\nfunc (self *Employee) GetGender() string{\n    return self.gender\n}\n\nfunc (self *Employee) GetSalary() int {\n    return self.salary\n}\n\n// 参数为Human类型\nfunc printName(p Human) {\n    name := p.GetName()\n    fmt.Printf(\"name:%v\\n\", name)\n}\n\nfunc main() {\n    varEmployee := Employee{\n        name:   \"xiaomo\",\n        age:    30,\n        salary: 10000000,\n        gender: \"Male\",\n    }\n    // 访问GetSalary方法\n    s := varEmployee.GetSalary()\n    fmt.Printf(\"salary:%v\\n\", s)\n\n    // 子集转为超集类型Human, 作为参数传入函数中\n    var p Human = &varEmployee\n    printName(p)\n}\n```\n演示效果:\n```bash\nroot@XIAOMO:~/gopro# go build interface.go\nroot@XIAOMO:~/gopro# ./interface\nsalary:10000000\nname:xiaomo\n```\n上例中, 定义了接口Human, 内部有三个方法: GetName(), GetAge(), GetGender(); <br>\n结构Employee除了实现这三个方法外, 还实现了GetSalary()方法。 因此, 对象Employee实现Human接口。\n\nEmployee可以转换为Human类型, 作为形参传入printName()函数; 实现了多态调用。\n\n### 接口的嵌套\n一个接口可以嵌套另一个接口，根据上面的代码再修改一下， 修改部分如下:\n```golang\n// 嵌套接口Human, 那么User除了有PrintInfo()外， 也拥有了Human的所有方法\ntype User interface {\n    Human\n    PrintInfo()\n}\n\n// 实现PrintInfo()方法\nfunc (self * Employee) PrintInfo() {\n    fmt.Printf(\"name:%v age:%v salary:%v gender:%v\\n\",\n        self.name, self.age, self.salary, self.gender)\n}\n\nfunc main() {\n    varEmployee := Employee{\n        name:   \"xiaomo\",\n        age:    50,\n        salary: 100000000,\n        gender: \"Male\",\n    }\n    // 访问GetSalary方法\n    s := varEmployee.GetSalary()\n    fmt.Printf(\"salary:%v\\n\", s)\n\n    // 子集转为超集类型Human, 作为参数传入函数中\n    var p Human = &varEmployee\n    printName(p)\n\n    // Employee转换为User类型\n    var u User = &varEmployee\n    // 这时可以调用User的GetName()方法\n    fmt.Printf(\"user_name:%v\\n\", u.GetName())\n    // 调用User的PrintInfo()方法\n    u.PrintInfo()\n}\n```\n### 空接口(Any类型)\ngolang中所有对象都满足空接口interface{}, 因此interface{}可以指向任何类型的对象。\n\n```golang\nvar i1 interface{} = 100      // 将int类型赋值给interface{}\nvar i2 interface{} = \"ok\"     // 将string类型赋值给interface{}\nvar i3 interface{} = &i2      // 将*interface{}类型赋值给interface{}\nvar i4 interface{} = struct{ X int }{1}   // 将struct类型赋值给interface{}\nvar i5 interface{} = &struct{ X int }{1}  // 将*struct类型赋值给interfae{}\n```\n当一个方法需要接受任意类型的对象时, 我们将其参数声明为interface{}空类型。如fmt库中的各种print方法就使用了这种方式:\n```golang\nfunc Printf(fmt string, args ...interface{})\nfunc Println(args ...interface{})\n```\n\n### 总结\ngolang的接口和其他语言的接口区别还是比较大, 显得别具一格。\n其他大部分语言的接口是侵入式的， 需要显式的implement；而golang是非侵入式的, 实现某个接口并不需要从该接口继承，而只需要实现该接口的所有方法。\n","source":"_posts/golang/golang_interface.md","raw":"---\ntitle: '[golang]interface'\ndate: 2016-01-02 15:22:43\ntags: golang\n---\n\n\n第一次接触golang, 应该是2013那年在某沙龙听许大神在介绍golang特性。<br>\n那时候据说interface可以说是golang中最具特色、设计精妙的特性之一。<br>\n现在计划写个demo， 重新学习一下interface的设计模式。\n\n### 什么是interface\n- 在golang中, interface简单可认为是一组函数的组合, 通过interface可以定义对象的一组行为。\n- interface定义了一组方法, 如果某个对象实现了某个interface的所有方法， 则我们可以认为这个对象实现了这个接口。\n- 由此可见, 不像C++、java， golang实现接口并不需要显式的implements。。。\n\n<!--more-->\n\n### interface的一些基础特性\n- interface类型不包含任何的成员变量, 只有方法;\n- interface类型进行类型转换时, 默认返回的是对象拷贝; 如果需要修改源对象, 需使用指针;\n- interface类型可以嵌套, 但不支持两个对象互相嵌套.\n\n\n### 接口的定义与实现\n一个例子\n```golang\npackage main\n\nimport (\n    \"fmt\"\n)\n\ntype Human interface {\n    GetName() string\n    GetAge() int\n    GetGender() string\n}\n\n// 定义struct Employee\ntype Employee struct {\n    name   string\n    age    int\n    salary int\n    gender string\n}\n\n// 定义struct Employee 的方法\nfunc (self *Employee) GetName() string {\n    return self.name\n}\n\nfunc (self *Employee) GetAge() int {\n    return self.age\n}\n\nfunc (self *Employee) GetGender() string{\n    return self.gender\n}\n\nfunc (self *Employee) GetSalary() int {\n    return self.salary\n}\n\n// 参数为Human类型\nfunc printName(p Human) {\n    name := p.GetName()\n    fmt.Printf(\"name:%v\\n\", name)\n}\n\nfunc main() {\n    varEmployee := Employee{\n        name:   \"xiaomo\",\n        age:    30,\n        salary: 10000000,\n        gender: \"Male\",\n    }\n    // 访问GetSalary方法\n    s := varEmployee.GetSalary()\n    fmt.Printf(\"salary:%v\\n\", s)\n\n    // 子集转为超集类型Human, 作为参数传入函数中\n    var p Human = &varEmployee\n    printName(p)\n}\n```\n演示效果:\n```bash\nroot@XIAOMO:~/gopro# go build interface.go\nroot@XIAOMO:~/gopro# ./interface\nsalary:10000000\nname:xiaomo\n```\n上例中, 定义了接口Human, 内部有三个方法: GetName(), GetAge(), GetGender(); <br>\n结构Employee除了实现这三个方法外, 还实现了GetSalary()方法。 因此, 对象Employee实现Human接口。\n\nEmployee可以转换为Human类型, 作为形参传入printName()函数; 实现了多态调用。\n\n### 接口的嵌套\n一个接口可以嵌套另一个接口，根据上面的代码再修改一下， 修改部分如下:\n```golang\n// 嵌套接口Human, 那么User除了有PrintInfo()外， 也拥有了Human的所有方法\ntype User interface {\n    Human\n    PrintInfo()\n}\n\n// 实现PrintInfo()方法\nfunc (self * Employee) PrintInfo() {\n    fmt.Printf(\"name:%v age:%v salary:%v gender:%v\\n\",\n        self.name, self.age, self.salary, self.gender)\n}\n\nfunc main() {\n    varEmployee := Employee{\n        name:   \"xiaomo\",\n        age:    50,\n        salary: 100000000,\n        gender: \"Male\",\n    }\n    // 访问GetSalary方法\n    s := varEmployee.GetSalary()\n    fmt.Printf(\"salary:%v\\n\", s)\n\n    // 子集转为超集类型Human, 作为参数传入函数中\n    var p Human = &varEmployee\n    printName(p)\n\n    // Employee转换为User类型\n    var u User = &varEmployee\n    // 这时可以调用User的GetName()方法\n    fmt.Printf(\"user_name:%v\\n\", u.GetName())\n    // 调用User的PrintInfo()方法\n    u.PrintInfo()\n}\n```\n### 空接口(Any类型)\ngolang中所有对象都满足空接口interface{}, 因此interface{}可以指向任何类型的对象。\n\n```golang\nvar i1 interface{} = 100      // 将int类型赋值给interface{}\nvar i2 interface{} = \"ok\"     // 将string类型赋值给interface{}\nvar i3 interface{} = &i2      // 将*interface{}类型赋值给interface{}\nvar i4 interface{} = struct{ X int }{1}   // 将struct类型赋值给interface{}\nvar i5 interface{} = &struct{ X int }{1}  // 将*struct类型赋值给interfae{}\n```\n当一个方法需要接受任意类型的对象时, 我们将其参数声明为interface{}空类型。如fmt库中的各种print方法就使用了这种方式:\n```golang\nfunc Printf(fmt string, args ...interface{})\nfunc Println(args ...interface{})\n```\n\n### 总结\ngolang的接口和其他语言的接口区别还是比较大, 显得别具一格。\n其他大部分语言的接口是侵入式的， 需要显式的implement；而golang是非侵入式的, 实现某个接口并不需要从该接口继承，而只需要实现该接口的所有方法。\n","slug":"golang/golang_interface","published":1,"updated":"2017-08-07T05:47:10.146Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj61qjry3000bdd4d37fjy45l","content":"<p>第一次接触golang, 应该是2013那年在某沙龙听许大神在介绍golang特性。<br><br>那时候据说interface可以说是golang中最具特色、设计精妙的特性之一。<br><br>现在计划写个demo， 重新学习一下interface的设计模式。</p>\n<h3 id=\"什么是interface\"><a href=\"#什么是interface\" class=\"headerlink\" title=\"什么是interface\"></a>什么是interface</h3><ul>\n<li>在golang中, interface简单可认为是一组函数的组合, 通过interface可以定义对象的一组行为。</li>\n<li>interface定义了一组方法, 如果某个对象实现了某个interface的所有方法， 则我们可以认为这个对象实现了这个接口。</li>\n<li>由此可见, 不像C++、java， golang实现接口并不需要显式的implements。。。</li>\n</ul>\n<a id=\"more\"></a>\n<h3 id=\"interface的一些基础特性\"><a href=\"#interface的一些基础特性\" class=\"headerlink\" title=\"interface的一些基础特性\"></a>interface的一些基础特性</h3><ul>\n<li>interface类型不包含任何的成员变量, 只有方法;</li>\n<li>interface类型进行类型转换时, 默认返回的是对象拷贝; 如果需要修改源对象, 需使用指针;</li>\n<li>interface类型可以嵌套, 但不支持两个对象互相嵌套.</li>\n</ul>\n<h3 id=\"接口的定义与实现\"><a href=\"#接口的定义与实现\" class=\"headerlink\" title=\"接口的定义与实现\"></a>接口的定义与实现</h3><p>一个例子<br><figure class=\"highlight golang\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">package</span> main</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">import</span> (</div><div class=\"line\">    <span class=\"string\">\"fmt\"</span></div><div class=\"line\">)</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">type</span> Human <span class=\"keyword\">interface</span> &#123;</div><div class=\"line\">    GetName() <span class=\"keyword\">string</span></div><div class=\"line\">    GetAge() <span class=\"keyword\">int</span></div><div class=\"line\">    GetGender() <span class=\"keyword\">string</span></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 定义struct Employee</span></div><div class=\"line\"><span class=\"keyword\">type</span> Employee <span class=\"keyword\">struct</span> &#123;</div><div class=\"line\">    name   <span class=\"keyword\">string</span></div><div class=\"line\">    age    <span class=\"keyword\">int</span></div><div class=\"line\">    salary <span class=\"keyword\">int</span></div><div class=\"line\">    gender <span class=\"keyword\">string</span></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 定义struct Employee 的方法</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(self *Employee)</span> <span class=\"title\">GetName</span><span class=\"params\">()</span> <span class=\"title\">string</span></span> &#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> self.name</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(self *Employee)</span> <span class=\"title\">GetAge</span><span class=\"params\">()</span> <span class=\"title\">int</span></span> &#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> self.age</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(self *Employee)</span> <span class=\"title\">GetGender</span><span class=\"params\">()</span> <span class=\"title\">string</span></span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> self.gender</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(self *Employee)</span> <span class=\"title\">GetSalary</span><span class=\"params\">()</span> <span class=\"title\">int</span></span> &#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> self.salary</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 参数为Human类型</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">printName</span><span class=\"params\">(p Human)</span></span> &#123;</div><div class=\"line\">    name := p.GetName()</div><div class=\"line\">    fmt.Printf(<span class=\"string\">\"name:%v\\n\"</span>, name)</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</div><div class=\"line\">    varEmployee := Employee&#123;</div><div class=\"line\">        name:   <span class=\"string\">\"xiaomo\"</span>,</div><div class=\"line\">        age:    <span class=\"number\">30</span>,</div><div class=\"line\">        salary: <span class=\"number\">10000000</span>,</div><div class=\"line\">        gender: <span class=\"string\">\"Male\"</span>,</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"comment\">// 访问GetSalary方法</span></div><div class=\"line\">    s := varEmployee.GetSalary()</div><div class=\"line\">    fmt.Printf(<span class=\"string\">\"salary:%v\\n\"</span>, s)</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// 子集转为超集类型Human, 作为参数传入函数中</span></div><div class=\"line\">    <span class=\"keyword\">var</span> p Human = &amp;varEmployee</div><div class=\"line\">    printName(p)</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>演示效果:<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">root@XIAOMO:~/gopro<span class=\"comment\"># go build interface.go</span></div><div class=\"line\">root@XIAOMO:~/gopro<span class=\"comment\"># ./interface</span></div><div class=\"line\">salary:10000000</div><div class=\"line\">name:xiaomo</div></pre></td></tr></table></figure></p>\n<p>上例中, 定义了接口Human, 内部有三个方法: GetName(), GetAge(), GetGender(); <br><br>结构Employee除了实现这三个方法外, 还实现了GetSalary()方法。 因此, 对象Employee实现Human接口。</p>\n<p>Employee可以转换为Human类型, 作为形参传入printName()函数; 实现了多态调用。</p>\n<h3 id=\"接口的嵌套\"><a href=\"#接口的嵌套\" class=\"headerlink\" title=\"接口的嵌套\"></a>接口的嵌套</h3><p>一个接口可以嵌套另一个接口，根据上面的代码再修改一下， 修改部分如下:<br><figure class=\"highlight golang\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 嵌套接口Human, 那么User除了有PrintInfo()外， 也拥有了Human的所有方法</span></div><div class=\"line\"><span class=\"keyword\">type</span> User <span class=\"keyword\">interface</span> &#123;</div><div class=\"line\">    Human</div><div class=\"line\">    PrintInfo()</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 实现PrintInfo()方法</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(self * Employee)</span> <span class=\"title\">PrintInfo</span><span class=\"params\">()</span></span> &#123;</div><div class=\"line\">    fmt.Printf(<span class=\"string\">\"name:%v age:%v salary:%v gender:%v\\n\"</span>,</div><div class=\"line\">        self.name, self.age, self.salary, self.gender)</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</div><div class=\"line\">    varEmployee := Employee&#123;</div><div class=\"line\">        name:   <span class=\"string\">\"xiaomo\"</span>,</div><div class=\"line\">        age:    <span class=\"number\">50</span>,</div><div class=\"line\">        salary: <span class=\"number\">100000000</span>,</div><div class=\"line\">        gender: <span class=\"string\">\"Male\"</span>,</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"comment\">// 访问GetSalary方法</span></div><div class=\"line\">    s := varEmployee.GetSalary()</div><div class=\"line\">    fmt.Printf(<span class=\"string\">\"salary:%v\\n\"</span>, s)</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// 子集转为超集类型Human, 作为参数传入函数中</span></div><div class=\"line\">    <span class=\"keyword\">var</span> p Human = &amp;varEmployee</div><div class=\"line\">    printName(p)</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// Employee转换为User类型</span></div><div class=\"line\">    <span class=\"keyword\">var</span> u User = &amp;varEmployee</div><div class=\"line\">    <span class=\"comment\">// 这时可以调用User的GetName()方法</span></div><div class=\"line\">    fmt.Printf(<span class=\"string\">\"user_name:%v\\n\"</span>, u.GetName())</div><div class=\"line\">    <span class=\"comment\">// 调用User的PrintInfo()方法</span></div><div class=\"line\">    u.PrintInfo()</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<h3 id=\"空接口-Any类型\"><a href=\"#空接口-Any类型\" class=\"headerlink\" title=\"空接口(Any类型)\"></a>空接口(Any类型)</h3><p>golang中所有对象都满足空接口interface{}, 因此interface{}可以指向任何类型的对象。</p>\n<figure class=\"highlight golang\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> i1 <span class=\"keyword\">interface</span>&#123;&#125; = <span class=\"number\">100</span>      <span class=\"comment\">// 将int类型赋值给interface&#123;&#125;</span></div><div class=\"line\"><span class=\"keyword\">var</span> i2 <span class=\"keyword\">interface</span>&#123;&#125; = <span class=\"string\">\"ok\"</span>     <span class=\"comment\">// 将string类型赋值给interface&#123;&#125;</span></div><div class=\"line\"><span class=\"keyword\">var</span> i3 <span class=\"keyword\">interface</span>&#123;&#125; = &amp;i2      <span class=\"comment\">// 将*interface&#123;&#125;类型赋值给interface&#123;&#125;</span></div><div class=\"line\"><span class=\"keyword\">var</span> i4 <span class=\"keyword\">interface</span>&#123;&#125; = <span class=\"keyword\">struct</span>&#123; X <span class=\"keyword\">int</span> &#125;&#123;<span class=\"number\">1</span>&#125;   <span class=\"comment\">// 将struct类型赋值给interface&#123;&#125;</span></div><div class=\"line\"><span class=\"keyword\">var</span> i5 <span class=\"keyword\">interface</span>&#123;&#125; = &amp;<span class=\"keyword\">struct</span>&#123; X <span class=\"keyword\">int</span> &#125;&#123;<span class=\"number\">1</span>&#125;  <span class=\"comment\">// 将*struct类型赋值给interfae&#123;&#125;</span></div></pre></td></tr></table></figure>\n<p>当一个方法需要接受任意类型的对象时, 我们将其参数声明为interface{}空类型。如fmt库中的各种print方法就使用了这种方式:<br><figure class=\"highlight golang\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">Printf</span><span class=\"params\">(fmt <span class=\"keyword\">string</span>, args ...<span class=\"keyword\">interface</span>&#123;&#125;)</span></span></div><div class=\"line\"><span class=\"title\">func</span> <span class=\"title\">Println</span><span class=\"params\">(args ...<span class=\"keyword\">interface</span>&#123;&#125;)</span></div></pre></td></tr></table></figure></p>\n<h3 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h3><p>golang的接口和其他语言的接口区别还是比较大, 显得别具一格。<br>其他大部分语言的接口是侵入式的， 需要显式的implement；而golang是非侵入式的, 实现某个接口并不需要从该接口继承，而只需要实现该接口的所有方法。</p>\n","site":{"data":{}},"excerpt":"<p>第一次接触golang, 应该是2013那年在某沙龙听许大神在介绍golang特性。<br><br>那时候据说interface可以说是golang中最具特色、设计精妙的特性之一。<br><br>现在计划写个demo， 重新学习一下interface的设计模式。</p>\n<h3 id=\"什么是interface\"><a href=\"#什么是interface\" class=\"headerlink\" title=\"什么是interface\"></a>什么是interface</h3><ul>\n<li>在golang中, interface简单可认为是一组函数的组合, 通过interface可以定义对象的一组行为。</li>\n<li>interface定义了一组方法, 如果某个对象实现了某个interface的所有方法， 则我们可以认为这个对象实现了这个接口。</li>\n<li>由此可见, 不像C++、java， golang实现接口并不需要显式的implements。。。</li>\n</ul>","more":"<h3 id=\"interface的一些基础特性\"><a href=\"#interface的一些基础特性\" class=\"headerlink\" title=\"interface的一些基础特性\"></a>interface的一些基础特性</h3><ul>\n<li>interface类型不包含任何的成员变量, 只有方法;</li>\n<li>interface类型进行类型转换时, 默认返回的是对象拷贝; 如果需要修改源对象, 需使用指针;</li>\n<li>interface类型可以嵌套, 但不支持两个对象互相嵌套.</li>\n</ul>\n<h3 id=\"接口的定义与实现\"><a href=\"#接口的定义与实现\" class=\"headerlink\" title=\"接口的定义与实现\"></a>接口的定义与实现</h3><p>一个例子<br><figure class=\"highlight golang\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">package</span> main</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">import</span> (</div><div class=\"line\">    <span class=\"string\">\"fmt\"</span></div><div class=\"line\">)</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">type</span> Human <span class=\"keyword\">interface</span> &#123;</div><div class=\"line\">    GetName() <span class=\"keyword\">string</span></div><div class=\"line\">    GetAge() <span class=\"keyword\">int</span></div><div class=\"line\">    GetGender() <span class=\"keyword\">string</span></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 定义struct Employee</span></div><div class=\"line\"><span class=\"keyword\">type</span> Employee <span class=\"keyword\">struct</span> &#123;</div><div class=\"line\">    name   <span class=\"keyword\">string</span></div><div class=\"line\">    age    <span class=\"keyword\">int</span></div><div class=\"line\">    salary <span class=\"keyword\">int</span></div><div class=\"line\">    gender <span class=\"keyword\">string</span></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 定义struct Employee 的方法</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(self *Employee)</span> <span class=\"title\">GetName</span><span class=\"params\">()</span> <span class=\"title\">string</span></span> &#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> self.name</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(self *Employee)</span> <span class=\"title\">GetAge</span><span class=\"params\">()</span> <span class=\"title\">int</span></span> &#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> self.age</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(self *Employee)</span> <span class=\"title\">GetGender</span><span class=\"params\">()</span> <span class=\"title\">string</span></span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> self.gender</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(self *Employee)</span> <span class=\"title\">GetSalary</span><span class=\"params\">()</span> <span class=\"title\">int</span></span> &#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> self.salary</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 参数为Human类型</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">printName</span><span class=\"params\">(p Human)</span></span> &#123;</div><div class=\"line\">    name := p.GetName()</div><div class=\"line\">    fmt.Printf(<span class=\"string\">\"name:%v\\n\"</span>, name)</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</div><div class=\"line\">    varEmployee := Employee&#123;</div><div class=\"line\">        name:   <span class=\"string\">\"xiaomo\"</span>,</div><div class=\"line\">        age:    <span class=\"number\">30</span>,</div><div class=\"line\">        salary: <span class=\"number\">10000000</span>,</div><div class=\"line\">        gender: <span class=\"string\">\"Male\"</span>,</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"comment\">// 访问GetSalary方法</span></div><div class=\"line\">    s := varEmployee.GetSalary()</div><div class=\"line\">    fmt.Printf(<span class=\"string\">\"salary:%v\\n\"</span>, s)</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// 子集转为超集类型Human, 作为参数传入函数中</span></div><div class=\"line\">    <span class=\"keyword\">var</span> p Human = &amp;varEmployee</div><div class=\"line\">    printName(p)</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>演示效果:<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">root@XIAOMO:~/gopro<span class=\"comment\"># go build interface.go</span></div><div class=\"line\">root@XIAOMO:~/gopro<span class=\"comment\"># ./interface</span></div><div class=\"line\">salary:10000000</div><div class=\"line\">name:xiaomo</div></pre></td></tr></table></figure></p>\n<p>上例中, 定义了接口Human, 内部有三个方法: GetName(), GetAge(), GetGender(); <br><br>结构Employee除了实现这三个方法外, 还实现了GetSalary()方法。 因此, 对象Employee实现Human接口。</p>\n<p>Employee可以转换为Human类型, 作为形参传入printName()函数; 实现了多态调用。</p>\n<h3 id=\"接口的嵌套\"><a href=\"#接口的嵌套\" class=\"headerlink\" title=\"接口的嵌套\"></a>接口的嵌套</h3><p>一个接口可以嵌套另一个接口，根据上面的代码再修改一下， 修改部分如下:<br><figure class=\"highlight golang\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 嵌套接口Human, 那么User除了有PrintInfo()外， 也拥有了Human的所有方法</span></div><div class=\"line\"><span class=\"keyword\">type</span> User <span class=\"keyword\">interface</span> &#123;</div><div class=\"line\">    Human</div><div class=\"line\">    PrintInfo()</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 实现PrintInfo()方法</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(self * Employee)</span> <span class=\"title\">PrintInfo</span><span class=\"params\">()</span></span> &#123;</div><div class=\"line\">    fmt.Printf(<span class=\"string\">\"name:%v age:%v salary:%v gender:%v\\n\"</span>,</div><div class=\"line\">        self.name, self.age, self.salary, self.gender)</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</div><div class=\"line\">    varEmployee := Employee&#123;</div><div class=\"line\">        name:   <span class=\"string\">\"xiaomo\"</span>,</div><div class=\"line\">        age:    <span class=\"number\">50</span>,</div><div class=\"line\">        salary: <span class=\"number\">100000000</span>,</div><div class=\"line\">        gender: <span class=\"string\">\"Male\"</span>,</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"comment\">// 访问GetSalary方法</span></div><div class=\"line\">    s := varEmployee.GetSalary()</div><div class=\"line\">    fmt.Printf(<span class=\"string\">\"salary:%v\\n\"</span>, s)</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// 子集转为超集类型Human, 作为参数传入函数中</span></div><div class=\"line\">    <span class=\"keyword\">var</span> p Human = &amp;varEmployee</div><div class=\"line\">    printName(p)</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// Employee转换为User类型</span></div><div class=\"line\">    <span class=\"keyword\">var</span> u User = &amp;varEmployee</div><div class=\"line\">    <span class=\"comment\">// 这时可以调用User的GetName()方法</span></div><div class=\"line\">    fmt.Printf(<span class=\"string\">\"user_name:%v\\n\"</span>, u.GetName())</div><div class=\"line\">    <span class=\"comment\">// 调用User的PrintInfo()方法</span></div><div class=\"line\">    u.PrintInfo()</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<h3 id=\"空接口-Any类型\"><a href=\"#空接口-Any类型\" class=\"headerlink\" title=\"空接口(Any类型)\"></a>空接口(Any类型)</h3><p>golang中所有对象都满足空接口interface{}, 因此interface{}可以指向任何类型的对象。</p>\n<figure class=\"highlight golang\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> i1 <span class=\"keyword\">interface</span>&#123;&#125; = <span class=\"number\">100</span>      <span class=\"comment\">// 将int类型赋值给interface&#123;&#125;</span></div><div class=\"line\"><span class=\"keyword\">var</span> i2 <span class=\"keyword\">interface</span>&#123;&#125; = <span class=\"string\">\"ok\"</span>     <span class=\"comment\">// 将string类型赋值给interface&#123;&#125;</span></div><div class=\"line\"><span class=\"keyword\">var</span> i3 <span class=\"keyword\">interface</span>&#123;&#125; = &amp;i2      <span class=\"comment\">// 将*interface&#123;&#125;类型赋值给interface&#123;&#125;</span></div><div class=\"line\"><span class=\"keyword\">var</span> i4 <span class=\"keyword\">interface</span>&#123;&#125; = <span class=\"keyword\">struct</span>&#123; X <span class=\"keyword\">int</span> &#125;&#123;<span class=\"number\">1</span>&#125;   <span class=\"comment\">// 将struct类型赋值给interface&#123;&#125;</span></div><div class=\"line\"><span class=\"keyword\">var</span> i5 <span class=\"keyword\">interface</span>&#123;&#125; = &amp;<span class=\"keyword\">struct</span>&#123; X <span class=\"keyword\">int</span> &#125;&#123;<span class=\"number\">1</span>&#125;  <span class=\"comment\">// 将*struct类型赋值给interfae&#123;&#125;</span></div></pre></td></tr></table></figure>\n<p>当一个方法需要接受任意类型的对象时, 我们将其参数声明为interface{}空类型。如fmt库中的各种print方法就使用了这种方式:<br><figure class=\"highlight golang\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">Printf</span><span class=\"params\">(fmt <span class=\"keyword\">string</span>, args ...<span class=\"keyword\">interface</span>&#123;&#125;)</span></span></div><div class=\"line\"><span class=\"title\">func</span> <span class=\"title\">Println</span><span class=\"params\">(args ...<span class=\"keyword\">interface</span>&#123;&#125;)</span></div></pre></td></tr></table></figure></p>\n<h3 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h3><p>golang的接口和其他语言的接口区别还是比较大, 显得别具一格。<br>其他大部分语言的接口是侵入式的， 需要显式的implement；而golang是非侵入式的, 实现某个接口并不需要从该接口继承，而只需要实现该接口的所有方法。</p>"},{"title":"[golang]map/set类型","date":"2017-02-01T11:13:13.000Z","_content":"\n### map类型\n#### 1. 基础特性\n- map是一种无序的键值对的集合; 所以可以类似数组/slice一样进行迭代\n- map的值可以使内建类型, 也可以是struct类型\n- 内部使用hash表实现, map的hash表包含了一个collection of buckets（桶集合）\n\n<!--more-->\n\n#### 2. 声明与初始化\n```golang\npackage main\n\nimport (\n    \"fmt\"\n)\n\n// map[keyType]valueType\nfunc initMap() {\n    // 通过make方法创建\n    dict := make(map[string]int)\n    dict[\"age\"] = 18\n\n    // 直接创建\n    dict2 := map[string]string{\"name\":\"xiaoming\", \"phone\":\"135xxx\"}\n    dict2[\"addr\"] = \"Guangzhou\"\n\n    fmt.Printf(\"%v\\n\", dict2)\n}\n\n\nfunc main() {\n    initMap()\n}\n```\n\n#### 3. 元素访问\n```golang\npackage main\n\nimport (\n    \"fmt\"\n)\n\ntype Student struct {\n    name string\n    grade int\n}\n\nfunc useMap() {\n    //使用前应该先初始化, 否则panic报错\n    // var map1 map[string]string\n    // map1[\"a\"] = \"b\" // will panic\n\n    map1 := make(map[string]Student)\n    map1[\"s1\"] = Student{name:\"xiaomo\", grade:1}\n    fmt.Printf(\"%v\\n\", map1)\n}\n\nfunc main() {\n    useMap()\n}\n\n```\n\n#### 4. 在函数中传递map\n\n在函数间传递map对象, 是传递引用而不是拷贝; 因此在函数中对map进行了修改, 引用到它的地方也会相应修改\n```golang\npackage main\n\nimport (\n    \"fmt\"\n)\n\ntype Student struct {\n    name string\n    grade int\n}\n\nfunc useMap() {\n    map1 := make(map[string]Student)\n    map1[\"s1\"] = Student{name:\"xiaomo\", grade:1}\n    // 作为函数参数传递\n    printMap(map1)\n}\n\nfunc printMap(m map[string]Student) {\n    fmt.Printf(\"currentMap: %v\\n\", m)\n}\n\nfunc main() {\n    useMap()\n}\n\n```\n\n### Set类型\n\ngolang没有内置Set类型, 可以自定义实现。\n\n","source":"_posts/golang/golang_map-set.md","raw":"---\ntitle: '[golang]map/set类型'\ndate: 2017-02-01 19:13:13\ntags: golang\n---\n\n### map类型\n#### 1. 基础特性\n- map是一种无序的键值对的集合; 所以可以类似数组/slice一样进行迭代\n- map的值可以使内建类型, 也可以是struct类型\n- 内部使用hash表实现, map的hash表包含了一个collection of buckets（桶集合）\n\n<!--more-->\n\n#### 2. 声明与初始化\n```golang\npackage main\n\nimport (\n    \"fmt\"\n)\n\n// map[keyType]valueType\nfunc initMap() {\n    // 通过make方法创建\n    dict := make(map[string]int)\n    dict[\"age\"] = 18\n\n    // 直接创建\n    dict2 := map[string]string{\"name\":\"xiaoming\", \"phone\":\"135xxx\"}\n    dict2[\"addr\"] = \"Guangzhou\"\n\n    fmt.Printf(\"%v\\n\", dict2)\n}\n\n\nfunc main() {\n    initMap()\n}\n```\n\n#### 3. 元素访问\n```golang\npackage main\n\nimport (\n    \"fmt\"\n)\n\ntype Student struct {\n    name string\n    grade int\n}\n\nfunc useMap() {\n    //使用前应该先初始化, 否则panic报错\n    // var map1 map[string]string\n    // map1[\"a\"] = \"b\" // will panic\n\n    map1 := make(map[string]Student)\n    map1[\"s1\"] = Student{name:\"xiaomo\", grade:1}\n    fmt.Printf(\"%v\\n\", map1)\n}\n\nfunc main() {\n    useMap()\n}\n\n```\n\n#### 4. 在函数中传递map\n\n在函数间传递map对象, 是传递引用而不是拷贝; 因此在函数中对map进行了修改, 引用到它的地方也会相应修改\n```golang\npackage main\n\nimport (\n    \"fmt\"\n)\n\ntype Student struct {\n    name string\n    grade int\n}\n\nfunc useMap() {\n    map1 := make(map[string]Student)\n    map1[\"s1\"] = Student{name:\"xiaomo\", grade:1}\n    // 作为函数参数传递\n    printMap(map1)\n}\n\nfunc printMap(m map[string]Student) {\n    fmt.Printf(\"currentMap: %v\\n\", m)\n}\n\nfunc main() {\n    useMap()\n}\n\n```\n\n### Set类型\n\ngolang没有内置Set类型, 可以自定义实现。\n\n","slug":"golang/golang_map-set","published":1,"updated":"2017-08-07T05:47:10.147Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj61qjry8000edd4d9in22k38","content":"<h3 id=\"map类型\"><a href=\"#map类型\" class=\"headerlink\" title=\"map类型\"></a>map类型</h3><h4 id=\"1-基础特性\"><a href=\"#1-基础特性\" class=\"headerlink\" title=\"1. 基础特性\"></a>1. 基础特性</h4><ul>\n<li>map是一种无序的键值对的集合; 所以可以类似数组/slice一样进行迭代</li>\n<li>map的值可以使内建类型, 也可以是struct类型</li>\n<li>内部使用hash表实现, map的hash表包含了一个collection of buckets（桶集合）</li>\n</ul>\n<a id=\"more\"></a>\n<h4 id=\"2-声明与初始化\"><a href=\"#2-声明与初始化\" class=\"headerlink\" title=\"2. 声明与初始化\"></a>2. 声明与初始化</h4><figure class=\"highlight golang\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">package</span> main</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">import</span> (</div><div class=\"line\">    <span class=\"string\">\"fmt\"</span></div><div class=\"line\">)</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// map[keyType]valueType</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">initMap</span><span class=\"params\">()</span></span> &#123;</div><div class=\"line\">    <span class=\"comment\">// 通过make方法创建</span></div><div class=\"line\">    dict := <span class=\"built_in\">make</span>(<span class=\"keyword\">map</span>[<span class=\"keyword\">string</span>]<span class=\"keyword\">int</span>)</div><div class=\"line\">    dict[<span class=\"string\">\"age\"</span>] = <span class=\"number\">18</span></div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// 直接创建</span></div><div class=\"line\">    dict2 := <span class=\"keyword\">map</span>[<span class=\"keyword\">string</span>]<span class=\"keyword\">string</span>&#123;<span class=\"string\">\"name\"</span>:<span class=\"string\">\"xiaoming\"</span>, <span class=\"string\">\"phone\"</span>:<span class=\"string\">\"135xxx\"</span>&#125;</div><div class=\"line\">    dict2[<span class=\"string\">\"addr\"</span>] = <span class=\"string\">\"Guangzhou\"</span></div><div class=\"line\"></div><div class=\"line\">    fmt.Printf(<span class=\"string\">\"%v\\n\"</span>, dict2)</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</div><div class=\"line\">    initMap()</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h4 id=\"3-元素访问\"><a href=\"#3-元素访问\" class=\"headerlink\" title=\"3. 元素访问\"></a>3. 元素访问</h4><figure class=\"highlight golang\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">package</span> main</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">import</span> (</div><div class=\"line\">    <span class=\"string\">\"fmt\"</span></div><div class=\"line\">)</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">type</span> Student <span class=\"keyword\">struct</span> &#123;</div><div class=\"line\">    name <span class=\"keyword\">string</span></div><div class=\"line\">    grade <span class=\"keyword\">int</span></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">useMap</span><span class=\"params\">()</span></span> &#123;</div><div class=\"line\">    <span class=\"comment\">//使用前应该先初始化, 否则panic报错</span></div><div class=\"line\">    <span class=\"comment\">// var map1 map[string]string</span></div><div class=\"line\">    <span class=\"comment\">// map1[\"a\"] = \"b\" // will panic</span></div><div class=\"line\"></div><div class=\"line\">    map1 := <span class=\"built_in\">make</span>(<span class=\"keyword\">map</span>[<span class=\"keyword\">string</span>]Student)</div><div class=\"line\">    map1[<span class=\"string\">\"s1\"</span>] = Student&#123;name:<span class=\"string\">\"xiaomo\"</span>, grade:<span class=\"number\">1</span>&#125;</div><div class=\"line\">    fmt.Printf(<span class=\"string\">\"%v\\n\"</span>, map1)</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</div><div class=\"line\">    useMap()</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h4 id=\"4-在函数中传递map\"><a href=\"#4-在函数中传递map\" class=\"headerlink\" title=\"4. 在函数中传递map\"></a>4. 在函数中传递map</h4><p>在函数间传递map对象, 是传递引用而不是拷贝; 因此在函数中对map进行了修改, 引用到它的地方也会相应修改<br><figure class=\"highlight golang\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">package</span> main</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">import</span> (</div><div class=\"line\">    <span class=\"string\">\"fmt\"</span></div><div class=\"line\">)</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">type</span> Student <span class=\"keyword\">struct</span> &#123;</div><div class=\"line\">    name <span class=\"keyword\">string</span></div><div class=\"line\">    grade <span class=\"keyword\">int</span></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">useMap</span><span class=\"params\">()</span></span> &#123;</div><div class=\"line\">    map1 := <span class=\"built_in\">make</span>(<span class=\"keyword\">map</span>[<span class=\"keyword\">string</span>]Student)</div><div class=\"line\">    map1[<span class=\"string\">\"s1\"</span>] = Student&#123;name:<span class=\"string\">\"xiaomo\"</span>, grade:<span class=\"number\">1</span>&#125;</div><div class=\"line\">    <span class=\"comment\">// 作为函数参数传递</span></div><div class=\"line\">    printMap(map1)</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">printMap</span><span class=\"params\">(m <span class=\"keyword\">map</span>[<span class=\"keyword\">string</span>]Student)</span></span> &#123;</div><div class=\"line\">    fmt.Printf(<span class=\"string\">\"currentMap: %v\\n\"</span>, m)</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</div><div class=\"line\">    useMap()</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<h3 id=\"Set类型\"><a href=\"#Set类型\" class=\"headerlink\" title=\"Set类型\"></a>Set类型</h3><p>golang没有内置Set类型, 可以自定义实现。</p>\n","site":{"data":{}},"excerpt":"<h3 id=\"map类型\"><a href=\"#map类型\" class=\"headerlink\" title=\"map类型\"></a>map类型</h3><h4 id=\"1-基础特性\"><a href=\"#1-基础特性\" class=\"headerlink\" title=\"1. 基础特性\"></a>1. 基础特性</h4><ul>\n<li>map是一种无序的键值对的集合; 所以可以类似数组/slice一样进行迭代</li>\n<li>map的值可以使内建类型, 也可以是struct类型</li>\n<li>内部使用hash表实现, map的hash表包含了一个collection of buckets（桶集合）</li>\n</ul>","more":"<h4 id=\"2-声明与初始化\"><a href=\"#2-声明与初始化\" class=\"headerlink\" title=\"2. 声明与初始化\"></a>2. 声明与初始化</h4><figure class=\"highlight golang\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">package</span> main</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">import</span> (</div><div class=\"line\">    <span class=\"string\">\"fmt\"</span></div><div class=\"line\">)</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// map[keyType]valueType</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">initMap</span><span class=\"params\">()</span></span> &#123;</div><div class=\"line\">    <span class=\"comment\">// 通过make方法创建</span></div><div class=\"line\">    dict := <span class=\"built_in\">make</span>(<span class=\"keyword\">map</span>[<span class=\"keyword\">string</span>]<span class=\"keyword\">int</span>)</div><div class=\"line\">    dict[<span class=\"string\">\"age\"</span>] = <span class=\"number\">18</span></div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// 直接创建</span></div><div class=\"line\">    dict2 := <span class=\"keyword\">map</span>[<span class=\"keyword\">string</span>]<span class=\"keyword\">string</span>&#123;<span class=\"string\">\"name\"</span>:<span class=\"string\">\"xiaoming\"</span>, <span class=\"string\">\"phone\"</span>:<span class=\"string\">\"135xxx\"</span>&#125;</div><div class=\"line\">    dict2[<span class=\"string\">\"addr\"</span>] = <span class=\"string\">\"Guangzhou\"</span></div><div class=\"line\"></div><div class=\"line\">    fmt.Printf(<span class=\"string\">\"%v\\n\"</span>, dict2)</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</div><div class=\"line\">    initMap()</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h4 id=\"3-元素访问\"><a href=\"#3-元素访问\" class=\"headerlink\" title=\"3. 元素访问\"></a>3. 元素访问</h4><figure class=\"highlight golang\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">package</span> main</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">import</span> (</div><div class=\"line\">    <span class=\"string\">\"fmt\"</span></div><div class=\"line\">)</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">type</span> Student <span class=\"keyword\">struct</span> &#123;</div><div class=\"line\">    name <span class=\"keyword\">string</span></div><div class=\"line\">    grade <span class=\"keyword\">int</span></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">useMap</span><span class=\"params\">()</span></span> &#123;</div><div class=\"line\">    <span class=\"comment\">//使用前应该先初始化, 否则panic报错</span></div><div class=\"line\">    <span class=\"comment\">// var map1 map[string]string</span></div><div class=\"line\">    <span class=\"comment\">// map1[\"a\"] = \"b\" // will panic</span></div><div class=\"line\"></div><div class=\"line\">    map1 := <span class=\"built_in\">make</span>(<span class=\"keyword\">map</span>[<span class=\"keyword\">string</span>]Student)</div><div class=\"line\">    map1[<span class=\"string\">\"s1\"</span>] = Student&#123;name:<span class=\"string\">\"xiaomo\"</span>, grade:<span class=\"number\">1</span>&#125;</div><div class=\"line\">    fmt.Printf(<span class=\"string\">\"%v\\n\"</span>, map1)</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</div><div class=\"line\">    useMap()</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h4 id=\"4-在函数中传递map\"><a href=\"#4-在函数中传递map\" class=\"headerlink\" title=\"4. 在函数中传递map\"></a>4. 在函数中传递map</h4><p>在函数间传递map对象, 是传递引用而不是拷贝; 因此在函数中对map进行了修改, 引用到它的地方也会相应修改<br><figure class=\"highlight golang\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">package</span> main</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">import</span> (</div><div class=\"line\">    <span class=\"string\">\"fmt\"</span></div><div class=\"line\">)</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">type</span> Student <span class=\"keyword\">struct</span> &#123;</div><div class=\"line\">    name <span class=\"keyword\">string</span></div><div class=\"line\">    grade <span class=\"keyword\">int</span></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">useMap</span><span class=\"params\">()</span></span> &#123;</div><div class=\"line\">    map1 := <span class=\"built_in\">make</span>(<span class=\"keyword\">map</span>[<span class=\"keyword\">string</span>]Student)</div><div class=\"line\">    map1[<span class=\"string\">\"s1\"</span>] = Student&#123;name:<span class=\"string\">\"xiaomo\"</span>, grade:<span class=\"number\">1</span>&#125;</div><div class=\"line\">    <span class=\"comment\">// 作为函数参数传递</span></div><div class=\"line\">    printMap(map1)</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">printMap</span><span class=\"params\">(m <span class=\"keyword\">map</span>[<span class=\"keyword\">string</span>]Student)</span></span> &#123;</div><div class=\"line\">    fmt.Printf(<span class=\"string\">\"currentMap: %v\\n\"</span>, m)</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</div><div class=\"line\">    useMap()</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<h3 id=\"Set类型\"><a href=\"#Set类型\" class=\"headerlink\" title=\"Set类型\"></a>Set类型</h3><p>golang没有内置Set类型, 可以自定义实现。</p>"},{"title":"[mysql]python3并发访问分布式mysql表","date":"2017-08-06T07:22:43.000Z","_content":"\n### 场景说明\n假设有一个mysql表被水平切分，分散到多个host中，每个host拥有n个切分表。\n如果需要并发去访问这些表，快速得到查询结果， 应该怎么做呢？\n这里提供一种方案，利用python3的asyncio异步io库及aiomysql异步库去实现这个需求。\n<!--more-->\n\n### 代码演示\n```python\nimport logging\nimport random\nimport asyncio\nfrom aiomysql import create_pool\n\n# 假设mysql表分散在8个host, 每个host有16张子表\nTBLES = {\n    \"192.168.1.01\": \"table_000-015\", # 000-015表示该ip下的表明从table_000一直连续到table_015\n    \"192.168.1.02\": \"table_016-031\",\n    \"192.168.1.03\": \"table_032-047\",\n    \"192.168.1.04\": \"table_048-063\",\n    \"192.168.1.05\": \"table_064-079\",\n    \"192.168.1.06\": \"table_080-095\",\n    \"192.168.1.07\": \"table_096-0111\",\n    \"192.168.1.08\": \"table_112-0127\",\n}\nUSER = \"xxx\"\nPASSWD = \"xxxx\"\n\n# wrapper函数，用于捕捉异常\ndef query_wrapper(func):\n    async def wrapper(*args, **kwargs):\n        try:\n            await func(*args, **kwargs)\n        except Exception as e:\n            print(e)\n    return wrapper\n\n\n# 实际的sql访问处理函数，通过aiomysql实现异步非阻塞请求\n@query_wrapper\nasync def query_do_something(ip, db, table):\n    async with create_pool(host=ip, db=db, user=USER, password=PASSWD) as pool:\n        async with pool.get() as conn:\n            async with conn.cursor() as cur:\n                sql = (\"select xxx from {} where xxxx\")\n                await cur.execute(sql.format(table))\n                res = await cur.fetchall()\n                # then do something...\n\n\n# 生成sql访问队列, 队列的每个元素包含要对某个表进行访问的函数及参数\ndef gen_tasks():\n    tasks = []\n    for ip, tbls in TBLES.items():\n        cols = re.split('_|-', tbls)\n        tblpre = \"_\".join(cols[:-2])\n        min_num = int(cols[-2])\n        max_num = int(cols[-1])\n        for num in range(min_num, max_num+1):\n            tasks.append(\n               (query_do_something, ip, 'your_dbname', '{}_{}'.format(tblpre, num))\n            )\n\n    random.shuffle(tasks)\n    return tasks\n\n# 按批量运行sql访问请求队列\ndef run_tasks(tasks, batch_len):\n    try:\n        for idx in range(0, len(tasks), batch_len):\n            batch_tasks = tasks[idx:idx+batch_len]\n            logging.info(\"current batch, start_idx:%s len:%s\" % (idx, len(batch_tasks)))\n            for i in range(0, len(batch_tasks)):\n                l = batch_tasks[i]\n                batch_tasks[i] = asyncio.ensure_future(\n                    l[0](*l[1:])\n                )\n            loop.run_until_complete(asyncio.gather(*batch_tasks))\n    except Exception as e:\n        logging.warn(e)\n\n# main方法, 通过asyncio实现函数异步调用\ndef main():\n    loop = asyncio.get_event_loop()\n\n    tasks = gen_tasks()\n    batch_len = len(TBLES.keys()) * 5   # all up to you\n    run_tasks(tasks, batch_len)\n\n    loop.close()\n```","source":"_posts/mysql/mysql_concurrent_query.md","raw":"\n---\ntitle: '[mysql]python3并发访问分布式mysql表'\ndate: 2017-08-06 15:22:43\ntags: mysql\n---\n\n### 场景说明\n假设有一个mysql表被水平切分，分散到多个host中，每个host拥有n个切分表。\n如果需要并发去访问这些表，快速得到查询结果， 应该怎么做呢？\n这里提供一种方案，利用python3的asyncio异步io库及aiomysql异步库去实现这个需求。\n<!--more-->\n\n### 代码演示\n```python\nimport logging\nimport random\nimport asyncio\nfrom aiomysql import create_pool\n\n# 假设mysql表分散在8个host, 每个host有16张子表\nTBLES = {\n    \"192.168.1.01\": \"table_000-015\", # 000-015表示该ip下的表明从table_000一直连续到table_015\n    \"192.168.1.02\": \"table_016-031\",\n    \"192.168.1.03\": \"table_032-047\",\n    \"192.168.1.04\": \"table_048-063\",\n    \"192.168.1.05\": \"table_064-079\",\n    \"192.168.1.06\": \"table_080-095\",\n    \"192.168.1.07\": \"table_096-0111\",\n    \"192.168.1.08\": \"table_112-0127\",\n}\nUSER = \"xxx\"\nPASSWD = \"xxxx\"\n\n# wrapper函数，用于捕捉异常\ndef query_wrapper(func):\n    async def wrapper(*args, **kwargs):\n        try:\n            await func(*args, **kwargs)\n        except Exception as e:\n            print(e)\n    return wrapper\n\n\n# 实际的sql访问处理函数，通过aiomysql实现异步非阻塞请求\n@query_wrapper\nasync def query_do_something(ip, db, table):\n    async with create_pool(host=ip, db=db, user=USER, password=PASSWD) as pool:\n        async with pool.get() as conn:\n            async with conn.cursor() as cur:\n                sql = (\"select xxx from {} where xxxx\")\n                await cur.execute(sql.format(table))\n                res = await cur.fetchall()\n                # then do something...\n\n\n# 生成sql访问队列, 队列的每个元素包含要对某个表进行访问的函数及参数\ndef gen_tasks():\n    tasks = []\n    for ip, tbls in TBLES.items():\n        cols = re.split('_|-', tbls)\n        tblpre = \"_\".join(cols[:-2])\n        min_num = int(cols[-2])\n        max_num = int(cols[-1])\n        for num in range(min_num, max_num+1):\n            tasks.append(\n               (query_do_something, ip, 'your_dbname', '{}_{}'.format(tblpre, num))\n            )\n\n    random.shuffle(tasks)\n    return tasks\n\n# 按批量运行sql访问请求队列\ndef run_tasks(tasks, batch_len):\n    try:\n        for idx in range(0, len(tasks), batch_len):\n            batch_tasks = tasks[idx:idx+batch_len]\n            logging.info(\"current batch, start_idx:%s len:%s\" % (idx, len(batch_tasks)))\n            for i in range(0, len(batch_tasks)):\n                l = batch_tasks[i]\n                batch_tasks[i] = asyncio.ensure_future(\n                    l[0](*l[1:])\n                )\n            loop.run_until_complete(asyncio.gather(*batch_tasks))\n    except Exception as e:\n        logging.warn(e)\n\n# main方法, 通过asyncio实现函数异步调用\ndef main():\n    loop = asyncio.get_event_loop()\n\n    tasks = gen_tasks()\n    batch_len = len(TBLES.keys()) * 5   # all up to you\n    run_tasks(tasks, batch_len)\n\n    loop.close()\n```","slug":"mysql/mysql_concurrent_query","published":1,"updated":"2017-08-07T05:47:10.147Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj61qjryg000fdd4dmhbpofa7","content":"<h3 id=\"场景说明\"><a href=\"#场景说明\" class=\"headerlink\" title=\"场景说明\"></a>场景说明</h3><p>假设有一个mysql表被水平切分，分散到多个host中，每个host拥有n个切分表。<br>如果需要并发去访问这些表，快速得到查询结果， 应该怎么做呢？<br>这里提供一种方案，利用python3的asyncio异步io库及aiomysql异步库去实现这个需求。<br><a id=\"more\"></a></p>\n<h3 id=\"代码演示\"><a href=\"#代码演示\" class=\"headerlink\" title=\"代码演示\"></a>代码演示</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> logging</div><div class=\"line\"><span class=\"keyword\">import</span> random</div><div class=\"line\"><span class=\"keyword\">import</span> asyncio</div><div class=\"line\"><span class=\"keyword\">from</span> aiomysql <span class=\"keyword\">import</span> create_pool</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># 假设mysql表分散在8个host, 每个host有16张子表</span></div><div class=\"line\">TBLES = &#123;</div><div class=\"line\">    <span class=\"string\">\"192.168.1.01\"</span>: <span class=\"string\">\"table_000-015\"</span>, <span class=\"comment\"># 000-015表示该ip下的表明从table_000一直连续到table_015</span></div><div class=\"line\">    <span class=\"string\">\"192.168.1.02\"</span>: <span class=\"string\">\"table_016-031\"</span>,</div><div class=\"line\">    <span class=\"string\">\"192.168.1.03\"</span>: <span class=\"string\">\"table_032-047\"</span>,</div><div class=\"line\">    <span class=\"string\">\"192.168.1.04\"</span>: <span class=\"string\">\"table_048-063\"</span>,</div><div class=\"line\">    <span class=\"string\">\"192.168.1.05\"</span>: <span class=\"string\">\"table_064-079\"</span>,</div><div class=\"line\">    <span class=\"string\">\"192.168.1.06\"</span>: <span class=\"string\">\"table_080-095\"</span>,</div><div class=\"line\">    <span class=\"string\">\"192.168.1.07\"</span>: <span class=\"string\">\"table_096-0111\"</span>,</div><div class=\"line\">    <span class=\"string\">\"192.168.1.08\"</span>: <span class=\"string\">\"table_112-0127\"</span>,</div><div class=\"line\">&#125;</div><div class=\"line\">USER = <span class=\"string\">\"xxx\"</span></div><div class=\"line\">PASSWD = <span class=\"string\">\"xxxx\"</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># wrapper函数，用于捕捉异常</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">query_wrapper</span><span class=\"params\">(func)</span>:</span></div><div class=\"line\">    <span class=\"keyword\">async</span> <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">wrapper</span><span class=\"params\">(*args, **kwargs)</span>:</span></div><div class=\"line\">        <span class=\"keyword\">try</span>:</div><div class=\"line\">            <span class=\"keyword\">await</span> func(*args, **kwargs)</div><div class=\"line\">        <span class=\"keyword\">except</span> Exception <span class=\"keyword\">as</span> e:</div><div class=\"line\">            print(e)</div><div class=\"line\">    <span class=\"keyword\">return</span> wrapper</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># 实际的sql访问处理函数，通过aiomysql实现异步非阻塞请求</span></div><div class=\"line\"><span class=\"meta\">@query_wrapper</span></div><div class=\"line\"><span class=\"keyword\">async</span> <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">query_do_something</span><span class=\"params\">(ip, db, table)</span>:</span></div><div class=\"line\">    <span class=\"keyword\">async</span> <span class=\"keyword\">with</span> create_pool(host=ip, db=db, user=USER, password=PASSWD) <span class=\"keyword\">as</span> pool:</div><div class=\"line\">        <span class=\"keyword\">async</span> <span class=\"keyword\">with</span> pool.get() <span class=\"keyword\">as</span> conn:</div><div class=\"line\">            <span class=\"keyword\">async</span> <span class=\"keyword\">with</span> conn.cursor() <span class=\"keyword\">as</span> cur:</div><div class=\"line\">                sql = (<span class=\"string\">\"select xxx from &#123;&#125; where xxxx\"</span>)</div><div class=\"line\">                <span class=\"keyword\">await</span> cur.execute(sql.format(table))</div><div class=\"line\">                res = <span class=\"keyword\">await</span> cur.fetchall()</div><div class=\"line\">                <span class=\"comment\"># then do something...</span></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># 生成sql访问队列, 队列的每个元素包含要对某个表进行访问的函数及参数</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">gen_tasks</span><span class=\"params\">()</span>:</span></div><div class=\"line\">    tasks = []</div><div class=\"line\">    <span class=\"keyword\">for</span> ip, tbls <span class=\"keyword\">in</span> TBLES.items():</div><div class=\"line\">        cols = re.split(<span class=\"string\">'_|-'</span>, tbls)</div><div class=\"line\">        tblpre = <span class=\"string\">\"_\"</span>.join(cols[:<span class=\"number\">-2</span>])</div><div class=\"line\">        min_num = int(cols[<span class=\"number\">-2</span>])</div><div class=\"line\">        max_num = int(cols[<span class=\"number\">-1</span>])</div><div class=\"line\">        <span class=\"keyword\">for</span> num <span class=\"keyword\">in</span> range(min_num, max_num+<span class=\"number\">1</span>):</div><div class=\"line\">            tasks.append(</div><div class=\"line\">               (query_do_something, ip, <span class=\"string\">'your_dbname'</span>, <span class=\"string\">'&#123;&#125;_&#123;&#125;'</span>.format(tblpre, num))</div><div class=\"line\">            )</div><div class=\"line\"></div><div class=\"line\">    random.shuffle(tasks)</div><div class=\"line\">    <span class=\"keyword\">return</span> tasks</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># 按批量运行sql访问请求队列</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">run_tasks</span><span class=\"params\">(tasks, batch_len)</span>:</span></div><div class=\"line\">    <span class=\"keyword\">try</span>:</div><div class=\"line\">        <span class=\"keyword\">for</span> idx <span class=\"keyword\">in</span> range(<span class=\"number\">0</span>, len(tasks), batch_len):</div><div class=\"line\">            batch_tasks = tasks[idx:idx+batch_len]</div><div class=\"line\">            logging.info(<span class=\"string\">\"current batch, start_idx:%s len:%s\"</span> % (idx, len(batch_tasks)))</div><div class=\"line\">            <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(<span class=\"number\">0</span>, len(batch_tasks)):</div><div class=\"line\">                l = batch_tasks[i]</div><div class=\"line\">                batch_tasks[i] = asyncio.ensure_future(</div><div class=\"line\">                    l[<span class=\"number\">0</span>](*l[<span class=\"number\">1</span>:])</div><div class=\"line\">                )</div><div class=\"line\">            loop.run_until_complete(asyncio.gather(*batch_tasks))</div><div class=\"line\">    <span class=\"keyword\">except</span> Exception <span class=\"keyword\">as</span> e:</div><div class=\"line\">        logging.warn(e)</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># main方法, 通过asyncio实现函数异步调用</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">main</span><span class=\"params\">()</span>:</span></div><div class=\"line\">    loop = asyncio.get_event_loop()</div><div class=\"line\"></div><div class=\"line\">    tasks = gen_tasks()</div><div class=\"line\">    batch_len = len(TBLES.keys()) * <span class=\"number\">5</span>   <span class=\"comment\"># all up to you</span></div><div class=\"line\">    run_tasks(tasks, batch_len)</div><div class=\"line\"></div><div class=\"line\">    loop.close()</div></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"<h3 id=\"场景说明\"><a href=\"#场景说明\" class=\"headerlink\" title=\"场景说明\"></a>场景说明</h3><p>假设有一个mysql表被水平切分，分散到多个host中，每个host拥有n个切分表。<br>如果需要并发去访问这些表，快速得到查询结果， 应该怎么做呢？<br>这里提供一种方案，利用python3的asyncio异步io库及aiomysql异步库去实现这个需求。<br>","more":"</p>\n<h3 id=\"代码演示\"><a href=\"#代码演示\" class=\"headerlink\" title=\"代码演示\"></a>代码演示</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> logging</div><div class=\"line\"><span class=\"keyword\">import</span> random</div><div class=\"line\"><span class=\"keyword\">import</span> asyncio</div><div class=\"line\"><span class=\"keyword\">from</span> aiomysql <span class=\"keyword\">import</span> create_pool</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># 假设mysql表分散在8个host, 每个host有16张子表</span></div><div class=\"line\">TBLES = &#123;</div><div class=\"line\">    <span class=\"string\">\"192.168.1.01\"</span>: <span class=\"string\">\"table_000-015\"</span>, <span class=\"comment\"># 000-015表示该ip下的表明从table_000一直连续到table_015</span></div><div class=\"line\">    <span class=\"string\">\"192.168.1.02\"</span>: <span class=\"string\">\"table_016-031\"</span>,</div><div class=\"line\">    <span class=\"string\">\"192.168.1.03\"</span>: <span class=\"string\">\"table_032-047\"</span>,</div><div class=\"line\">    <span class=\"string\">\"192.168.1.04\"</span>: <span class=\"string\">\"table_048-063\"</span>,</div><div class=\"line\">    <span class=\"string\">\"192.168.1.05\"</span>: <span class=\"string\">\"table_064-079\"</span>,</div><div class=\"line\">    <span class=\"string\">\"192.168.1.06\"</span>: <span class=\"string\">\"table_080-095\"</span>,</div><div class=\"line\">    <span class=\"string\">\"192.168.1.07\"</span>: <span class=\"string\">\"table_096-0111\"</span>,</div><div class=\"line\">    <span class=\"string\">\"192.168.1.08\"</span>: <span class=\"string\">\"table_112-0127\"</span>,</div><div class=\"line\">&#125;</div><div class=\"line\">USER = <span class=\"string\">\"xxx\"</span></div><div class=\"line\">PASSWD = <span class=\"string\">\"xxxx\"</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># wrapper函数，用于捕捉异常</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">query_wrapper</span><span class=\"params\">(func)</span>:</span></div><div class=\"line\">    <span class=\"keyword\">async</span> <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">wrapper</span><span class=\"params\">(*args, **kwargs)</span>:</span></div><div class=\"line\">        <span class=\"keyword\">try</span>:</div><div class=\"line\">            <span class=\"keyword\">await</span> func(*args, **kwargs)</div><div class=\"line\">        <span class=\"keyword\">except</span> Exception <span class=\"keyword\">as</span> e:</div><div class=\"line\">            print(e)</div><div class=\"line\">    <span class=\"keyword\">return</span> wrapper</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># 实际的sql访问处理函数，通过aiomysql实现异步非阻塞请求</span></div><div class=\"line\"><span class=\"meta\">@query_wrapper</span></div><div class=\"line\"><span class=\"keyword\">async</span> <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">query_do_something</span><span class=\"params\">(ip, db, table)</span>:</span></div><div class=\"line\">    <span class=\"keyword\">async</span> <span class=\"keyword\">with</span> create_pool(host=ip, db=db, user=USER, password=PASSWD) <span class=\"keyword\">as</span> pool:</div><div class=\"line\">        <span class=\"keyword\">async</span> <span class=\"keyword\">with</span> pool.get() <span class=\"keyword\">as</span> conn:</div><div class=\"line\">            <span class=\"keyword\">async</span> <span class=\"keyword\">with</span> conn.cursor() <span class=\"keyword\">as</span> cur:</div><div class=\"line\">                sql = (<span class=\"string\">\"select xxx from &#123;&#125; where xxxx\"</span>)</div><div class=\"line\">                <span class=\"keyword\">await</span> cur.execute(sql.format(table))</div><div class=\"line\">                res = <span class=\"keyword\">await</span> cur.fetchall()</div><div class=\"line\">                <span class=\"comment\"># then do something...</span></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># 生成sql访问队列, 队列的每个元素包含要对某个表进行访问的函数及参数</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">gen_tasks</span><span class=\"params\">()</span>:</span></div><div class=\"line\">    tasks = []</div><div class=\"line\">    <span class=\"keyword\">for</span> ip, tbls <span class=\"keyword\">in</span> TBLES.items():</div><div class=\"line\">        cols = re.split(<span class=\"string\">'_|-'</span>, tbls)</div><div class=\"line\">        tblpre = <span class=\"string\">\"_\"</span>.join(cols[:<span class=\"number\">-2</span>])</div><div class=\"line\">        min_num = int(cols[<span class=\"number\">-2</span>])</div><div class=\"line\">        max_num = int(cols[<span class=\"number\">-1</span>])</div><div class=\"line\">        <span class=\"keyword\">for</span> num <span class=\"keyword\">in</span> range(min_num, max_num+<span class=\"number\">1</span>):</div><div class=\"line\">            tasks.append(</div><div class=\"line\">               (query_do_something, ip, <span class=\"string\">'your_dbname'</span>, <span class=\"string\">'&#123;&#125;_&#123;&#125;'</span>.format(tblpre, num))</div><div class=\"line\">            )</div><div class=\"line\"></div><div class=\"line\">    random.shuffle(tasks)</div><div class=\"line\">    <span class=\"keyword\">return</span> tasks</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># 按批量运行sql访问请求队列</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">run_tasks</span><span class=\"params\">(tasks, batch_len)</span>:</span></div><div class=\"line\">    <span class=\"keyword\">try</span>:</div><div class=\"line\">        <span class=\"keyword\">for</span> idx <span class=\"keyword\">in</span> range(<span class=\"number\">0</span>, len(tasks), batch_len):</div><div class=\"line\">            batch_tasks = tasks[idx:idx+batch_len]</div><div class=\"line\">            logging.info(<span class=\"string\">\"current batch, start_idx:%s len:%s\"</span> % (idx, len(batch_tasks)))</div><div class=\"line\">            <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(<span class=\"number\">0</span>, len(batch_tasks)):</div><div class=\"line\">                l = batch_tasks[i]</div><div class=\"line\">                batch_tasks[i] = asyncio.ensure_future(</div><div class=\"line\">                    l[<span class=\"number\">0</span>](*l[<span class=\"number\">1</span>:])</div><div class=\"line\">                )</div><div class=\"line\">            loop.run_until_complete(asyncio.gather(*batch_tasks))</div><div class=\"line\">    <span class=\"keyword\">except</span> Exception <span class=\"keyword\">as</span> e:</div><div class=\"line\">        logging.warn(e)</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># main方法, 通过asyncio实现函数异步调用</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">main</span><span class=\"params\">()</span>:</span></div><div class=\"line\">    loop = asyncio.get_event_loop()</div><div class=\"line\"></div><div class=\"line\">    tasks = gen_tasks()</div><div class=\"line\">    batch_len = len(TBLES.keys()) * <span class=\"number\">5</span>   <span class=\"comment\"># all up to you</span></div><div class=\"line\">    run_tasks(tasks, batch_len)</div><div class=\"line\"></div><div class=\"line\">    loop.close()</div></pre></td></tr></table></figure>"}],"PostAsset":[],"PostCategory":[],"PostTag":[{"post_id":"cj61qanaf0001tu4d3jijlbx5","tag_id":"cj61qanaq0003tu4db12pr0u2","_id":"cj61qanau0004tu4dpcrbiuem"},{"post_id":"cj61qand10009tu4dqo2xjs02","tag_id":"cj61qand4000atu4duatibjoh","_id":"cj61qand5000btu4dt41etfk3"},{"post_id":"cj61qjrxf0000dd4dfo5bcjjn","tag_id":"cj61qand4000atu4duatibjoh","_id":"cj61qjrxv0002dd4d8iudo7ot"},{"post_id":"cj61qjrxr0001dd4da1944wwq","tag_id":"cj61qand4000atu4duatibjoh","_id":"cj61qjrxx0004dd4dvftguu5v"},{"post_id":"cj61qjrxv0003dd4d6zsadb4o","tag_id":"cj61qand4000atu4duatibjoh","_id":"cj61qjrxz0006dd4dr6d355vw"},{"post_id":"cj61qjrxy0005dd4dq6tisjz1","tag_id":"cj61qand4000atu4duatibjoh","_id":"cj61qjry10008dd4d3zaxf8ml"},{"post_id":"cj61qjry00007dd4dxid1r2n5","tag_id":"cj61qand4000atu4duatibjoh","_id":"cj61qjry3000add4duugo4twe"},{"post_id":"cj61qjry20009dd4d565q00yi","tag_id":"cj61qand4000atu4duatibjoh","_id":"cj61qjry5000cdd4d1kg4yu08"},{"post_id":"cj61qjry3000bdd4d37fjy45l","tag_id":"cj61qand4000atu4duatibjoh","_id":"cj61qjry6000ddd4d6l1ydtrw"},{"post_id":"cj61qjry8000edd4d9in22k38","tag_id":"cj61qand4000atu4duatibjoh","_id":"cj61qjryi000gdd4d6dnkg3o2"},{"post_id":"cj61qjryg000fdd4dmhbpofa7","tag_id":"cj61qjryj000hdd4d4oqkuww1","_id":"cj61qjryw000idd4d1iy553w8"}],"Tag":[{"name":"consul","_id":"cj61qanaq0003tu4db12pr0u2"},{"name":"golang","_id":"cj61qand4000atu4duatibjoh"},{"name":"mysql","_id":"cj61qjryj000hdd4d4oqkuww1"}]}}